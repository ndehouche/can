{"version":3,"file":"lib.modern.js","sources":["../src/config/Config.ts","../src/utils/Constants.ts","../src/utils/ContractUtils.ts","../src/utils/Logger.ts","../src/utils/DatatokenName.ts","../src/utils/DdoHelpers.ts","../src/utils/FetchHelper.ts","../src/utils/General.ts","../src/utils/minAbi.ts","../src/utils/SignatureUtils.ts","../src/utils/TokenUtils.ts","../src/utils/ProviderErrors.ts","../src/utils/OrderUtils.ts","../src/config/ConfigHelper.ts","../src/contracts/SmartContract.ts","../src/contracts/SmartContractWithAddress.ts","../src/contracts/Dispenser.ts","../src/contracts/FixedRateExchange.ts","../src/contracts/Router.ts","../src/contracts/NFT.ts","../src/contracts/Datatoken.ts","../src/contracts/NFTFactory.ts","../src/contracts/ve/VeOcean.ts","../src/contracts/ve/VeFeeDistributor.ts","../src/contracts/ve/VeFeeEstimate.ts","../src/contracts/ve/VeAllocate.ts","../src/contracts/df/DfRewards.ts","../src/contracts/df/DfStrategyV1.ts","../src/services/Aquarius.ts","../src/services/Provider.ts"],"sourcesContent":["import { AbiItem } from '../@types'\nimport { LogLevel } from '../utils'\n\nexport class Config {\n  /**\n   * Ethereum node URL.\n   * @type {string}\n   */\n  public nodeUri?: string\n\n  /**\n   * Address of Provider.\n   * @type {string}\n   */\n  public providerAddress?: string\n\n  /**\n   * Metadata Store URL.\n   * @type {string}\n   */\n  public metadataCacheUri?: string\n\n  /**\n   * Provider URL.\n   * @type {string}\n   */\n  public providerUri?: string\n\n  /**\n   * Web3 Provider.\n   * @type {any}\n   */\n  public web3Provider?: any\n\n  /**\n   * Ocean Token address\n   * @type {string}\n   */\n  public oceanTokenAddress?: string\n\n  /**\n   * Factory address\n   * @type {string}\n   */\n  public nftFactoryAddress?: string\n\n  /**\n   * datatokens ABI\n   * @type {string}\n   */\n  public datatokensABI?: AbiItem | AbiItem[]\n\n  /**\n   * FixedRateExchangeAddress\n   * @type {string}\n   */\n  public fixedRateExchangeAddress?: string\n\n  /**\n   * FixedRateExchangeAddressABI\n   * @type {any}\n   */\n  public fixedRateExchangeAddressABI?: AbiItem | AbiItem[]\n\n  /**\n   * DispenserAddress\n   * @type {string}\n   */\n  public dispenserAddress?: string\n\n  /**\n   * DispenserABI\n   * @type {any}\n   */\n  public dispenserABI?: AbiItem | AbiItem[]\n\n  /**\n   * OPFCommunityFeeCollector\n   * @type {string}\n   */\n  public opfCommunityFeeCollector?: string\n\n  /**\n   * SideStaking address\n   * @type {string}\n   */\n  public sideStakingAddress?: string\n\n  /**\n   * block number of the deployment\n   * @type {number}\n   */\n  public startBlock?: number\n  /**\n   * Log level.\n   * @type {boolean | LogLevel}\n   */\n  public verbose?: boolean | LogLevel\n\n  /**\n   * Message shown when the user creates its own token.\n   * @type {string}\n   */\n  public authMessage?: string\n\n  /**\n   * Token expiration time in ms.\n   * @type {number}\n   */\n  public authTokenExpiration?: number\n\n  /**\n   * Parity config\n   * @type {string}\n   */\n  public parityUri?: string\n\n  public threshold?: number\n\n  /**\n   * Chain ID\n   * @type {number}\n   */\n  chainId: number\n\n  /**\n   * Network name ex: mainnet, goerli, polygon\n   * @type {string}\n   */\n  network: string\n\n  /**\n   * Url of the relevant subgraph instance ex: https://subgraph.mainnet.oceanprotocol.com\n   * @type {string}\n   */\n  subgraphUri: string\n\n  /**\n   * Url of the  blockchain exporer ex: https://etherscan.io\n   * @type {string}\n   */\n  explorerUri: string\n\n  /**\n   * Ocean toke symbol on the chain, it's used just for convenience to reduce number of calls\n   * @type {string}\n   */\n  oceanTokenSymbol: string\n\n  /**\n   * Specify the transaction Block Timeout\n   * @type {number}\n   */\n  transactionBlockTimeout: number\n\n  /**\n   * Specify the transaction Confirmation Blocks\n   * @type {number}\n   */\n  transactionConfirmationBlocks: number\n\n  /**\n   * Specify the transaction Polling Blocks Timeout\n   * @type {number}\n   */\n  transactionPollingTimeout: number\n\n  /**\n   * Specify the multiplier for the gas fee\n   * @type {number}\n   */\n  gasFeeMultiplier: number\n\n  veAllocate?: string\n  veOCEAN?: string\n  veDelegation?: string\n  veFeeDistributor?: string\n  veDelegationProxy?: string\n  DFRewards?: string\n  DFStrategyV1?: string\n  veFeeEstimate?: string\n}\n","export const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const GASLIMIT_DEFAULT = 1000000\nexport const MAX_UINT_256 =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639934'\nexport const FEE_HISTORY_NOT_SUPPORTED =\n  'Returned error: Method eth_feeHistory not supported.'\n","import { ethers, Signer, providers, Contract, ContractFunction, BigNumber } from 'ethers'\n\nimport { Config } from '../config'\nimport { minAbi } from '.'\n\nconst MIN_GAS_FEE_POLYGON = 30000000000 // minimum recommended 30 gwei polygon main and mumbai fees\nconst POLYGON_NETWORK_ID = 137\nconst MUMBAI_NETWORK_ID = 80001\n\nexport function setContractDefaults(contract: Contract, config: Config): Contract {\n  // TO DO - since ethers does not provide this\n  /* if (config) {\n    if (config.transactionBlockTimeout)\n      contract.transactionBlockTimeout = config.transactionBlockTimeout\n    if (config.transactionConfirmationBlocks)\n      contract.transactionConfirmationBlocks = config.transactionConfirmationBlocks\n    if (config.transactionPollingTimeout)\n      contract.transactionPollingTimeout = config.transactionPollingTimeout\n  }\n  */\n  return contract\n}\n\n/**\n * Asynchronous function that returns a fair gas price based on the current gas price and a multiplier.\n * @param {Signer} signer - The signer object to use for fetching the current gas price.\n * @param {number} gasFeeMultiplier - The multiplier to apply to the current gas price. If not provided, the current gas price is returned as a string.\n * @returns A Promise that resolves to a string representation of the fair gas price.\n */\nexport async function getFairGasPrice(\n  signer: Signer,\n  gasFeeMultiplier: number\n): Promise<string> {\n  const price = await (await signer.provider.getFeeData()).gasPrice\n  const x = ethers.BigNumber.from(price.toString())\n  if (gasFeeMultiplier) return x.mul(gasFeeMultiplier).toBigInt().toString(10)\n  else return x.toString()\n}\n\n/**\n * Asynchronous function that returns the number of decimal places for a given token.\n * @param {Signer} signer - The signer object to use for fetching the token decimals.\n * @param {string} token - The address of the token contract.\n * @returns A Promise that resolves to the number of decimal places for the token.\n */\nexport async function getTokenDecimals(signer: Signer, token: string) {\n  const tokenContract = new ethers.Contract(token, minAbi, signer)\n  return tokenContract.decimals()\n}\n\n/**\n * Converts an amount of units to tokens\n * @param {Signer} signer -  The signer object to use.\n * @param {string} token - The token to convert\n * @param {string} amount - The amount of units to convert\n * @param {number} [tokenDecimals] - The number of decimals in the token\n * @returns {Promise<string>} - The converted amount in tokens\n */\nexport async function unitsToAmount(\n  signer: Signer,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  let decimals = tokenDecimals || (await getTokenDecimals(signer, token))\n  if (decimals === '0') {\n    decimals = 18\n  }\n\n  const amountFormatted = ethers.utils.formatUnits(amount, decimals)\n  return amountFormatted.toString()\n}\n\n/**\n * Converts an amount of tokens to units\n * @param {Signer} signer -  The signer object to use.\n * @param {string} token - The token to convert\n * @param {string} amount - The amount of tokens to convert\n * @param {number} [tokenDecimals] - The number of decimals of the token\n * @returns {Promise<string>} - The converted amount in units\n */\nexport async function amountToUnits(\n  signer: Signer,\n  token: string,\n  amount: string,\n  tokenDecimals?: number\n): Promise<string> {\n  let decimals = tokenDecimals || (await getTokenDecimals(signer, token))\n  if (decimals === '0') {\n    decimals = 18\n  }\n  const amountFormatted = ethers.utils.parseUnits(amount, decimals)\n  return amountFormatted.toString()\n}\n\nexport function getEventFromTx(txReceipt, eventName) {\n  return txReceipt?.events?.filter((log) => {\n    return log.event === eventName\n  })[0]\n}\n\n/**\n * Send the transation on chain\n * @param {BigNumber} estGas estimated gas for the transaction\n * @param {Signer} signer signer object\n * @param {number} gasFeeMultiplier number represinting the multiplier we apply to gas fees\n * @param {Function} functionToSend function that we need to send\n * @param {...any[]} args arguments of the function\n * @return {Promise<any>} transaction receipt\n */\nexport async function sendTx(\n  estGas: BigNumber,\n  signer: Signer,\n  gasFeeMultiplier: number,\n  functionToSend: ContractFunction,\n  ...args: any[]\n): Promise<providers.TransactionResponse> {\n  const { chainId } = await signer.provider.getNetwork()\n  const feeHistory = await signer.provider.getFeeData()\n  let overrides\n  if (feeHistory.maxPriorityFeePerGas) {\n    let aggressiveFeePriorityFeePerGas = feeHistory.maxPriorityFeePerGas.toString()\n    let aggressiveFeePerGas = feeHistory.maxFeePerGas.toString()\n    if (gasFeeMultiplier > 1) {\n      aggressiveFeePriorityFeePerGas = Math.round(\n        feeHistory.maxPriorityFeePerGas.toNumber() * gasFeeMultiplier\n      ).toString()\n      aggressiveFeePerGas = Math.round(\n        feeHistory.maxFeePerGas.toNumber() * gasFeeMultiplier\n      ).toString()\n    }\n    overrides = {\n      maxPriorityFeePerGas:\n        (chainId === MUMBAI_NETWORK_ID || chainId === POLYGON_NETWORK_ID) &&\n        Number(aggressiveFeePriorityFeePerGas) < MIN_GAS_FEE_POLYGON\n          ? MIN_GAS_FEE_POLYGON\n          : Number(aggressiveFeePriorityFeePerGas),\n      maxFeePerGas:\n        (chainId === MUMBAI_NETWORK_ID || chainId === POLYGON_NETWORK_ID) &&\n        Number(aggressiveFeePerGas) < MIN_GAS_FEE_POLYGON\n          ? MIN_GAS_FEE_POLYGON\n          : Number(aggressiveFeePerGas)\n    }\n  } else {\n    overrides = {\n      gasPrice: feeHistory.gasPrice\n    }\n  }\n  overrides.gasLimit = estGas.add(20000)\n  try {\n    const trxReceipt = await functionToSend(...args, overrides)\n    return trxReceipt\n  } catch (e) {\n    return null\n  }\n}\n","/* eslint-disable no-unused-vars */\nexport enum LogLevel {\n  None = -1,\n  Error = 0,\n  Warn = 1,\n  Log = 2,\n  Verbose = 3\n}\n/* eslint-enable no-unused-vars */\n\nexport class Logger {\n  constructor(private logLevel?: LogLevel) {\n    this.logLevel = logLevel || LogLevel.Error\n  }\n\n  public setLevel(logLevel: LogLevel): void {\n    this.logLevel = logLevel\n  }\n\n  public bypass(...args: any[]): void {\n    this.dispatch('log', -Infinity as any, ...args)\n  }\n\n  public debug(...args: any[]): void {\n    this.dispatch('debug', LogLevel.Verbose, ...args)\n  }\n\n  public log(...args: any[]): void {\n    this.dispatch('log', LogLevel.Log, ...args)\n  }\n\n  public warn(...args: any[]): void {\n    this.dispatch('warn', LogLevel.Warn, ...args)\n  }\n\n  public error(...args: any[]): void {\n    this.dispatch('error', LogLevel.Error, ...args)\n  }\n\n  private dispatch(verb: string, level: LogLevel, ...args: any[]) {\n    if (this.logLevel >= level) {\n      console[verb](...args)\n    }\n  }\n}\n\nexport const LoggerInstance = new Logger()\n","import wordListDefault from './data/words.json'\n\n/**\n * This function generates a datatoken name and symbol from a given word list.\n * @param {Object} [wordList] - An object containing an array of nouns and adjectives.\n * @param {string[]} [wordList.nouns] - An array of nouns.\n * @param {string[]} [wordList.adjectives] - An array of adjectives.\n * @returns {Object} Returns an object containing the generated name and symbol. Produces e.g. \"Endemic Jellyfish Token\" & \"ENDJEL-45\"\n */\nexport function generateDtName(wordList?: { nouns: string[]; adjectives: string[] }): {\n  name: string\n  symbol: string\n} {\n  const list = wordList || wordListDefault\n  const random1 = Math.floor(Math.random() * list.adjectives.length)\n  const random2 = Math.floor(Math.random() * list.nouns.length)\n  const indexNumber = Math.floor(Math.random() * 100)\n\n  // Capitalized adjective & noun\n  const adjective = list.adjectives[random1].replace(/^\\w/, (c) => c.toUpperCase())\n  const noun = list.nouns[random2].replace(/^\\w/, (c) => c.toUpperCase())\n\n  const name = `${adjective} ${noun} Token`\n  // use first 3 letters of name, uppercase it, and add random number\n  const symbol = `${(\n    adjective.substring(0, 3) + noun.substring(0, 3)\n  ).toUpperCase()}-${indexNumber}`\n\n  return { name, symbol }\n}\n","import sha256 from 'crypto-js/sha256'\nimport { ethers } from 'ethers'\n\n/**\n * Generates a valid DID\n * @param {string} nftAddress - The NFT address\n * @param {number} chainId - The chain ID\n * @returns {string} - The DID\n */\nexport function generateDid(nftAddress: string, chainId: number): string {\n  nftAddress = ethers.utils.getAddress(nftAddress)\n  const checksum = sha256(nftAddress + chainId.toString(10))\n  return `did:op:${checksum.toString()}`\n}\n\n/**\n * Returns the SHA256 hash of the input data\n * @param {any} data - The input data\n * @returns {string} - The SHA256 hash of the input data\n */\nexport function getHash(data: any): string {\n  return sha256(data).toString()\n}\n","import fetch from 'cross-fetch'\nimport { DownloadResponse } from '../@types'\n\n/**\n * Triggers  a file download from the specified URL when called from a browser context.\n * @param {string} url - The URL of the file to download\n * @returns {Promise<void>} - A Promise that resolves when the file has been downloaded\n */\nexport function downloadFileBrowser(url: string): void {\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'blob'\n  xhr.open('GET', url)\n  xhr.onload = () => {\n    const contentDispositionHeader = xhr.getResponseHeader('content-disposition')\n    const fileNameMatch = contentDispositionHeader?.match(\n      /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/\n    )\n    const fileName = fileNameMatch && fileNameMatch[1] ? fileNameMatch[1] : 'file'\n\n    const blobURL = window.URL.createObjectURL(xhr.response)\n    const a = document.createElement('a')\n    a.href = blobURL\n    a.setAttribute('download', fileName)\n    document.body.appendChild(a)\n    a.click()\n    a.remove()\n    window.URL.revokeObjectURL(blobURL)\n  }\n  xhr.send()\n}\n\n/**\n * Triggers  a file download from the specified URL when called from a browser context.\n * @param {string} url - The URL of the file to download\n * @param {number} [index] - The file index\n * @returns {Promise<void>} - A Promise that resolves when the file has been downloaded\n */\nexport async function downloadFile(\n  url: string,\n  index?: number\n): Promise<DownloadResponse> {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error('Response error.')\n  }\n  let filename: string\n  try {\n    filename = response.headers\n      .get('content-disposition')\n      .match(/attachment;filename=(.+)/)[1]\n  } catch {\n    try {\n      filename = url.split('/').pop()\n    } catch {\n      filename = `file${index}`\n    }\n  }\n\n  return { data: await response.arrayBuffer(), filename }\n}\n","/**\n * Simple blocking sleep function\n * @param {number} ms - Number of miliseconds to wait\n */\nexport async function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n","export const minAbi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_spender',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_from',\n        type: 'address'\n      },\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        name: '',\n        type: 'uint8'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      }\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        name: 'balance',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        name: '',\n        type: 'string'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: '_to',\n        type: 'address'\n      },\n      {\n        name: '_value',\n        type: 'uint256'\n      }\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        name: '',\n        type: 'bool'\n      }\n    ],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: '_owner',\n        type: 'address'\n      },\n      {\n        name: '_spender',\n        type: 'address'\n      }\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        name: '',\n        type: 'uint256'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    payable: true,\n    stateMutability: 'payable',\n    type: 'fallback'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'owner',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'spender',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Approval',\n    type: 'event'\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: 'from',\n        type: 'address'\n      },\n      {\n        indexed: true,\n        name: 'to',\n        type: 'address'\n      },\n      {\n        indexed: false,\n        name: 'value',\n        type: 'uint256'\n      }\n    ],\n    name: 'Transfer',\n    type: 'event'\n  }\n]\n","import { ethers, Signer, providers } from 'ethers'\n\n/**\n * Signs the hash of a message using the provided signer.\n * @param {Signer} signer - The signer to use for signing the hash.\n * @param {string} message - The message to sign.\n * @returns {Promise<string>} - A Promise that resolves to the signature of the hash of the message.\n */\nexport async function signHash(signer: Signer, message: string) {\n  // Since ganache has no support yet for personal_sign, we must use the legacy implementation\n  // const signedMessage = await user2.signMessage(message)\n\n  const messageHashBytes = ethers.utils.arrayify(message)\n  let signedMessage = await (signer as providers.JsonRpcSigner)._legacySignMessage(\n    messageHashBytes\n  )\n  signedMessage = signedMessage.substr(2) // remove 0x\n  const r = '0x' + signedMessage.slice(0, 64)\n  const s = '0x' + signedMessage.slice(64, 128)\n  let v = '0x' + signedMessage.slice(128, 130)\n  if (v === '0x00') v = '0x1b'\n  if (v === '0x01') v = '0x1c'\n\n  return { v, r, s }\n}\n","import Decimal from 'decimal.js'\nimport { ethers, Signer } from 'ethers'\nimport { amountToUnits, unitsToAmount, minAbi, sendTx, LoggerInstance } from '.'\nimport { Config } from '../config'\nimport { ReceiptOrEstimate, ReceiptOrDecimal } from '../@types'\n\n/**\n * Approve spender to spent amount tokens\n * @param {Signer} signer - The signer object\n * @param {Config} config - The config object\n * @param {string} account - The address of the caller\n * @param {string} tokenAddress - The address of the token\n * @param {string} spender - The address of the spender\n * @param {String} amount amount of ERC20 Datatokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {number} [tokenDecimals] optional number of decimals of the token\n * @param {boolean} [estimateGas]  if true, returns the estimate gas cost for calling the method\n */\nexport async function approve<G extends boolean = false>(\n  signer: Signer,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  tokenDecimals?: number,\n  estimateGas?: G\n): Promise<ReceiptOrDecimal<G> | number> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  if (!force) {\n    const currentAllowence = await allowance(signer, tokenAddress, account, spender)\n    if (new Decimal(currentAllowence).greaterThanOrEqualTo(new Decimal(amount))) {\n      return <ReceiptOrDecimal<G>>new Decimal(currentAllowence).toNumber()\n    }\n  }\n  const amountFormatted = await amountToUnits(signer, tokenAddress, amount, tokenDecimals)\n  const estGas = await tokenContract.estimateGas.approve(spender, amountFormatted)\n  if (estimateGas) return <ReceiptOrDecimal<G>>(<unknown>new Decimal(estGas.toString()))\n\n  const trxReceipt = await sendTx(\n    estGas,\n    signer,\n    config?.gasFeeMultiplier,\n    tokenContract.approve,\n    spender,\n    amountFormatted\n  )\n  return <ReceiptOrDecimal<G>>trxReceipt\n}\n\n/**\n * Approve spender to spent amount tokens\n * @param {Signer} signer - The signer object\n * @param {Config} config - The config object\n * @param {string} account - The address of the caller\n * @param {string} tokenAddress - The address of the token\n * @param {string} spender - The address of the spender\n * @param {string} amount amount of ERC20 tokens (always expressed as wei)\n * @param {boolean} force  if true, will overwrite any previous allowence. Else, will check if allowence is enough and will not send a transaction if it's not needed\n * @param {boolean} [estimateGas]  if true, returns the estimate gas cost for calling the method\n */\nexport async function approveWei<G extends boolean = false>(\n  signer: Signer,\n  config: Config,\n  account: string,\n  tokenAddress: string,\n  spender: string,\n  amount: string,\n  force = false,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  if (!force) {\n    const currentAllowence = await allowanceWei(signer, tokenAddress, account, spender)\n    if (ethers.BigNumber.from(currentAllowence).gt(ethers.BigNumber.from(amount))) {\n      return <ReceiptOrEstimate<G>>ethers.BigNumber.from(currentAllowence)\n    }\n  }\n  let result = null\n\n  const estGas = await tokenContract.estimateGas.approve(spender, amount)\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  try {\n    result = await sendTx(\n      estGas,\n      signer,\n      config?.gasFeeMultiplier,\n      tokenContract.approve,\n      spender,\n      amount\n    )\n  } catch (e) {\n    LoggerInstance.error(\n      `ERROR: Failed to approve spender to spend tokens : ${e.message}`\n    )\n  }\n  return result\n}\n\n/**\n * Moves amount tokens from the caller’s account to recipient.\n * @param {Signer} signer - The signer object\n * @param {Config} config - The config object\n * @param {string} tokenAddress - The address of the token\n * @param {string} recipient - The address of the tokens receiver\n * @param {String} amount amount of ERC20 Datatokens (not as wei)\n * @param {String} estimateGas  if true returns the gas estimate\n */\nexport async function transfer<G extends boolean = false>(\n  signer: Signer,\n  config: Config,\n  tokenAddress: string,\n  recipient: string,\n  amount: string,\n  estimateGas?: G\n): Promise<ReceiptOrEstimate<G>> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  const amountFormatted = await amountToUnits(signer, tokenAddress, amount)\n  const estGas = await tokenContract.estimateGas.transfer(recipient, amountFormatted)\n  if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n  const trxReceipt = await sendTx(\n    estGas,\n    signer,\n    config?.gasFeeMultiplier,\n    tokenContract.transfer,\n    recipient,\n    amountFormatted\n  )\n  return <ReceiptOrEstimate<G>>trxReceipt\n}\n\n/**\n * Get Allowance for any Datatoken\n * @param {Signer} signer - The signer object\n * @param {string} tokenAddress - The address of the token\n * @param {string} account - The address of the caller\n * @param {string} spender - The address of the spender\n * @param {number} tokenDecimals optional number of decimals of the token\n */\nexport async function allowance(\n  signer: Signer,\n  tokenAddress: string,\n  account: string,\n  spender: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  const trxReceipt = await tokenContract.allowance(account, spender)\n\n  return await unitsToAmount(signer, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get balance for any Datatoken\n * @param {Signer} signer - The signer object\n * @param {string} tokenAddress - The address of the token\n * @param {string} account - The address of the caller\n * @param {number} [tokenDecimals] optional number of decimals of the token\n */\nexport async function balance(\n  signer: Signer,\n  tokenAddress: string,\n  account: string,\n  tokenDecimals?: number\n): Promise<string> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  const trxReceipt = await tokenContract.balanceOf(account)\n\n  return await unitsToAmount(signer, tokenAddress, trxReceipt, tokenDecimals)\n}\n\n/**\n * Get Allowance in wei for any erc20\n * @param {Signer} signer - The signer object\n * @param {string} tokenAddress - The address of the token\n * @param {string} account - The address of the caller\n * @param {string} spender - The address of the spneder\n */\nexport async function allowanceWei(\n  signer: Signer,\n  tokenAddress: string,\n  account: string,\n  spender: string\n): Promise<string> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  return await tokenContract.allowance(account, spender)\n}\n\n/**\n * Get decimals for any Datatoken\n * @param {Signer} signer - The signer object\n * @param {String} tokenAddress - The address of the token\n * @return {Promise<number>} Number of decimals of the token\n */\nexport async function decimals(signer: Signer, tokenAddress: string): Promise<number> {\n  const tokenContract = new ethers.Contract(tokenAddress, minAbi, signer)\n  return await tokenContract.decimals()\n}\n","import { LoggerInstance } from './Logger'\n\nconst PREDEFINED_ERRORS = {\n  datasets: {\n    invalid: 'Datasets is not a list, as expected'\n  },\n  algorithm: {\n    serviceId: {\n      missing: 'The serviceId key is missing from the algorithm s DDO.',\n      not_found: 'The provided serviceId does not exist.',\n      service_not_access_compute: 'Service type is neither access, nor compute.',\n      main_service_compute:\n        'If the main service is not compute for this asset when calling initialize endpoint.',\n      compute_services_not_in_same_provider:\n        'Files attached to the compute service are not decrypted by the correct provider. This occurs when both asset and algorithm are requested by their compute service which cannot be decrypted by a single provider as how it is supposed to be.'\n    },\n    container: {\n      checksum_prefix: 'Container checksum does not start with the prefix sha256:.',\n      mising_entrypoint_image_checksum:\n        'Either entrypoint, either image, or either checksum are missing from the container dictionary from the algorithm s DDO.'\n    },\n    documentId: {\n      did_not_found:\n        'The algorithm s DID could not be retrieved from the metadata store, because the algorithm asset does not exist.',\n      missing: 'The documentId key is missing from the algorithm s DDO.'\n    },\n    transferTxId: {\n      missing: 'The transferTxId key is missing from the algorithm s DDO.'\n    },\n    missing_meta_documentId: 'Either algorithm metadata, or algorithm DID are missing.',\n    did_not_found: 'Either algorithm metadata, or algorithm DID are missing.',\n    not_algo: 'Either algorithm metadata, or algorithm DID are missing.',\n    in_use_or_not_on_chain: 'Either algorithm metadata, or algorithm DID are missing.',\n    meta_oneof_url_rawcode_remote:\n      'Either algorithm metadata, or algorithm DID are missing.',\n    file_unavailable:\n      'One possibility is that the asset could not be retrieved from Aquariuss database. Otherwise, there are issues related to services'\n  },\n  error: {\n    not_trusted_algo_publisher:\n      \"The owner of the algorithm's DDO is not a trusted algorithms publishers list.\",\n    not_trusted_algo:\n      \"The algorithm's DID is not in the asset's trusted algorithms dictionary. \",\n    no_publisherTrustedAlgorithms:\n      \"The algorithm's key publisherTrustedAlgorithms does not exist in the algorithm's DDO.\",\n    algorithm_file_checksum_mismatch:\n      \"filesChecksum from the algorithm's DDO is invalid.\",\n    algorithm_container_checksum_mismatch:\n      \"The containerChecksum from the algorithm's DDO is invalid.\",\n    no_raw_algo_allowed: 'The asset does not allow raw algorithms to be run on it.',\n    'Asset malformed':\n      'The asset published on chain is malformed, missing some required keys or not compliant with our schemas.',\n    'Asset is not consumable.':\n      'Assets metadata status is not in the range of valid status codes for assets. The recognized states for the metadata are defined on our docs.',\n    'DID is not a valid algorithm.':\n      'Either the algorithm assets DID is incorrectly typed, either the algorithm timeout expired.',\n    'Compute environment does not exist.':\n      'The compute environment provided by the user does not exist, it is not served by our compute-to-data feature. The user can use get_c2d_environments to check the list of available compute environments.',\n    'The validUntil value is not correct.': 'validUntil value is most probably expired.',\n    'Cannot resolve DID': 'The dataset DID does not exist in the Metadata store.',\n    'Invalid serviceId': 'The serviceId of that dataset is not correct.',\n    'Unable to get dataset files':\n      'The files of that dataset could not be decrypted or retrieved',\n    'cannot decrypt files for this service.':\n      'The files of that dataset could not be decrypted due to the fact that file object, which contains the structure and the type of specific file, is missing from the validation part.',\n    'Unsupported type ': 'The file object type is not supported by Provider.',\n    'malformed file object':\n      'The file object structure is invalid and does not contain the wanted information for the specific file.'\n  },\n  order: {\n    fees_not_paid: ' Provider fees are not paid.'\n  },\n  output: {\n    invalid:\n      'The algorithms validation after the build stage has not been decoded properly as a dictionary.'\n  }\n}\n\nexport function getErrorMessage(err: string): string {\n  try {\n    const error = JSON.parse(err)\n    const key = Object.keys(error)[0]\n    if (key === 'error') {\n      const message = error[key]\n      const errorMessage =\n        PREDEFINED_ERRORS[key][message] || `Provider request failed: ${message}`\n      return errorMessage\n    } else {\n      const errorObject = error[key]\n      const messagekey = Object.keys(error)[1]\n      const errorMessage = error[messagekey]\n      return `${errorMessage} : ${errorObject}`\n    }\n  } catch (e) {\n    LoggerInstance.error('[getErrorMessage] error: ', e)\n    return err\n  }\n}\n","import { Signer } from 'ethers'\nimport {\n  ProviderInstance,\n  Datatoken,\n  Dispenser,\n  Config,\n  OrderParams,\n  Asset,\n  FreOrderParams,\n  approve,\n  FixedRateExchange,\n  ConsumeMarketFee,\n  ProviderFees,\n  ZERO_ADDRESS,\n  approveWei\n} from '../index'\nimport Decimal from 'decimal.js'\n\n/**\n * Orders an asset based on the specified pricing schema and configuration.\n * @param {Asset} asset - The asset to be ordered.\n * @param {Signer} consumerAccount - The signer account of the consumer.\n * @param {Config} config - The configuration settings.\n * @param {Datatoken} datatoken - The Datatoken instance.\n * @param {string} [providerUrl] - Optional the consumer address\n * @param {string} [consumerAccount] - Optional the consumer address\n * @param {ConsumeMarketFee} [consumeMarketOrderFee] - Optional consume market fee.\n *  @param {ProviderFees} [providerFees] - Optional provider fees\n * @param {string} [consumeMarketFixedSwapFee='0'] - Fixed swap fee for consuming the market.\n * @param {number} [datatokenIndex=0] - Index of the datatoken within the asset.\n * @param {number} [serviceIndex=0] - Index of the service within the asset.\n * @param {number} [fixedRateIndex=0] - Index of the fixed rate within the pricing schema.\n * @returns {Promise<void>} - A promise that resolves when the asset order process is completed.\n * @throws {Error} If the pricing schema is not supported or if required indexes are invalid.\n */\nexport async function orderAsset(\n  asset: Asset,\n  consumerAccount: Signer,\n  config: Config,\n  datatoken: Datatoken,\n  providerUrl?: string,\n  consumerAddress?: string,\n  consumeMarketOrderFee?: ConsumeMarketFee,\n  providerFees?: ProviderFees,\n  consumeMarketFixedSwapFee: string = '0',\n  datatokenIndex: number = 0,\n  serviceIndex: number = 0,\n  fixedRateIndex: number = 0\n) {\n  if (!consumeMarketOrderFee)\n    consumeMarketOrderFee = {\n      consumeMarketFeeAddress: '0x0000000000000000000000000000000000000000',\n      consumeMarketFeeAmount: '0',\n      consumeMarketFeeToken:\n        asset.stats.price.tokenAddress || '0x0000000000000000000000000000000000000000'\n    }\n\n  if (!asset.datatokens[datatokenIndex].address)\n    throw new Error(\n      `The datatoken with index: ${datatokenIndex} does not exist for the asset with did: ${asset.id}`\n    )\n\n  if (!asset.services[serviceIndex].id)\n    throw new Error(\n      `There is no service with index: ${serviceIndex} defined for the asset with did: ${asset.id}`\n    )\n\n  const templateIndex = await datatoken.getId(asset.datatokens[datatokenIndex].address)\n  const fixedRates = await datatoken.getFixedRates(\n    asset.datatokens[datatokenIndex].address\n  )\n  const dispensers = await datatoken.getDispensers(\n    asset.datatokens[datatokenIndex].address\n  )\n  const publishMarketFees = await datatoken.getPublishingMarketFee(\n    asset.datatokens[datatokenIndex].address\n  )\n  const pricingType =\n    fixedRates.length > 0 ? 'fixed' : dispensers.length > 0 ? 'free' : 'NOT_ALLOWED'\n\n  const fees =\n    providerFees ||\n    (\n      await ProviderInstance.initialize(\n        asset.id,\n        asset.services[serviceIndex].id,\n        0,\n        await consumerAccount.getAddress(),\n        providerUrl || config.providerUri\n      )\n    ).providerFee\n\n  if (\n    fees &&\n    fees.providerFeeAddress !== ZERO_ADDRESS &&\n    fees.providerFeeAmount &&\n    parseInt(fees.providerFeeAmount) > 0\n  ) {\n    try {\n      await approveWei(\n        consumerAccount,\n        config,\n        await consumerAccount.getAddress(),\n        fees.providerFeeToken,\n        asset.services[0].datatokenAddress,\n        fees.providerFeeAmount\n      )\n    } catch (error) {\n      throw new Error(`Failed to approve provider fee token ${fees.providerFeeToken}`)\n    }\n  }\n\n  const orderParams = {\n    consumer: consumerAddress || (await consumerAccount.getAddress()),\n    serviceIndex,\n    _providerFee: fees,\n    _consumeMarketFee: consumeMarketOrderFee\n  } as OrderParams\n  switch (pricingType) {\n    case 'free': {\n      if (templateIndex === 1) {\n        const dispenser = new Dispenser(config.dispenserAddress, consumerAccount)\n        const dispenserTx = await dispenser.dispense(\n          asset.datatokens[datatokenIndex].address,\n          '1',\n          await consumerAccount.getAddress()\n        )\n        if (!dispenserTx) {\n          throw new Error(`Failed to dispense !`)\n        }\n        await dispenserTx.wait()\n        return await datatoken.startOrder(\n          asset.datatokens[datatokenIndex].address,\n          orderParams.consumer,\n          orderParams.serviceIndex,\n          orderParams._providerFee,\n          orderParams._consumeMarketFee\n        )\n      }\n      if (templateIndex === 2) {\n        return await datatoken.buyFromDispenserAndOrder(\n          asset.services[serviceIndex].datatokenAddress,\n          orderParams,\n          config.dispenserAddress\n        )\n      }\n      break\n    }\n    case 'fixed': {\n      const fre = new FixedRateExchange(config.fixedRateExchangeAddress, consumerAccount)\n\n      if (!fixedRates[fixedRateIndex].id)\n        throw new Error(\n          `There is no fixed rate exchange with index: ${serviceIndex} for the asset with did: ${asset.id}`\n        )\n      const fees = await fre.getFeesInfo(fixedRates[fixedRateIndex].id)\n      const exchange = await fre.getExchange(fixedRates[fixedRateIndex].id)\n\n      const { baseTokenAmount } = await fre.calcBaseInGivenDatatokensOut(\n        fees.exchangeId,\n        '1',\n        consumeMarketOrderFee.consumeMarketFeeAmount\n      )\n\n      const price = new Decimal(+baseTokenAmount || 0)\n        .add(new Decimal(consumeMarketOrderFee.consumeMarketFeeAmount || 0))\n        .add(new Decimal(+publishMarketFees.publishMarketFeeAmount || 0))\n        .toString()\n\n      const freParams = {\n        exchangeContract: config.fixedRateExchangeAddress,\n        exchangeId: fees.exchangeId,\n        maxBaseTokenAmount: price,\n        baseTokenAddress: exchange.baseToken,\n        baseTokenDecimals: parseInt(exchange.btDecimals) || 18,\n        swapMarketFee: consumeMarketFixedSwapFee,\n        marketFeeAddress: publishMarketFees.publishMarketFeeAddress\n      } as FreOrderParams\n\n      if (templateIndex === 1) {\n        const tx: any = await approve(\n          consumerAccount,\n          config,\n          await consumerAccount.getAddress(),\n          exchange.baseToken,\n          config.fixedRateExchangeAddress,\n          price,\n          false\n        )\n        const txApprove = typeof tx !== 'number' ? await tx.wait() : tx\n        if (!txApprove) {\n          throw new Error(`Failed to appove ${exchange.baseToken} !`)\n        }\n        const freTx = await fre.buyDatatokens(\n          exchange.exchangeId,\n          '1',\n          price,\n          publishMarketFees.publishMarketFeeAddress,\n          consumeMarketFixedSwapFee\n        )\n        const buyDtTx = await freTx.wait()\n        if (!buyDtTx) {\n          throw new Error(`Failed to buy datatoken from fixed rate!`)\n        }\n        return await datatoken.startOrder(\n          asset.datatokens[datatokenIndex].address,\n          orderParams.consumer,\n          orderParams.serviceIndex,\n          orderParams._providerFee,\n          orderParams._consumeMarketFee\n        )\n      }\n      if (templateIndex === 2) {\n        const tx: any = await approve(\n          consumerAccount,\n          config,\n          await consumerAccount.getAddress(),\n          exchange.baseToken,\n          asset.datatokens[datatokenIndex].address,\n          price,\n          false\n        )\n\n        const txApprove = typeof tx !== 'number' ? await tx.wait() : tx\n        if (!txApprove) {\n          return\n        }\n        const txBuy = await datatoken.buyFromFreAndOrder(\n          asset.datatokens[datatokenIndex].address,\n          orderParams,\n          freParams\n        )\n        return txBuy\n      }\n      break\n    }\n    default:\n      throw new Error('Pricing schema not supported !')\n  }\n}\n","// eslint-disable-next-line import/no-named-default\nimport { default as DefaultContractsAddresses } from '@oceanprotocol/contracts/addresses/address.json'\nimport fs from 'fs'\nimport { Config } from '.'\nimport { LoggerInstance } from '../utils'\n\nconst configHelperNetworksBase: Config = {\n  chainId: null,\n  network: 'unknown',\n  metadataCacheUri: 'https://v4.aquarius.oceanprotocol.com',\n  nodeUri: 'http://127.0.0.1:8545',\n  providerUri: 'https://v4.provider.oceanprotocol.com',\n  subgraphUri: null,\n  explorerUri: null,\n  oceanTokenAddress: null,\n  oceanTokenSymbol: 'OCEAN',\n  fixedRateExchangeAddress: null,\n  dispenserAddress: null,\n  startBlock: 0,\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 1,\n  transactionPollingTimeout: 750,\n  gasFeeMultiplier: 1\n}\n\nexport const configHelperNetworks: Config[] = [\n  {\n    ...configHelperNetworksBase\n  },\n  {\n    // barge\n    ...configHelperNetworksBase,\n    chainId: 8996,\n    network: 'development',\n    // comment th following configs if running on macOS\n    metadataCacheUri: 'http://172.15.0.5:5000',\n    providerUri: 'http://172.15.0.4:8030',\n    subgraphUri: 'https://172.15.0.15:8000'\n    // uncomment the following configs if running on macOS\n    // metadataCacheUri: 'http://127.0.0.1:5000',\n    // providerUri: 'http://127.0.0.1:8030/',\n    // subgraphUri: 'http://127.0.0.1:9000/'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 5,\n    network: 'goerli',\n    nodeUri: 'https://goerli.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.goerli.oceanprotocol.com',\n    explorerUri: 'https://goerli.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 11155111,\n    network: 'sepolia',\n    nodeUri: 'https://sepolia.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.sepolia.oceanprotocol.com',\n    explorerUri: 'https://sepolia.etherscan.io',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1,\n    network: 'mainnet',\n    nodeUri: 'https://mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mainnet.oceanprotocol.com',\n    explorerUri: 'https://etherscan.io',\n    startBlock: 11105459,\n    transactionBlockTimeout: 150,\n    transactionConfirmationBlocks: 5,\n    transactionPollingTimeout: 1750,\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 137,\n    network: 'polygon',\n    nodeUri: 'https://polygon-mainnet.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.polygon.oceanprotocol.com',\n    explorerUri: 'https://polygonscan.com',\n    oceanTokenSymbol: 'mOCEAN',\n    gasFeeMultiplier: 1.6\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 2021000,\n    network: 'gaiaxtestnet',\n    nodeUri: 'https://rpc.gaiaxtestnet.oceanprotocol.com',\n    providerUri: 'https://v4.provider.gaiaxtestnet.oceanprotocol.com',\n    subgraphUri: 'https://v4.subgraph.gaiaxtestnet.oceanprotocol.com',\n    explorerUri: 'https://blockscout.gaiaxtestnet.oceanprotocol.com'\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 80001,\n    network: 'mumbai',\n    nodeUri: 'https://polygon-mumbai.infura.io/v3',\n    subgraphUri: 'https://v4.subgraph.mumbai.oceanprotocol.com',\n    explorerUri: 'https://mumbai.polygonscan.com',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 56,\n    network: 'bsc',\n    nodeUri: 'https://bsc-dataseed.binance.org',\n    subgraphUri: 'https://v4.subgraph.bsc.oceanprotocol.com',\n    explorerUri: 'https://bscscan.com/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 246,\n    network: 'energyweb',\n    nodeUri: 'https://rpc.energyweb.org',\n    subgraphUri: 'https://v4.subgraph.energyweb.oceanprotocol.com',\n    explorerUri: 'https://explorer.energyweb.org',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 1285,\n    network: 'moonriver',\n    nodeUri: 'https://moonriver.api.onfinality.io/public',\n    subgraphUri: 'https://v4.subgraph.moonriver.oceanprotocol.com',\n    explorerUri: 'https://moonriver.moonscan.io/',\n    gasFeeMultiplier: 1.05\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 100,\n    network: 'gen-x-testnet',\n    nodeUri: 'https://rpc.genx.minimal-gaia-x.eu',\n    metadataCacheUri: 'https://aquarius.v4.delta-dao.com',\n    providerUri: 'https://provider.v4.genx.delta-dao.com',\n    subgraphUri: 'https://subgraph.v4.genx.minimal-gaia-x.eu',\n    explorerUri: 'https://explorer.genx.minimal-gaia-x.eu/',\n    gasFeeMultiplier: 1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 10,\n    network: 'optimism',\n    nodeUri: 'https://mainnet.optimism.io',\n    subgraphUri: 'https://v4.subgraph.optimism.oceanprotocol.com',\n    explorerUri: 'https://optimistic.etherscan.io/',\n    gasFeeMultiplier: 1.1\n  },\n  {\n    ...configHelperNetworksBase,\n    chainId: 11155420,\n    network: 'optimism_sepolia',\n    nodeUri: 'https://sepolia.optimism.io',\n    subgraphUri: 'https://v4.subgraph.optimism-sepolia.oceanprotocol.com',\n    explorerUri: 'https://sepolia-optimism.etherscan.io/',\n    gasFeeMultiplier: 1.1\n  }\n]\n\nexport class ConfigHelper {\n  /* Load contract addresses from env ADDRESS_FILE (generated by ocean-contracts) */\n  public getAddressesFromEnv(network: string, customAddresses?: any): Partial<Config> {\n    // use the defaults first\n    let configAddresses: Partial<Config>\n    // load from custom addresses structure\n    if (customAddresses && customAddresses[network]) {\n      const {\n        FixedPrice,\n        Dispenser,\n        ERC721Factory,\n        OPFCommunityFeeCollector,\n        Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate\n      } = customAddresses[network]\n      configAddresses = {\n        nftFactoryAddress: ERC721Factory,\n        opfCommunityFeeCollector: OPFCommunityFeeCollector,\n        fixedRateExchangeAddress: FixedPrice,\n        dispenserAddress: Dispenser,\n        oceanTokenAddress: Ocean,\n        chainId,\n        startBlock,\n        veAllocate,\n        veOCEAN,\n        veDelegation,\n        veFeeDistributor,\n        veDelegationProxy,\n        DFRewards,\n        DFStrategyV1,\n        veFeeEstimate,\n        ...(process.env.AQUARIUS_URL && { metadataCacheUri: process.env.AQUARIUS_URL }),\n        ...(process.env.PROVIDER_URL && { providerUri: process.env.PROVIDER_URL })\n      }\n    } else {\n      // no custom addresses structure was passed, trying to load default\n      if (DefaultContractsAddresses[network]) {\n        const {\n          FixedPrice,\n          Dispenser,\n          OPFCommunityFeeCollector,\n          ERC721Factory,\n          Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate\n        } = DefaultContractsAddresses[network]\n        configAddresses = {\n          nftFactoryAddress: ERC721Factory,\n          opfCommunityFeeCollector: OPFCommunityFeeCollector,\n          fixedRateExchangeAddress: FixedPrice,\n          dispenserAddress: Dispenser,\n          oceanTokenAddress: Ocean,\n          chainId,\n          startBlock,\n          veAllocate,\n          veOCEAN,\n          veDelegation,\n          veFeeDistributor,\n          veDelegationProxy,\n          DFRewards,\n          DFStrategyV1,\n          veFeeEstimate,\n          ...(process.env.AQUARIUS_URL && { metadataCacheUri: process.env.AQUARIUS_URL }),\n          ...(process.env.PROVIDER_URL && { providerUri: process.env.PROVIDER_URL })\n        }\n      }\n    }\n    return configAddresses\n  }\n\n  /**\n   * Returns the config object for a specific network supported by the oceanprotocol stack\n   * @param {string | number} network the network's chainId or name\n   * @param {string} infuraProjectId optional infura project id that will replace the configs node URI\n   * @return {Config} Config obhjedct\n   */\n  public getConfig(network: string | number, infuraProjectId?: string): Config {\n    const filterBy = typeof network === 'string' ? 'network' : 'chainId'\n    let config = configHelperNetworks.find((c) => c[filterBy] === network)\n\n    if (!config) {\n      LoggerInstance.error(`No config found for given network '${network}'`)\n      return null\n    }\n\n    let addresses\n    try {\n      addresses = process.env.ADDRESS_FILE\n        ? JSON.parse(\n            // eslint-disable-next-line security/detect-non-literal-fs-filename\n            fs.readFileSync(process.env.ADDRESS_FILE, 'utf8')\n          )\n        : null\n    } catch (e) {\n      console.log(e)\n      addresses = null\n    }\n    const contractAddressesConfig = this.getAddressesFromEnv(config.network, addresses)\n    config = { ...config, ...contractAddressesConfig }\n\n    const nodeUri = infuraProjectId\n      ? `${config.nodeUri}/${infuraProjectId}`\n      : config.nodeUri\n\n    return { ...config, nodeUri }\n  }\n}\n","import { ethers, Signer, Contract } from 'ethers'\nimport { AbiItem } from '../@types'\nimport { Config, ConfigHelper } from '../config'\nimport {\n  amountToUnits,\n  getFairGasPrice,\n  setContractDefaults,\n  unitsToAmount\n} from '../utils'\n\nexport abstract class SmartContract {\n  public signer: Signer\n  public config: Config\n  public abi: AbiItem[]\n\n  abstract getDefaultAbi()\n\n  /**\n   * Instantiate the smart contract.\n   * @param {Signer} signer The signer object.\n   * @param {string | number} [network] Network id or name\n   * @param {Config} [config] The configuration object.\n   * @param {AbiItem[]} [abi] ABI array of the smart contract\n   */\n  constructor(\n    signer: Signer,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem[]\n  ) {\n    this.signer = signer\n    this.config = config || new ConfigHelper().getConfig(network || 'unknown')\n    this.abi = abi || this.getDefaultAbi()\n  }\n\n  /**\n   * Converts an amount of tokens to units\n   * @param {string} token - The token to convert\n   * @param {string} amount - The amount of tokens to convert\n   * @param {number} [tokenDecimals] - The number of decimals of the token\n   * @returns {Promise<string>} - The converted amount in units\n   */\n  protected async amountToUnits(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return amountToUnits(this.signer, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Converts an amount of units to tokens\n   * @param {string} token - The token to convert\n   * @param {string} amount - The amount of units to convert\n   * @param {number} [tokenDecimals] - The number of decimals in the token\n   * @returns {Promise<string>} - The converted amount in tokens\n   */\n  protected async unitsToAmount(\n    token: string,\n    amount: string,\n    tokenDecimals?: number\n  ): Promise<string> {\n    return unitsToAmount(this.signer, token, amount, tokenDecimals)\n  }\n\n  /**\n   * Retruns the gas price\n   * @returns {Promise<string>} - The fair gas price\n   */\n  protected async getFairGasPrice(): Promise<string> {\n    return getFairGasPrice(this.signer, this.config?.gasFeeMultiplier)\n  }\n\n  /**\n   * Returns a contract instance for the given address\n   * @param {string} address - The address of the contract\n   * @param {AbiItem[]} [abi] - The ABI of the contract\n   * @returns {Contract} - The contract instance\n   */\n  protected getContract(address: string, abi?: AbiItem[]): Contract {\n    const abiToUse = abi || this.abi\n    const contract = new ethers.Contract(\n      address,\n      new ethers.utils.Interface(JSON.stringify(abiToUse)),\n      this.signer\n    )\n    return setContractDefaults(contract, this.config)\n  }\n}\n","import { Signer, Contract } from 'ethers'\nimport { AbiItem } from '../@types'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\nexport abstract class SmartContractWithAddress extends SmartContract {\n  public address: string\n  public contract: Contract\n\n  /**\n   * Instantiate the smart contract.\n   * @param {string} address The address of the contract.\n   * @param {Signer} signer The signer object.\n   * @param {string | number} network Network id or name\n   * @param {Config} config The configuration object.\n   * @param {AbiItem[]} abi ABI array of the smart contract\n   */\n  constructor(\n    address: string,\n    signer: Signer,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem[]\n  ) {\n    super(signer, network, config, abi)\n    this.address = address\n    this.contract = this.getContract(this.address)\n  }\n}\n","import Decimal from 'decimal.js'\nimport DispenserAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json'\nimport { sendTx } from '../utils'\nimport { Datatoken } from './Datatoken'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\nimport { DispenserToken, ReceiptOrEstimate, AbiItem } from '../@types'\n\nexport class Dispenser extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return DispenserAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Get information about a datatoken dispenser\n   * @param {String} dtAddress\n   * @return {Promise<DispenserToken>}\n   */\n  public async status(dtAdress: string): Promise<DispenserToken> {\n    const status2: DispenserToken = await this.contract.status(dtAdress)\n    if (!status2) {\n      throw new Error(`Np dispenser found for the given datatoken address`)\n    }\n    const status = {\n      active: status2[0],\n      owner: status2[1],\n      isMinter: status2[2],\n      maxTokens: await this.unitsToAmount(null, status2[3], 18),\n      maxBalance: await this.unitsToAmount(null, status2[4], 18),\n      balance: await this.unitsToAmount(null, status2[5], 18),\n      allowedSwapper: status2[6]\n    }\n    return status\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Owner address\n   * @param {String} maxTokens max tokens to dispense\n   * @param {String} maxBalance max balance of requester\n   * @param {String} allowedSwapper  only account that can ask tokens. set address(0) if not required\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async create<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    maxTokens: string,\n    maxBalance: string,\n    allowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.create(\n      dtAddress,\n      this.amountToUnits(null, maxTokens, 18),\n      this.amountToUnits(null, maxBalance, 18),\n      address,\n      allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Call createFixedRate contract method\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.create,\n      dtAddress,\n      this.amountToUnits(null, maxTokens, 18),\n      this.amountToUnits(null, maxBalance, 18),\n      address,\n      allowedSwapper\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activates a dispener.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Number} maxTokens max amount of tokens to dispense\n   * @param {Number} maxBalance max balance of user. If user balance is >, then dispense will be rejected\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async activate<G extends boolean = false>(\n    dtAddress: string,\n    maxTokens: string,\n    maxBalance: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.activate(\n      dtAddress,\n      this.amountToUnits(null, maxTokens, 18),\n      this.amountToUnits(null, maxBalance, 18)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.activate,\n      dtAddress,\n      this.amountToUnits(null, maxTokens, 18),\n      this.amountToUnits(null, maxBalance, 18)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an existing dispenser.\n   * @param {String} dtAddress refers to datatoken address.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} TransactionReceipt\n   */\n  public async deactivate<G extends boolean = false>(\n    dtAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.deactivate(dtAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.deactivate,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowed swapper.\n   * @param {String} dtAddress Datatoken address.\n   * @param {String} newAllowedSwapper The address of the new allowed swapper.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    dtAddress: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.setAllowedSwapper(\n      dtAddress,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.setAllowedSwapper,\n      dtAddress,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Dispense datatokens to caller.\n   * The dispenser must be active, hold enough datatokens (or be able to mint more)\n   * and respect maxTokens/maxBalance requirements\n   * @param {String} dtAddress Datatoken address.\n   * @param {String} amount Amount of datatokens required.\n   * @param {String} destination address of tokens receiver\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async dispense<G extends boolean = false>(\n    dtAddress: string,\n    amount: string = '1',\n    destination: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.dispense(\n      dtAddress,\n      this.amountToUnits(null, amount, 18),\n      destination\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.dispense,\n      dtAddress,\n      this.amountToUnits(null, amount, 18),\n      destination\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens from the dispenser\n   * @param {String} dtAddress Datatoken address.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async ownerWithdraw<G extends boolean = false>(\n    dtAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.ownerWithdraw(dtAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.ownerWithdraw,\n      dtAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Check if tokens can be dispensed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address that will receive datatokens\n   * @param {String} amount amount of datatokens required.\n   * @return {Promise<Boolean>}\n   */\n  public async isDispensable(\n    dtAddress: string,\n    datatoken: Datatoken,\n    address: string,\n    amount: string = '1'\n  ): Promise<Boolean> {\n    const status = await this.status(dtAddress)\n    if (!status) return false\n    // check active\n    if (status.active === false) return false\n    // check maxBalance\n    const userBalance = new Decimal(await datatoken.balance(dtAddress, address))\n    if (userBalance.greaterThanOrEqualTo(status.maxBalance)) return false\n    // check maxAmount\n    if (new Decimal(String(amount)).greaterThan(status.maxTokens)) return false\n    // check dispenser balance\n    const contractBalance = new Decimal(status.balance)\n    if (contractBalance.greaterThanOrEqualTo(amount) || status.isMinter === true)\n      return true\n    return false\n  }\n}\n","import FixedRateExchangeAbi from '@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json'\nimport { sendTx, ZERO_ADDRESS } from '../utils'\nimport {\n  PriceAndFees,\n  FeesInfo,\n  FixedPriceExchange,\n  ReceiptOrEstimate,\n  AbiItem\n} from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\nexport class FixedRateExchange extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return FixedRateExchangeAbi.abi as AbiItem[]\n  }\n\n  /**\n   * Creates unique exchange identifier.\n   * @param {String} baseToken baseToken contract address\n   * @param {String} datatoken Datatoken contract address\n   * @return {Promise<string>} exchangeId\n   */\n  public async generateExchangeId(baseToken: string, datatoken: string): Promise<string> {\n    const exchangeId = await this.contract.generateExchangeId(baseToken, datatoken)\n    return exchangeId\n  }\n\n  /**\n   * Atomic swap\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} maxBaseTokenAmount max amount of baseToken we want to pay for datatokenAmount\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async buyDatatokens<G extends boolean = false>(\n    exchangeId: string,\n    datatokenAmount: string,\n    maxBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = await this.amountToUnits(null, consumeMarketFee, 18)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const maxBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      maxBaseTokenAmount,\n      +exchange.btDecimals\n    )\n\n    const estGas = await this.contract.estimateGas.buyDT(\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.buyDT,\n      exchangeId,\n      dtAmountFormatted,\n      maxBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sell datatokenAmount while expecting at least minBaseTokenAmount\n   * @param {String} exchangeId ExchangeId\n   * @param {String} datatokenAmount Amount of datatokens\n   * @param {String} minBaseTokenAmount min amount of baseToken we want to receive back\n   * @param {String} consumeMarketAddress consumeMarketAddress\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async sellDatatokens<G extends boolean = false>(\n    exchangeId: string,\n    datatokenAmount: string,\n    minBaseTokenAmount: string,\n    consumeMarketAddress: string = ZERO_ADDRESS,\n    consumeMarketFee: string = '0',\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    const consumeMarketFeeFormatted = await this.amountToUnits(null, consumeMarketFee, 18)\n    const dtAmountFormatted = await this.amountToUnits(\n      exchange.datatoken,\n      datatokenAmount,\n      +exchange.dtDecimals\n    )\n    const minBtFormatted = await this.amountToUnits(\n      exchange.baseToken,\n      minBaseTokenAmount,\n      +exchange.btDecimals\n    )\n    const estGas = await this.contract.estimateGas.sellDT(\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.sellDT,\n      exchangeId,\n      dtAmountFormatted,\n      minBtFormatted,\n      consumeMarketAddress,\n      consumeMarketFeeFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets total number of exchanges\n   * @return {Promise<Number>} no of available exchanges\n   */\n  public async getNumberOfExchanges(): Promise<number> {\n    const numExchanges = await this.contract.getNumberOfExchanges()\n    return numExchanges\n  }\n\n  /**\n   * Set new rate\n   * @param {String} exchangeId Exchange ID\n   * @param {String} newRate New rate\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setRate<G extends boolean = false>(\n    exchangeId: string,\n    newRate: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.setRate(\n      exchangeId,\n      await this.amountToUnits(null, newRate, 18)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.setRate,\n      exchangeId,\n      await this.amountToUnits(null, newRate, 18)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Sets a new allowedSwapper\n   * @param {String} exchangeId Exchange ID\n   * @param {String} newAllowedSwapper  The address of the new allowed swapper (set address zero if we want to remove allowed swapper)\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setAllowedSwapper<G extends boolean = false>(\n    exchangeId: string,\n    newAllowedSwapper: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.setAllowedSwapper(\n      exchangeId,\n      newAllowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.setAllowedSwapper,\n      exchangeId,\n      newAllowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Activate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activate<G extends boolean = false>(\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === true) return null\n    const estGas = await this.contract.estimateGas.toggleExchangeState(exchangeId)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate an exchange\n   * @param {String} exchangeId ExchangeId\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivate<G extends boolean = false>(\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.active === false) return null\n\n    const estGas = await this.contract.estimateGas.toggleExchangeState(exchangeId)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.toggleExchangeState,\n      exchangeId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get Exchange Rate\n   * @param {String} exchangeId Exchange ID\n   * @return {Promise<string>} Rate (converted from wei)\n   */\n  public async getRate(exchangeId: string): Promise<string> {\n    const weiRate = await this.contract.getRate(exchangeId)\n    return await this.unitsToAmount(null, weiRate, 18)\n  }\n\n  /**\n   * Get Datatoken Supply in the exchange\n   * @param {String} exchangeId Exchange Id\n   * @return {Promise<string>}  dt supply formatted\n   */\n  public async getDatatokenSupply(exchangeId: string): Promise<string> {\n    const dtSupply = await this.contract.getDTSupply(exchangeId)\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.datatoken, dtSupply, +exchange.dtDecimals)\n  }\n\n  /**\n   * Returns basetoken supply in the exchange\n   * @param {String} exchangeId Exchange Id\n   * @return {Promise<string>} dt supply formatted\n   */\n  public async getBasetokenSupply(exchangeId: string): Promise<string> {\n    const btSupply = await this.contract.getBTSupply(exchangeId)\n    const exchange = await this.getExchange(exchangeId)\n    return await this.unitsToAmount(exchange.baseToken, btSupply, +exchange.btDecimals)\n  }\n\n  /**\n   * Get Allower Swapper (if set this is the only account which can use this exchange, else is set at address(0))\n   * @param {String} exchangeId Exchange Id\n   * @return {Promise<string>} address of allowed swapper\n   */\n  public async getAllowedSwapper(exchangeId: string): Promise<string> {\n    return await this.contract.getAllowedSwapper(exchangeId)\n  }\n\n  /**\n   * calcBaseInGivenDatatokensOut - Calculates how many base tokens are needed to get specified amount of datatokens\n   * @param {String} exchangeId Exchange Id\n   * @param {string} datatokenAmount Amount of datatokens user wants to buy\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<PriceAndFees>} how many base tokens are needed and fees\n   */\n  public async calcBaseInGivenDatatokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<PriceAndFees> {\n    const fixedRateExchange = await this.getExchange(exchangeId)\n    const outDT = await this.contract.calcBaseInGivenOutDT(\n      exchangeId,\n      await this.amountToUnits(\n        fixedRateExchange.datatoken,\n        datatokenAmount,\n        +fixedRateExchange.dtDecimals\n      ),\n      await this.amountToUnits(null, consumeMarketFee, 18)\n    )\n    const priceAndFees = {\n      baseTokenAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.baseTokenAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      marketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.publishMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      oceanFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.oceanFeeAmount,\n        +fixedRateExchange.btDecimals\n      ),\n      consumeMarketFeeAmount: await this.unitsToAmount(\n        fixedRateExchange.baseToken,\n        outDT.consumeMarketFeeAmount,\n        +fixedRateExchange.btDecimals\n      )\n    } as PriceAndFees\n    return priceAndFees\n  }\n\n  /**\n   * Returns amount in baseToken that user will receive for datatokenAmount sold\n   * @param {String} exchangeId Exchange Id\n   * @param {Number} datatokenAmount Amount of datatokens\n   * @param {String} consumeMarketFee consumeMarketFee in fraction\n   * @return {Promise<string>} Amount of baseTokens user will receive\n   */\n  public async getAmountBasetokensOut(\n    exchangeId: string,\n    datatokenAmount: string,\n    consumeMarketFee: string = '0'\n  ): Promise<string> {\n    const exchange = await this.getExchange(exchangeId)\n    const amount = await this.contract.calcBaseOutGivenInDT(\n      exchangeId,\n      await this.amountToUnits(exchange.datatoken, datatokenAmount, +exchange.dtDecimals),\n      await this.amountToUnits(null, consumeMarketFee, 18)\n    )\n\n    return await this.unitsToAmount(exchange.baseToken, amount[0], +exchange.btDecimals)\n  }\n\n  /**\n   * Get exchange details\n   * @param {String} exchangeId Exchange Id\n   * @return {Promise<FixedPricedExchange>} Exchange details\n   */\n  public async getExchange(exchangeId: string): Promise<FixedPriceExchange> {\n    const result: FixedPriceExchange = await this.contract.getExchange(exchangeId)\n    const exchange: FixedPriceExchange = {\n      active: result.active,\n      datatoken: result.datatoken,\n      baseToken: result.baseToken,\n      withMint: result.withMint,\n      exchangeOwner: result.exchangeOwner,\n      allowedSwapper: result.allowedSwapper,\n      dtDecimals: result.dtDecimals.toString(),\n      btDecimals: result.btDecimals.toString(),\n      dtBalance: await this.unitsToAmount(\n        result.datatoken,\n        result.dtBalance,\n        +result.dtDecimals\n      ),\n      btBalance: await this.unitsToAmount(\n        result.baseToken,\n        result.btBalance,\n        +result.btDecimals\n      ),\n      dtSupply: await this.unitsToAmount(\n        result.datatoken,\n        result.dtSupply,\n        +result.dtDecimals\n      ),\n      btSupply: await this.unitsToAmount(\n        result.baseToken,\n        result.btSupply,\n        +result.btDecimals\n      ),\n      fixedRate: await this.unitsToAmount(null, result.fixedRate, 18),\n      exchangeId\n    }\n    return exchange\n  }\n\n  /**\n   * Get fee details for an exchange\n   * @param {String} exchangeId Exchange Id\n   * @return {Promise<FeesInfo>} Exchange details\n   */\n  public async getFeesInfo(exchangeId: string): Promise<FeesInfo> {\n    const result: FeesInfo = await this.contract.getFeesInfo(exchangeId)\n    const exchange = await this.getExchange(exchangeId)\n    const feesInfo: FeesInfo = {\n      opcFee: await this.unitsToAmount(null, result.opcFee.toString(), 18),\n      marketFee: await this.unitsToAmount(null, result.marketFee.toString(), 18),\n      marketFeeCollector: result.marketFeeCollector,\n      marketFeeAvailable: await this.unitsToAmount(\n        exchange.baseToken,\n        result.marketFeeAvailable,\n        +exchange.btDecimals\n      ),\n      oceanFeeAvailable: await this.unitsToAmount(\n        exchange.baseToken,\n        result.oceanFeeAvailable,\n        +exchange.btDecimals\n      ),\n\n      exchangeId\n    }\n    return feesInfo\n  }\n\n  /**\n   * Returns all exchanges\n   * @param {String} exchangeId Exchang eId\n   * @return {Promise<String[]>} Exchanges list\n   */\n  public async getExchanges(): Promise<string[]> {\n    return await this.contract.getExchanges()\n  }\n\n  /**\n   * Check if an exchange is active\n   * @param {String} exchangeId ExchangeId\n   * @return {Promise<Boolean>}\n   */\n  public async isActive(exchangeId: string): Promise<boolean> {\n    const active = await this.contract.isActive(exchangeId)\n    return active\n  }\n\n  /**\n   * Activate minting option for fixed rate contract\n   * @param {String} exchangeId Exchang eId\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async activateMint<G extends boolean = false>(\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === true) return null\n\n    const estGas = await this.contract.estimateGas.toggleMintState(exchangeId, true)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.toggleMintState,\n      exchangeId,\n      true\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deactivate minting for fixed rate\n   * @param {String} exchangeId ExchangeId\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async deactivateMint<G extends boolean = false>(\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n    if (exchange.withMint === false) return null\n\n    const estGas = await this.contract.estimateGas.toggleMintState(exchangeId, false)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.toggleMintState,\n      exchangeId,\n      false\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect BaseTokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} exchangeId Exchange Id\n   * @param {String} amount amount to be collected\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectBasetokens<G extends boolean = false>(\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.getExchange(exchangeId)\n    const amountWei = await this.amountToUnits(\n      fixedrate.baseToken,\n      amount,\n      +fixedrate.btDecimals\n    )\n\n    const estGas = await this.contract.estimateGas.collectBT(exchangeId, amountWei)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.collectBT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect datatokens in the contract (anyone can call this, funds are sent to Datatoken.paymentCollector)\n   * @param {String} exchangeId Exchange Id\n   * @param {String} amount amount to be collected\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectDatatokens<G extends boolean = false>(\n    exchangeId: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const fixedrate: FixedPriceExchange = await this.contract.getExchange(exchangeId)\n    const amountWei = await this.amountToUnits(\n      fixedrate.datatoken,\n      amount,\n      +fixedrate.dtDecimals\n    )\n\n    const estGas = await this.contract.estimateGas.collectDT(exchangeId, amountWei)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.collectDT,\n      exchangeId,\n      amountWei\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect market fee and send it to marketFeeCollector (anyone can call it)\n   * @param {String} exchangeId Exchange Id\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectMarketFee<G extends boolean = false>(\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.contract.estimateGas.collectMarketFee(exchangeId)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.collectMarketFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Collect ocean fee and send it to OPF collector (anyone can call it)\n   * @param {String} exchangeId Exchange Id\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async collectOceanFee<G extends boolean = false>(\n    exchangeId: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const exchange = await this.getExchange(exchangeId)\n    if (!exchange) return null\n\n    const estGas = await this.contract.estimateGas.collectOceanFee(exchangeId)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.collectOceanFee,\n      exchangeId\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get OPF Collector of fixed rate contract\n   * @return {String}\n   */\n  async getOPCCollector(): Promise<string> {\n    const address = await this.contract.opcCollector()\n    return address\n  }\n\n  /**\n   * Get Router address set in fixed rate contract\n   * @return {String}\n   */\n  public async getRouter(): Promise<string> {\n    const address = await this.contract.router()\n    return address\n  }\n\n  /**\n   * Get Exchange Owner given an exchangeId\n   * @param {String} exchangeId Exchange Id\n   * @return {String} return exchange owner\n   */\n  async getExchangeOwner(exchangeId: string): Promise<string> {\n    const address = await (await this.getExchange(exchangeId)).exchangeOwner\n    return address\n  }\n\n  /**\n   * Set new market fee, only market fee collector can update it\n   * @param {String} exchangeId Exchange Id\n   * @param {String} newMarketFee New market fee\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFee<G extends boolean = false>(\n    exchangeId: string,\n    newMarketFee: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.updateMarketFee(\n      exchangeId,\n      await this.amountToUnits(null, newMarketFee, 18)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.updateMarketFee,\n      exchangeId,\n      await this.amountToUnits(null, newMarketFee, 18)\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Set new market fee collector, only market fee collector can update it\n   * @param {String} exchangeId Exchange Id\n   * @param {String} newMarketFeeCollector New market fee collector\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async updateMarketFeeCollector<G extends boolean = false>(\n    exchangeId: string,\n    newMarketFeeCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.updateMarketFeeCollector(\n      exchangeId,\n      newMarketFeeCollector\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.updateMarketFeeCollector,\n      exchangeId,\n      newMarketFeeCollector\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import FactoryRouter from '@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json'\nimport { sendTx } from '../utils'\nimport { Operation, ReceiptOrEstimate, AbiItem } from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for FactoryRouter contract\n */\nexport class Router extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return FactoryRouter.abi as AbiItem[]\n  }\n\n  /**\n   * * Buys a batch of datatokens.\n   * one single call to buy multiple DT for multiple assets.\n   * require tokenIn approvals for router from user. (except for dispenser operations)\n   * @param {Operation[]} operations - The operations to execute.\n   * @param {boolean} [estimateGas=false] - Whether to return only the estimate gas or not.\n   * @return {Promise<ReceiptOrEstimate>} Transaction receipt\n   */\n  public async buyDatatokenBatch<G extends boolean = false>(\n    operations: Operation[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.buyDTBatch(operations)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.buyDTBatch,\n      operations\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Checks if a token is on approved tokens list,\n   * if true opfFee is lower in pools with that token/DT\n   * @param {string} address - The address of the token to check.\n   * @return {Promise<boolean>} true if is on the list.\n   */\n  public async isApprovedToken(address: string): Promise<boolean> {\n    return await this.contract.isApprovedToken(address)\n  }\n\n  /**\n   * Check if an address is a Fixed Rate contract.\n   * @param {string} address - The address of the fixed rate exchange to check.\n   * @return {Promise<boolean>} true if is a Fixed Rate contract\n   */\n  public async isFixedPrice(address: string): Promise<boolean> {\n    return await this.contract.isFixedRateContract(address)\n  }\n\n  /**\n   * Get Router Owner\n   * @return {Promise<string>} Router Owner address\n   */\n  public async getOwner(): Promise<string> {\n    return await this.contract.routerOwner()\n  }\n\n  /**\n   * Get NFT Factory address\n   * @return {Promise<string>} NFT Factory address\n   */\n  public async getNFTFactory(): Promise<string> {\n    return await this.contract.factory()\n  }\n\n  /**\n   * Adds a token to the list of tokens with reduced fees\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to add\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.addApprovedToken(tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.addApprovedToken,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a token if exists from the list of tokens with reduced fees\n   * @param {String} address caller address\n   * @param {String} tokenAddress token address to remove\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeApprovedToken<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.removeApprovedToken(tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.removeApprovedToken,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of fixed rate contracts\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.addFixedRateContract(tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.addFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of fixed rate contracts\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeFixedRateContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.removeFixedRateContract(tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.removeFixedRateContract,\n      tokenAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Adds an address to the list of dispensers\n   * @param {String} address caller address\n   * @param {String} tokenAddress contract address to add\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.addDispenserContract(tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.addDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes an address from the list of dispensers\n   * @param {String} address caller address\n   * @param {String} tokenAddress address Contract to be removed\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeDispenserContract<G extends boolean = false>(\n    address: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.removeDispenserContract(tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.removeDispenserContract,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get OPF Fee per token\n   * @return {Promise<number>} OPC fee for a specific baseToken\n   */\n  public async getOPCFee(baseToken: string): Promise<number> {\n    return await this.contract.getOPCFee(baseToken)\n  }\n\n  /** Get Current OPF Fee\n   * @return {Promise<number>} OPF fee\n   */\n  public async getCurrentOPCFee(): Promise<number> {\n    return await this.contract.swapOceanFee()\n  }\n\n  /**\n   * Updates OP Community Fees\n   * @param {String} address caller address\n   * @param {number} newSwapOceanFee Amount charged for swapping with ocean approved tokens\n   * @param {number} newSwapNonOceanFee Amount charged for swapping with non ocean approved tokens\n   * @param {number} newConsumeFee Amount charged from consumeFees\n   * @param {number} newProviderFee Amount charged for providerFees\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async updateOPCFee<G extends boolean = false>(\n    address: string,\n    newSwapOceanFee: number,\n    newSwapNonOceanFee: number,\n    newConsumeFee: number,\n    newProviderFee: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Router Owner`)\n    }\n\n    const estGas = await this.contract.estimateGas.updateOPCFee(\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.updateOPCFee,\n      newSwapOceanFee,\n      newSwapNonOceanFee,\n      newConsumeFee,\n      newProviderFee\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import { BigNumber, ethers } from 'ethers'\nimport ERC721Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json'\nimport { generateDtName, sendTx, getEventFromTx } from '../utils'\nimport {\n  MetadataProof,\n  MetadataAndTokenURI,\n  NftRoles,\n  ReceiptOrEstimate,\n  AbiItem\n} from '../@types'\nimport { SmartContract } from './SmartContract'\n\nexport class Nft extends SmartContract {\n  getDefaultAbi() {\n    return ERC721Template.abi as AbiItem[]\n  }\n\n  /**\n   * Create new ERC20 Datatoken - only user with DatatokenDeployer permission can succeed\n   * @param {String} nftAddress NFT address\n   * @param {String} address User address\n   * @param {String} minter User set as initial minter for the Datatoken\n   * @param {String} paymentCollector initial paymentCollector for this DT\n   * @param {String} mpFeeAddress Consume marketplace fee address\n   * @param {String} feeToken address of the token marketplace wants to add fee on top\n   * @param {String} feeAmount amount of feeToken to be transferred to mpFeeAddress on top, will be converted to WEI\n   * @param {String} cap Maximum cap (Number) - will be converted to wei\n   * @param {String} name Token name\n   * @param {String} symbol Token symbol\n   * @param {Number} templateIndex NFT template index\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<string>} ERC20 Datatoken address\n   */\n  public async createDatatoken<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    minter: string,\n    paymentCollector: string,\n    mpFeeAddress: string,\n    feeToken: string,\n    feeAmount: string,\n    cap: string,\n    name?: string,\n    symbol?: string,\n    templateIndex?: number,\n    estimateGas?: G\n  ): Promise<G extends false ? string : BigNumber> {\n    if ((await this.getNftPermissions(nftAddress, address)).deployERC20 !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    if (!templateIndex) templateIndex = 1\n\n    // Generate name & symbol if not present\n    if (!name || !symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    // Create 721contract object\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await nftContract.estimateGas.createERC20(\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [\n        await this.amountToUnits(null, cap, 18),\n        await this.amountToUnits(null, feeAmount, 18)\n      ],\n      []\n    )\n    if (estimateGas) return <G extends false ? string : BigNumber>estGas\n\n    const tx = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.createERC20,\n      templateIndex,\n      [name, symbol],\n      [minter, paymentCollector, mpFeeAddress, feeToken],\n      [\n        await this.amountToUnits(null, cap, 18),\n        await this.amountToUnits(null, feeAmount, 18)\n      ],\n      []\n    )\n    const trxReceipt = await tx.wait()\n    // console.log('trxReceipt =', trxReceipt)\n    const event = getEventFromTx(trxReceipt, 'TokenCreated')\n    return event?.args[0]\n  }\n\n  /**\n   * Add Manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be assing manager\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await nftContract.estimateGas.addManager(manager)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.addManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Removes a specific manager for NFT Contract (only NFT Owner can succeed)\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {String} manager User adress which is going to be removed as manager\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeManager<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    manager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await nftContract.estimateGas.removeManager(manager)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.removeManager,\n      manager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer User adress which is going to have DatatokenDeployer permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    // Estimate gas for addToCreateERC20List method\n    const estGas = await nftContract.estimateGas.addToCreateERC20List(datatokenDeployer)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.addToCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove DatatokenDeployer permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} datatokenDeployer Address of the user to be revoked DatatokenDeployer Permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeDatatokenDeployer<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    datatokenDeployer: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address === datatokenDeployer &&\n        (await this.getNftPermissions(nftAddress, address)).deployERC20 !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor DatatokenDeployer`)\n    }\n    const estGas = await nftContract.estimateGas.removeFromCreateERC20List(\n      datatokenDeployer\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.removeFromCreateERC20List,\n      datatokenDeployer\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater User adress which is going to have Metadata Updater permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await nftContract.estimateGas.addToMetadataList(metadataUpdater)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.addToMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Metadata Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} metadataUpdater Address of the user to be revoked Metadata updater Permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeMetadataUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== metadataUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).updateMetadata !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor Metadata Updater`)\n    }\n\n    const estGas = await nftContract.estimateGas.removeFromMetadataList(metadataUpdater)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.removeFromMetadataList,\n      metadataUpdater\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater User adress which is going to have Store Updater permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async addStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftPermissions(nftAddress, address)).manager !== true) {\n      throw new Error(`Caller is not Manager`)\n    }\n\n    const estGas = await nftContract.estimateGas.addTo725StoreList(storeUpdater)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.addTo725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Remove Store Updater permission - only Manager can succeed\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Manager adress\n   * @param {String} storeUpdater Address of the user to be revoked Store Updater Permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removeStoreUpdater<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    storeUpdater: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (\n      (await this.getNftPermissions(nftAddress, address)).manager !== true ||\n      (address !== storeUpdater &&\n        (await this.getNftPermissions(nftAddress, address)).store !== true)\n    ) {\n      throw new Error(`Caller is not Manager nor storeUpdater`)\n    }\n\n    const estGas = await nftContract.estimateGas.removeFrom725StoreList(storeUpdater)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.removeFrom725StoreList,\n      storeUpdater\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to remove all ROLES at NFT level: Managers, DatatokenDeployer, MetadataUpdater, StoreUpdater\n   * Even NFT Owner has to readd himself as Manager\n   * Permissions at Datatoken level stay.\n   * Only NFT Owner  can call it.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address NFT Owner adress\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== address) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const estGas = await nftContract.estimateGas.cleanPermissions()\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Transfers the NFT\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async transferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await nftContract.estimateGas.transferFrom(\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.transferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * safeTransferNFT Used for transferring the NFT, can be used by an approved relayer\n   * will clean all permissions both on NFT and Datatoken level.\n   * @param {String} nftAddress NFT contract address\n   * @param {String} nftOwner Current NFT Owner adress\n   * @param {String} nftReceiver User which will receive the NFT, will also be set as Manager\n   * @param {Number} tokenId The id of the token to be transfered\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async safeTransferNft<G extends boolean = false>(\n    nftAddress: string,\n    nftOwner: string,\n    nftReceiver: string,\n    tokenId?: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if ((await this.getNftOwner(nftAddress)) !== nftOwner) {\n      throw new Error(`Caller is not NFT Owner`)\n    }\n\n    const tokenIdentifier = tokenId || 1\n\n    const estGas = await nftContract.estimateGas.safeTransferFrom(\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.safeTransferFrom,\n      nftOwner,\n      nftReceiver,\n      tokenIdentifier\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates or update Metadata cached by Aquarius. Also, updates the METADATA_DECRYPTOR key\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address NFT Owner adress\n   * @param {Number} metadataState\n   * @param {String} metadataDecryptorUrl\n   * @param {String} metadataDecryptorAddress\n   * @param {String} flags\n   * @param {String} data\n   * @param {String} metadataHash\n   * @param {MetadataProof[]} metadataProofs\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadata<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    metadataDecryptorUrl: string,\n    metadataDecryptorAddress: string,\n    flags: string,\n    data: string,\n    metadataHash: string,\n    metadataProofs?: MetadataProof[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!metadataProofs) metadataProofs = []\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const estGas = await nftContract.estimateGas.setMetaData(\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.setMetaData,\n      metadataState,\n      metadataDecryptorUrl,\n      metadataDecryptorAddress,\n      flags,\n      data,\n      metadataHash,\n      metadataProofs\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *  Helper function to improve UX sets both MetaData & TokenURI in one tx\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address\n   * @param {MetadataAndTokenURI} metadataAndTokenURI metaDataAndTokenURI object\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataAndTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    metadataUpdater: string,\n    metadataAndTokenURI: MetadataAndTokenURI,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n    if (!(await this.getNftPermissions(nftAddress, metadataUpdater)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n    const sanitizedMetadataAndTokenURI = {\n      ...metadataAndTokenURI,\n      metadataProofs: metadataAndTokenURI.metadataProofs || []\n    }\n    const estGas = await nftContract.estimateGas.setMetaDataAndTokenURI(\n      sanitizedMetadataAndTokenURI\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.setMetaDataAndTokenURI,\n      sanitizedMetadataAndTokenURI\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * setMetadataState Used for updating the metadata State\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address Caller address => metadata updater\n   * @param {Number} metadataState new metadata state\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setMetadataState<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    metadataState: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    if (!(await this.getNftPermissions(nftAddress, address)).updateMetadata) {\n      throw new Error(`Caller is not Metadata updater`)\n    }\n\n    const estGas = await nftContract.estimateGas.setMetaDataState(metadataState)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.setMetaDataState,\n      metadataState\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * set TokenURI on an nft\n   * @param {String} nftAddress NFT contract address\n   * @param {String} data input data for TokenURI\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async setTokenURI<G extends boolean = false>(\n    nftAddress: string,\n    data: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const nftContract = this.getContract(nftAddress)\n\n    const estGas = await nftContract.estimateGas.setTokenURI('1', data)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.setTokenURI,\n      '1',\n      data\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Get NFT Owner\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<string>} string\n   */\n  public async getNftOwner(nftAddress: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const trxReceipt = await nftContract.ownerOf(1)\n    return trxReceipt\n  }\n\n  /**\n   * Gets NFT Permissions for a specified user\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<NftRoles>}\n   */\n  public async getNftPermissions(nftAddress: string, address: string): Promise<NftRoles> {\n    const nftContract = this.getContract(nftAddress)\n    const roles = await nftContract.getPermissions(address)\n    return roles\n  }\n\n  /**\n   * Returns Metadata details for an NFT\n   * @param {String} nftAddress NFT contract address\n   * @return {Promise<Objecta>}\n   */\n  public async getMetadata(nftAddress: string): Promise<Object> {\n    const nftContract = this.getContract(nftAddress)\n    return await nftContract.getMetaData()\n  }\n\n  /**\n   * Checks if user has DatatokenDeployer role\n   * @param {String} nftAddress NFT contract address\n   * @param {String} address user adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(\n    nftAddress: string,\n    address: string\n  ): Promise<boolean> {\n    const nftContract = this.getContract(nftAddress)\n    const isDatatokenDeployer = await nftContract.isERC20Deployer(address)\n    return isDatatokenDeployer\n  }\n\n  /**\n   * Allows users to store data with a preset key (keccak256(ERC20Address)) into NFT 725 Store\n   * only ERC20Deployer can succeed\n   * @param {string} nftAddress Nft datatoken adress\n   * @param {string} address User adress\n   * @param {string} key Key of the data to be stored into 725Y standard\n   * @param {string} value Data to be stored into 725Y standard\n   * @param {boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData<G extends boolean = false>(\n    nftAddress: string,\n    address: string,\n    key: string,\n    value: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getNftPermissions(nftAddress, address)).store !== true) {\n      throw new Error(`User is not ERC20 store updater`)\n    }\n\n    const nftContract = this.getContract(nftAddress)\n\n    const keyHash = ethers.utils.keccak256(key)\n    const valueHex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(value))\n\n    const estGas = await nftContract.estimateGas.setNewData(keyHash, valueHex)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      nftContract.setNewData,\n      keyHash,\n      valueHex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets stored data at a given `key` in an NFT\n   * @param {string} nftAddress - The address of the NFT.\n   * @param {string} key - The key of the data to get.\n   * @return {Promise<string>} The data stored at the key\n   */\n  public async getData(nftAddress: string, key: string): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const keyHash = ethers.utils.keccak256(key)\n    const data = await nftContract.getData(keyHash)\n    return data ? ethers.utils.toUtf8String(data) : null\n  }\n\n  /**\n   * Gets the token URI of an NFT.\n   * @param {string} nftAddress - The address of the NFT.\n   * @param {number} id - The ID of the token.\n   * @returns {Promise&lt;string&gt;}\n   */\n  public async getTokenURI(nftAddress: string, id: number): Promise<string> {\n    const nftContract = this.getContract(nftAddress)\n    const data = await nftContract.tokenURI(id)\n    return data\n  }\n}\n","import { ethers, Signer } from 'ethers'\nimport Decimal from 'decimal.js'\nimport ERC20Template from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json'\nimport ERC20TemplateEnterprise from '@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json'\nimport { amountToUnits, sendTx, ZERO_ADDRESS } from '../utils'\nimport {\n  AbiItem,\n  ConsumeMarketFee,\n  FreOrderParams,\n  FreCreationParams,\n  ProviderFees,\n  PublishingMarketFee,\n  DispenserParams,\n  OrderParams,\n  DatatokenRoles,\n  ReceiptOrEstimate\n} from '../@types'\nimport { Nft } from './NFT'\nimport { Config } from '../config'\nimport { SmartContract } from './SmartContract'\n\nexport class Datatoken extends SmartContract {\n  public abiEnterprise: AbiItem[]\n  public nft: Nft\n\n  getDefaultAbi() {\n    return ERC20Template.abi as AbiItem[]\n  }\n\n  /**\n   * Instantiate Datatoken class\n   * @param {Signer} signer The signer object.\n   * @param {string | number} [network] Network id or name\n   * @param {Config} [config] The configuration object.\n   * @param {AbiItem[]} [abi] ABI array of the smart contract\n   * @param {AbiItem[]} abiEnterprise Enterprise ABI array of the smart contract\n   */\n  constructor(\n    signer: Signer,\n    network?: string | number,\n    config?: Config,\n    abi?: AbiItem[],\n    abiEnterprise?: AbiItem[]\n  ) {\n    super(signer, network, config, abi)\n    this.abiEnterprise = abiEnterprise || (ERC20TemplateEnterprise.abi as AbiItem[])\n    this.nft = new Nft(this.signer)\n  }\n\n  /**\n   * Approves a spender to spend a certain amount of datatokens.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} spender Spender address\n   * @param {string} amount Number of datatokens, as number. Will be converted to wei\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async approve<G extends boolean = false>(\n    dtAddress: string,\n    spender: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await dtContract.estimateGas.approve(\n      spender,\n      amountToUnits(null, null, amount, 18)\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.approve,\n      spender,\n      amountToUnits(null, null, amount, 18)\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new FixedRateExchange setup.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {FixedRateParams} fixedRateParams The parameters required to create a fixed-rate exchange contract.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async createFixedRate<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    fixedRateParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n    if (!fixedRateParams.allowedConsumer) fixedRateParams.allowedConsumer = ZERO_ADDRESS\n\n    const withMint = fixedRateParams.withMint === false ? 0 : 1\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await dtContract.estimateGas.createFixedRate(\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.createFixedRate,\n      fixedRateParams.fixedRateAddress,\n      [\n        fixedRateParams.baseTokenAddress,\n        fixedRateParams.owner,\n        fixedRateParams.marketFeeCollector,\n        fixedRateParams.allowedConsumer\n      ],\n      [\n        fixedRateParams.baseTokenDecimals,\n        fixedRateParams.datatokenDecimals,\n        fixedRateParams.fixedRate,\n        fixedRateParams.marketFee,\n        withMint\n      ]\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates a new Dispenser\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} dispenserAddress Dispenser contract address\n   * @param {DispenserParams} dispenserParams The parameters required to create a dispenser contract.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async createDispenser<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    dispenserAddress: string,\n    dispenserParams: DispenserParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    if (!dispenserParams.allowedSwapper) dispenserParams.allowedSwapper = ZERO_ADDRESS\n\n    dispenserParams.withMint = dispenserParams.withMint !== false\n\n    // should check DatatokenDeployer role using NFT level ..\n\n    const estGas = await dtContract.estimateGas.createDispenser(\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.createDispenser,\n      dispenserAddress,\n      dispenserParams.maxTokens,\n      dispenserParams.maxBalance,\n      dispenserParams.withMint,\n      dispenserParams.allowedSwapper\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Mints datatokens\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Minter address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei\n   * @param {String} toAddress only if toAddress is different from the minter\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async mint<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    amount: string,\n    toAddress?: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.getPermissions(dtAddress, address)).minter !== true) {\n      throw new Error(`Caller is not Minter`)\n    }\n\n    const capAvailble = await this.getCap(dtAddress)\n    if (new Decimal(capAvailble).gte(amount)) {\n      const estGas = await dtContract.estimateGas.mint(\n        toAddress || address,\n        amountToUnits(null, null, amount, 18)\n      )\n      if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n      const trxReceipt = await sendTx(\n        estGas,\n        this.signer,\n        this.config?.gasFeeMultiplier,\n        dtContract.mint,\n        toAddress || address,\n        amountToUnits(null, null, amount, 18)\n      )\n      return <ReceiptOrEstimate<G>>trxReceipt\n    } else {\n      throw new Error(`Mint amount exceeds cap available`)\n    }\n  }\n\n  /**\n   * Add Minter for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address caller address\n   * @param {String} minter address which is going to be a Minter\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n    // Estimate gas cost for addMinter method\n    const estGas = await dtContract.estimateGas.addMinter(minter)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.addMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke Minter permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address caller address\n   * @param {String} minter address which will have removed the Minter permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async removeMinter<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    minter: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await dtContract.estimateGas.removeMinter(minter)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.removeMinter,\n      minter\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *  Adds a payment manager on a datatoken to a desired address.(can set who's going to collect fee when consuming orders)\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address Caller address\n   * @param {String} paymentManager  The address of the payment manager\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async addPaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await dtContract.estimateGas.addPaymentManager(paymentManager)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.addPaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Revoke paymentManager permission for an ERC20 Datatoken\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} paymentManager User which will be removed from paymentManager permission\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async removePaymentManager<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentManager: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    if ((await this.isDatatokenDeployer(dtAddress, address)) !== true) {\n      throw new Error(`Caller is not DatatokenDeployer`)\n    }\n\n    const estGas = await dtContract.estimateGas.removePaymentManager(paymentManager)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.removePaymentManager,\n      paymentManager\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * This function allows to set a new PaymentCollector (receives DT when consuming)\n   * If not set the paymentCollector is the NFT Owner\n   * only NFT owner can call\n   * @param dtAddress Datatoken address\n   * @param address Caller address\n   * @param paymentCollector User to be set as new payment collector\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} trxReceipt\n   */\n  public async setPaymentCollector<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    paymentCollector: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    const isPaymentManager = (await this.getPermissions(dtAddress, address))\n      .paymentManager\n    const nftAddress = !isPaymentManager && (await this.getNFTAddress(dtAddress))\n    const isNftOwner = nftAddress && (await this.nft.getNftOwner(nftAddress)) === address\n    const nftPermissions =\n      nftAddress && !isNftOwner && (await this.nft.getNftPermissions(nftAddress, address))\n    const isDatatokenDeployer = nftPermissions?.deployERC20\n    if (!isPaymentManager && !isNftOwner && !isDatatokenDeployer) {\n      throw new Error(`Caller is not Fee Manager, owner or Datatoken Deployer`)\n    }\n\n    const estGas = await dtContract.estimateGas.setPaymentCollector(paymentCollector)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.setPaymentCollector,\n      paymentCollector\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * getPaymentCollector - It returns the current paymentCollector\n   * @param dtAddress datatoken address\n   * @return {Promise<string>}\n   */\n  public async getPaymentCollector(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const paymentCollector = await dtContract.getPaymentCollector()\n    return paymentCollector\n  }\n\n  /**\n   * Transfer tokens(as number) from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens, as number. Will be converted to wei.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transfer<G extends boolean = false>(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    return this.transferWei(\n      dtAddress,\n      toAddress,\n      await amountToUnits(null, null, amount, 18),\n      estimateGas\n    )\n  }\n\n  /**\n   * Transfer in wei from address to toAddress\n   * @param {String} dtAddress Datatoken address\n   * @param {String} toAddress Receiver address\n   * @param {String} amount Number of datatokens (number) expressed as wei\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async transferWei<G extends boolean = false>(\n    dtAddress: string,\n    toAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await dtContract.estimateGas.transfer(toAddress, amount)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.transfer,\n      toAddress,\n      amount\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Start Order: called by payer or consumer prior ordering a service consume on a marketplace.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} consumer Consumer Address\n   * @param {Number} serviceIndex  Service index in the metadata\n   * @param {providerFees} providerFees provider fees\n   * @param {consumeMarketFee} ConsumeMarketFee consume market fees\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async startOrder<G extends boolean = false>(\n    dtAddress: string,\n    consumer: string,\n    serviceIndex: number,\n    providerFees: ProviderFees,\n    consumeMarketFee?: ConsumeMarketFee,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n    if (!consumeMarketFee) {\n      consumeMarketFee = {\n        consumeMarketFeeAddress: ZERO_ADDRESS,\n        consumeMarketFeeToken: ZERO_ADDRESS,\n        consumeMarketFeeAmount: '0'\n      }\n    }\n\n    const estGas = await dtContract.estimateGas.startOrder(\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.startOrder,\n      consumer,\n      serviceIndex,\n      providerFees,\n      consumeMarketFee\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reuse Order: called by payer or consumer having a valid order, but with expired provider access.\n   * Pays the provider fee again, but it will not require a new datatoken payment\n   * Requires previous approval of provider fee.\n   * @param {String} dtAddress Datatoken address\n   * @param {String} orderTxId previous valid order\n   * @param {providerFees} providerFees provider fees\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} string\n   */\n  public async reuseOrder<G extends boolean = false>(\n    dtAddress: string,\n    orderTxId: string,\n    providerFees: ProviderFees,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await dtContract.estimateGas.reuseOrder(orderTxId, providerFees)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.reuseOrder,\n      orderTxId,\n      providerFees\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Buys 1 DT from the FRE and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {OrderParams} orderParams  The parameters required to place an order.\n   * @param {FreParams} freParams The parameters required to buy from a fixed-rate exchange.\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromFreAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    orderParams: OrderParams,\n    freParams: FreOrderParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, this.abiEnterprise)\n\n    const freContractParams = await this.getFreOrderParams(freParams)\n\n    const estGas = await dtContract.estimateGas.buyFromFreAndOrder(\n      orderParams,\n      freContractParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.buyFromFreAndOrder,\n      orderParams,\n      freContractParams\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets 1 DT from dispenser and then startsOrder, while burning that DT\n   * @param {String} dtAddress Datatoken address\n   * @param {OrderParams} orderParams - The parameters required to place an order.\n   * @param {String} dispenserContract  dispenser address\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async buyFromDispenserAndOrder<G extends boolean = false>(\n    dtAddress: string,\n    orderParams: OrderParams,\n    dispenserContract: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(dtAddress, this.abiEnterprise)\n\n    const estGas = await dtContract.estimateGas.buyFromDispenserAndOrder(\n      orderParams,\n      dispenserContract\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.buyFromDispenserAndOrder,\n      orderParams,\n      dispenserContract\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** setData\n   * This function allows to store data with a preset key (keccak256(dtAddress)) into NFT 725 Store\n   * only DatatokenDeployer can succeed\n   * @param {String} dtAddress Datatoken address\n   * @param {String} address User address\n   * @param {String} value Data to be stored into 725Y standard\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async setData<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    value: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (!(await this.isDatatokenDeployer(dtAddress, address))) {\n      throw new Error(`User is not Datatoken Deployer`)\n    }\n\n    const dtContract = this.getContract(dtAddress)\n\n    const valueHex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(value))\n\n    const estGas = await dtContract.estimateGas.setData(valueHex)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.setData,\n      valueHex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Clean Datatoken level Permissions (minters, paymentManager and reset the paymentCollector) for an ERC20 Datatoken\n   * Only NFT Owner (at 721 level) can call it.\n   * @param {string} dtAddress Datatoken address where we want to clean permissions\n   * @param {string} address User adress\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transactionId\n   */\n  public async cleanPermissions<G extends boolean = false>(\n    dtAddress: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.nft.getNftOwner(await this.getNFTAddress(dtAddress))) !== address) {\n      throw new Error('Caller is NOT Nft Owner')\n    }\n    const dtContract = this.getContract(dtAddress)\n\n    const estGas = await dtContract.estimateGas.cleanPermissions()\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.cleanPermissions\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Returns ERC20 Datatoken user's permissions for a datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<DatatokenRoles>}\n   */\n  public async getPermissions(\n    dtAddress: string,\n    address: string\n  ): Promise<DatatokenRoles> {\n    const dtContract = this.getContract(dtAddress)\n    const roles = await dtContract.permissions(address)\n    return roles\n  }\n\n  /**\n   * Returns the Datatoken cap\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<string>}\n   */\n  public async getCap(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const cap = await dtContract.cap()\n    return await this.unitsToAmount(null, cap, 18)\n  }\n\n  /**\n   * It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDecimals(dtAddress: string): Promise<number> {\n    const dtContract = this.getContract(dtAddress)\n    const decimals = await dtContract.decimals()\n    return decimals\n  }\n\n  /**\n   * It returns the token template index.\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getId(dtAddress: string): Promise<number> {\n    const dtContract = this.getContract(dtAddress)\n    const id = await dtContract.getId()\n    return id\n  }\n\n  /**\n   * It returns the token symbol\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getSymbol(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const symbol = await dtContract.symbol()\n    return symbol\n  }\n\n  /**\n   *  It returns the name of the token\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getName(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const name = await dtContract.name()\n    return name\n  }\n\n  /**\n   * It returns the token decimals, how many supported decimal points\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getNFTAddress(dtAddress: string): Promise<string> {\n    const dtContract = this.getContract(dtAddress)\n    const nftAddress = await dtContract.getERC721Address()\n    return nftAddress\n  }\n\n  /**\n   * It returns the list of fixedRateExchanges created for this datatoken.\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getFixedRates(dtAddress: string): Promise<any[]> {\n    const dtContract = this.getContract(dtAddress)\n    const fixedRates = await dtContract.getFixedRates()\n    return fixedRates\n  }\n\n  /**\n   * It returns the list of dispensers created for this datatoken.\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<number>}\n   */\n  public async getDispensers(dtAddress: string): Promise<any[]> {\n    const dtContract = this.getContract(dtAddress)\n    const dispensers = await dtContract.getDispensers()\n    return dispensers\n  }\n\n  /**\n   *  Returns true if address has deployERC20 role\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} dtAddress Datatoken adress\n   * @return {Promise<boolean>}\n   */\n  public async isDatatokenDeployer(dtAddress: string, address: string): Promise<boolean> {\n    const dtContract = this.getContract(dtAddress)\n    const isDatatokenDeployer = await dtContract.isERC20Deployer(address)\n    return isDatatokenDeployer\n  }\n\n  /**\n   * Get Address Balance for datatoken\n   * @param {String} dtAddress Datatoken adress\n   * @param {String} address user adress\n   * @return {Promise<String>} balance  Number of datatokens. Will be converted from wei\n   */\n  public async balance(datatokenAddress: string, address: string): Promise<string> {\n    const dtContract = this.getContract(datatokenAddress)\n    const balance = await dtContract.balanceOf(address)\n    return await this.unitsToAmount(null, balance, 18)\n  }\n\n  /**\n   * Allows to set the fee required by the publisherMarket\n   * only publishMarketFeeAddress can call it\n   * @param {string} datatokenAddress Datatoken adress\n   * @param {string} publishMarketFeeAddress  new publish Market Fee Address\n   * @param {string} publishMarketFeeToken new publish Market Fee Token\n   * @param {string} publishMarketFeeAmount new fee amount\n   * @param {String} address user adress\n   * @param {Boolean} estimateGas if True, return gas estimate\n   */\n  public async setPublishingMarketFee<G extends boolean = false>(\n    datatokenAddress: string,\n    publishMarketFeeAddress: string,\n    publishMarketFeeToken: string,\n    publishMarketFeeAmount: string,\n    address: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const dtContract = this.getContract(datatokenAddress)\n    const mktFeeAddress = (await dtContract.getPublishingMarketFee())[0]\n    if (mktFeeAddress !== address) {\n      throw new Error(`Caller is not the Publishing Market Fee Address`)\n    }\n    const estGas = await dtContract.estimateGas.setPublishingMarketFee(\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      dtContract.setPublishingMarketFee,\n      publishMarketFeeAddress,\n      publishMarketFeeToken,\n      publishMarketFeeAmount\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Returns the current fee set by the publishing market\n   * @param {String} datatokenAddress Datatoken adress\n   * @return {Promise<PublishingMarketFee>} Current fee set by the publishing market\n   */\n  public async getPublishingMarketFee(\n    datatokenAddress: string\n  ): Promise<PublishingMarketFee> {\n    const dtContract = this.getContract(datatokenAddress)\n\n    const publishingMarketFee = await dtContract.getPublishingMarketFee()\n    const returnValues = {\n      publishMarketFeeAddress: publishingMarketFee[0],\n      publishMarketFeeToken: publishingMarketFee[1],\n      publishMarketFeeAmount: publishingMarketFee[2].toString()\n    }\n    return returnValues\n  }\n\n  private async getFreOrderParams(freParams: FreOrderParams): Promise<any> {\n    return {\n      exchangeContract: freParams.exchangeContract,\n      exchangeId: freParams.exchangeId,\n      maxBaseTokenAmount: await amountToUnits(\n        this.signer,\n        freParams.baseTokenAddress,\n        freParams.maxBaseTokenAmount,\n        freParams.baseTokenDecimals\n      ),\n      swapMarketFee: await amountToUnits(\n        this.signer,\n        freParams.baseTokenAddress,\n        freParams.swapMarketFee,\n        freParams.baseTokenDecimals\n      ),\n\n      marketFeeAddress: freParams.marketFeeAddress\n    }\n  }\n}\n","import { BigNumber } from 'ethers'\nimport ERC721Factory from '@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json'\nimport {\n  generateDtName,\n  ZERO_ADDRESS,\n  sendTx,\n  getEventFromTx,\n  getTokenDecimals,\n  LoggerInstance\n} from '../utils'\nimport {\n  AbiItem,\n  FreCreationParams,\n  DatatokenCreateParams,\n  DispenserCreationParams,\n  NftCreateData,\n  Template,\n  TokenOrder,\n  ReceiptOrEstimate\n} from '../@types'\nimport { SmartContractWithAddress } from './SmartContractWithAddress'\n\n/**\n * Provides an interface for NFT Factory contract\n */\nexport class NftFactory extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return ERC721Factory.abi as AbiItem[]\n  }\n\n  /**\n   * Create new data NFT\n   * @param {NFTCreateData} nftData The data needed to create an NFT.\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<string|BigNumber>} The transaction hash or the gas estimate.\n   */\n  public async createNFT<G extends boolean = false>(\n    nftData: NftCreateData,\n    estimateGas?: G\n  ): Promise<G extends false ? string : BigNumber> {\n    if (!nftData.templateIndex) nftData.templateIndex = 1\n\n    if (!nftData.name || !nftData.symbol) {\n      const { name, symbol } = generateDtName()\n      nftData.name = name\n      nftData.symbol = symbol\n    }\n    if (nftData.templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (nftData.templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getNFTTemplate(nftData.templateIndex)).isActive === false) {\n      throw new Error(`Template is not active`)\n    }\n    const estGas = await this.contract.estimateGas.deployERC721Contract(\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    if (estimateGas) return <G extends false ? string : BigNumber>estGas\n    // Invoke createToken function of the contract\n    const tx = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.deployERC721Contract,\n      nftData.name,\n      nftData.symbol,\n      nftData.templateIndex,\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      nftData.tokenURI,\n      nftData.transferable,\n      nftData.owner\n    )\n    const trxReceipt = await tx.wait()\n    const events = getEventFromTx(trxReceipt, 'NFTCreated')\n    return events.args[0]\n  }\n\n  /**\n   * Get Current NFT Count (NFT created)\n   * @return {Promise<number>} Number of NFT created from this factory\n   */\n  public async getCurrentNFTCount(): Promise<number> {\n    const nftCount = await this.contract.getCurrentNFTCount()\n    return nftCount\n  }\n\n  /**\n   * Get Current Datatoken Count\n   * @return {Promise<number>} Number of DTs created from this factory\n   */\n  public async getCurrentTokenCount(): Promise<number> {\n    const tokenCount = await this.contract.getCurrentTokenCount()\n    return tokenCount\n  }\n\n  /**\n   *  Get Factory Owner\n   * @return {Promise<string>} Factory Owner address\n   */\n  public async getOwner(): Promise<string> {\n    const owner = await this.contract.owner()\n    return owner\n  }\n\n  /**\n   * Get Current NFT Template Count\n   * @return {Promise<number>} Number of NFT Template added to this factory\n   */\n  public async getCurrentNFTTemplateCount(): Promise<number> {\n    const count = await this.contract.getCurrentNFTTemplateCount()\n    return count\n  }\n\n  /**\n   * Get Current Template  Datatoken (ERC20) Count\n   * @return {Promise<number>} Number of Datatoken Template added to this factory\n   */\n  public async getCurrentTokenTemplateCount(): Promise<number> {\n    const count = await this.contract.getCurrentTemplateCount()\n    return count\n  }\n\n  /**\n   * Get NFT Template\n   * @param {number} index Template index\n   * @return {Promise<Template>} Number of Template added to this factory\n   */\n  public async getNFTTemplate(index: number): Promise<Template> {\n    if (index > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (index === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const template = await this.contract.getNFTTemplate(index)\n    return template\n  }\n\n  /**\n   * Get Datatoken (ERC20) Template\n   * @param {number} index Template index\n   * @return {Promise<Template>} DT Template info\n   */\n  public async getTokenTemplate(index: number): Promise<Template> {\n    const template = await this.contract.getTokenTemplate(index)\n    return template\n  }\n\n  /**\n   * Check if Datatoken is deployed from the factory\n   * @param {String} datatoken Datatoken address to check\n   * @return {Promise<Boolean>} return true if deployed from this factory\n   */\n  public async checkDatatoken(datatoken: string): Promise<Boolean> {\n    const isDeployed = await this.contract.erc20List(datatoken)\n    return isDeployed\n  }\n\n  /**\n   * Check if  NFT is deployed from the factory\n   * @param {String} nftAddress nftAddress address to check\n   * @return {Promise<String>} return address(0) if it's not, or the nftAddress if true\n   */\n  public async checkNFT(nftAddress: string): Promise<String> {\n    const confirmAddress = await this.contract.erc721List(nftAddress)\n    return confirmAddress\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address caller address\n   * @param {String} templateAddress template address to add\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be ZERO address`)\n    }\n\n    const estGas = await this.contract.estimateGas.add721TokenTemplate(templateAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.add721TokenTemplate,\n      templateAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    const estGas = await this.contract.estimateGas.disable721TokenTemplate(templateIndex)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.disable721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateNFTTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentNFTTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n\n    const estGas = await this.contract.estimateGas.reactivate721TokenTemplate(\n      templateIndex\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.reactivate721TokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Add a new NFT token template - only factory Owner\n   * @param {String} address caller address\n   * @param {String} templateAddress template address to add\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async addTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateAddress === ZERO_ADDRESS) {\n      throw new Error(`Template cannot be address ZERO`)\n    }\n\n    const estGas = await this.contract.estimateGas.addTokenTemplate(templateAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.addTokenTemplate,\n      templateAddress\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Disable token template - only factory Owner\n   * @param {String} address caller address\n   * @param {Number} templateIndex index of the template we want to disable\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async disableTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === false) {\n      throw new Error(`Template is already disabled`)\n    }\n    const estGas = await this.contract.estimateGas.disableTokenTemplate(templateIndex)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.disableTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Reactivate a previously disabled token template - only factory Owner\n   * @param {String} address caller address\n   * @param {Number} templateIndex index of the template we want to reactivate\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} current token template count\n   */\n  public async reactivateTokenTemplate<G extends boolean = false>(\n    address: string,\n    templateIndex: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if ((await this.getOwner()) !== address) {\n      throw new Error(`Caller is not Factory Owner`)\n    }\n    if (templateIndex > (await this.getCurrentTokenTemplateCount())) {\n      throw new Error(`Template index doesnt exist`)\n    }\n\n    if (templateIndex === 0) {\n      throw new Error(`Template index cannot be ZERO`)\n    }\n    if ((await this.getTokenTemplate(templateIndex)).isActive === true) {\n      throw new Error(`Template is already active`)\n    }\n\n    const estGas = await this.contract.estimateGas.reactivateTokenTemplate(templateIndex)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.reactivateTokenTemplate,\n      templateIndex\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *      Used as a proxy to order multiple services\n   *      Users can have inifinite approvals for fees for factory instead of having one approval/ Datatoken contract\n   *      Requires previous approval of all :\n   *          - consumeFeeTokens\n   *          - publishMarketFeeTokens\n   *          - ERC20 Datatokens\n   * @param {TokenOrder[]} orders array of of orders\n   * @param {Boolean} [estimateGas] if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n  public async startMultipleTokenOrder<G extends boolean = false>(\n    orders: TokenOrder[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    if (orders.length > 50) {\n      throw new Error(`Too many orders`)\n    }\n\n    const estGas = await this.contract.estimateGas.startMultipleTokenOrder(orders)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.startMultipleTokenOrder,\n      orders\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   *  Creates a new NFT, then a datatoken,all in one call\n   * @param {NftCreateData} nftCreateData - The data required to create an NFT.\n   * @param {DatatokenCreateParams} dtParams - The parameters required to create a datatoken.\n   * @param {boolean} [estimateGas] - Whether to return only estimate gas or not.\n   * @return {Promise<ReceiptOrEstimate>} transaction receipt\n   */\n\n  public async createNftWithDatatoken<G extends boolean = false>(\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = await this.getErcCreationParams(dtParams)\n    const estGas = await this.contract.estimateGas.createNftWithErc20(\n      nftCreateData,\n      ercCreateData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.createNftWithErc20,\n      nftCreateData,\n      ercCreateData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates an NFT with a datatoken with a fixed rate  all in one call.\n   * be aware if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param {NftCreateData} nftCreateData - The data required to create an NFT.\n   * @param {DatatokenCreateParams} dtParams - The parameters required to create a datatoken.\n   * @param {FreCreationParams} freParams - The parameters required to create a fixed-rate exchange contract.\n   * @param {boolean} [estimateGas] - Whether to return only estimate gas or not.\n   * @returns {Promis<ReceiptOrEstimate<G>>}\n   */\n  public async createNftWithDatatokenWithFixedRate<G extends boolean = false>(\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    freParams: FreCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = await this.getErcCreationParams(dtParams)\n    const fixedData = await this.getFreCreationParams(freParams)\n\n    const estGas = await this.contract.estimateGas.createNftWithErc20WithFixedRate(\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.createNftWithErc20WithFixedRate,\n      nftCreateData,\n      ercCreateData,\n      fixedData\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Creates an NFT with a datatoken with a dispenser in one call.\n   * Be aware if Fixed Rate creation fails, you are still going to pay a lot of gas\n   * @param {NftCreateData} nftCreateData - The data required to create an NFT.\n   * @param {DatatokenCreateParams} dtParams - The parameters required to create a datatoken.\n   * @param {DispenserCreationParams} dispenserParams - The parameters required to create a dispenser contract.\n   * @param {boolean} [estimateGas] - Whether to estimate gas or not.\n   * @returns {Promis<ReceiptOrEstimate<G>>}\n   */\n  public async createNftWithDatatokenWithDispenser<G extends boolean = false>(\n    nftCreateData: NftCreateData,\n    dtParams: DatatokenCreateParams,\n    dispenserParams: DispenserCreationParams,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const ercCreateData = await this.getErcCreationParams(dtParams)\n\n    dispenserParams.maxBalance = await this.amountToUnits(\n      null,\n      dispenserParams.maxBalance,\n      18\n    )\n\n    dispenserParams.maxTokens = await this.amountToUnits(\n      null,\n      dispenserParams.maxTokens,\n      18\n    )\n\n    const estGas = await this.contract.estimateGas.createNftWithErc20WithDispenser(\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.createNftWithErc20WithDispenser,\n      nftCreateData,\n      ercCreateData,\n      dispenserParams\n    )\n\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Gets the parameters required to create an ERC20 token.\n   * @param {DatatokenCreateParams} dtParams - The parameters required to create a datatoken.\n   * @returns {Promise<any>}\n   */\n  private async getErcCreationParams(dtParams: DatatokenCreateParams): Promise<any> {\n    let name: string, symbol: string\n    // Generate name & symbol if not present\n    if (!dtParams.name || !dtParams.symbol) {\n      ;({ name, symbol } = generateDtName())\n    }\n\n    let feeTokenDecimals = 18\n    if (dtParams.feeToken !== ZERO_ADDRESS) {\n      try {\n        feeTokenDecimals = await getTokenDecimals(this.signer, dtParams.feeToken)\n      } catch (error) {\n        LoggerInstance.error('getTokenDecimals error', error)\n      }\n    }\n\n    return {\n      templateIndex: dtParams.templateIndex,\n      strings: [dtParams.name || name, dtParams.symbol || symbol],\n      addresses: [\n        dtParams.minter,\n        dtParams.paymentCollector,\n        dtParams.mpFeeAddress,\n        dtParams.feeToken\n      ],\n      uints: [\n        await this.amountToUnits(null, dtParams.cap, 18),\n        await this.amountToUnits(null, dtParams.feeAmount, feeTokenDecimals)\n      ],\n      bytess: []\n    }\n  }\n\n  /**\n   * Gets the parameters required to create a fixed-rate exchange contract.\n   * @param {FreCreationParams} freParams - The parameters required to create a fixed-rate exchange contract.\n   * @returns {Promise<any> }\n   */\n  private async getFreCreationParams(freParams: FreCreationParams): Promise<any> {\n    if (!freParams.allowedConsumer) freParams.allowedConsumer = ZERO_ADDRESS\n    const withMint = freParams.withMint === false ? 0 : 1\n\n    return {\n      fixedPriceAddress: freParams.fixedRateAddress,\n      addresses: [\n        freParams.baseTokenAddress,\n        freParams.owner,\n        freParams.marketFeeCollector,\n        freParams.allowedConsumer\n      ],\n      uints: [\n        freParams.baseTokenDecimals,\n        freParams.datatokenDecimals,\n        await this.amountToUnits(null, freParams.fixedRate, 18),\n        await this.amountToUnits(null, freParams.marketFee, 18),\n        withMint\n      ]\n    }\n  }\n}\n","import veOceanABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veOCEAN.vy/veOCEAN.json'\nimport { sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate, AbiItem } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeOcean extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return veOceanABI.abi as AbiItem[]\n  }\n\n  /**\n   * Deposit `amount` tokens for `userAddress` and lock until `unlockTime`\n   * @param {String} amount Amount of tokens to be locked\n   * @param {Number} unlockTime Timestamp for unlock\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async lockTokens<G extends boolean = false>(\n    amount: string,\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await this.contract.estimateGas.create_lock(\n      amountFormatted,\n      unlockTime\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.create_lock,\n      amountFormatted,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` tokens for `toAddress` and add to the existing lock\n   * Anyone (even a smart contract) can deposit for someone else, but cannot extend their locktime and deposit for a brand new user\n   * @param {String} toAddress user address to deposit for\n   * @param {String} amount Amount of tokens to be locked\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async depositFor<G extends boolean = false>(\n    toAddress: string,\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await this.contract.estimateGas.deposit_for(toAddress, amountFormatted)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.deposit_for,\n      toAddress,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Deposit `amount` additional tokens for `userAddress` without modifying the unlock time\n   * @param {String} amount Amount of tokens to be locked\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseAmount<G extends boolean = false>(\n    amount: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const amountFormatted = await this.amountToUnits(await this.getToken(), amount)\n    const estGas = await this.contract.estimateGas.increase_amount(amountFormatted)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.increase_amount,\n      amountFormatted\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Extend the unlock time for `userAddress` to `unlockTime`\n   * @param {Number} unlockTime Timestamp for new unlock time\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async increaseUnlockTime<G extends boolean = false>(\n    unlockTime: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.increase_unlock_time(unlockTime)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.increase_unlock_time,\n      unlockTime\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Withdraw all tokens for `userAddress`\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async withdraw<G extends boolean = false>(\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.withdraw()\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.withdraw\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get voting power for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getVotingPower(userAddress: string): Promise<number> {\n    const balance = await this.contract.balanceOf(userAddress)\n    return balance\n  }\n\n  /** Get locked balance\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async getLockedAmount(userAddress: string): Promise<string> {\n    const balance = await this.contract.locked(userAddress)\n    const balanceFormated = await this.unitsToAmount(\n      await this.getToken(),\n      balance.amount.toString()\n    )\n\n    return balanceFormated\n  }\n\n  /** Get untilLock for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async lockEnd(userAddress: string): Promise<number> {\n    const untilLock = await this.contract.locked__end(userAddress)\n    return parseInt(untilLock.toString())\n  }\n\n  /** Get total supply\n   * @return {Promise<number>}\n   */\n  public async totalSupply(): Promise<string> {\n    const supplyFormated = await this.unitsToAmount(\n      await this.getToken(),\n      await this.contract.totalSupply()\n    )\n    return supplyFormated\n  }\n\n  /** Get token\n   * @return {Promise<string>}\n   */\n  public async getToken(): Promise<string> {\n    const tokenAddress = await this.contract.token()\n    return tokenAddress\n  }\n}\n","import veFeeABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeDistributor.vy/veFeeDistributor.json'\nimport { sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate, AbiItem } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeDistributor extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return veFeeABI.abi as AbiItem[]\n  }\n\n  /**\n   * Claim fees for `userAddress`\n   * Each call to claim look at a maximum of 50 user veOCEAN points.\n         For accounts with many veOCEAN related actions, this function\n         may need to be called more than once to claim all available\n         fees. In the `Claimed` event that fires, if `claim_epoch` is\n         less than `max_epoch`, the account may claim again\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claim<G extends boolean = false>(\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.claim()\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.claim\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * Make multiple fee claims in a single call\n    Used to claim for many accounts at once, or to make\n         multiple claims for the same address when that address\n         has significant veOCEAN history\n   * @param {String} addresses array of addresses to claim\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMany<G extends boolean = false>(\n    addresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.claim_many(addresses)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.claim_many,\n      addresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import veFeeEstimate from '@oceanprotocol/contracts/artifacts/contracts/ve/veFeeEstimate.vy/veFeeEstimate.json'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { VeOcean } from './VeOcean'\nimport { AbiItem } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeFeeEstimate extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return veFeeEstimate.abi as AbiItem[]\n  }\n\n  /**\n   * estimateClaim\n   * @param {String} userAddress user address\n   * @return {Promise<string>}\n   */\n  public async estimateClaim(userAddress: string): Promise<string> {\n    const amount = await this.contract.estimateClaim(userAddress)\n    const veOcean = new VeOcean(await this.contract.voting_escrow(), this.signer)\n    const amountFormated = await this.unitsToAmount(await veOcean.getToken(), amount)\n    return amountFormated\n  }\n}\n","import veAllocateABI from '@oceanprotocol/contracts/artifacts/contracts/ve/veAllocate.sol/veAllocate.json'\nimport { sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate, AbiItem } from '../../@types'\n/**\n * Provides an interface for veOcean contract\n */\nexport class VeAllocate extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return veAllocateABI.abi as AbiItem[]\n  }\n\n  /**\n   * set a specific percentage of veOcean to a specific nft\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String} amount Percentage used\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setAllocation<G extends boolean = false>(\n    amount: string,\n    nft: string,\n    chainId: number,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.setAllocation(amount, nft, chainId)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.setAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * set specific percetage of veOcean to multiple nfts\n   * Maximum allocated percentage is 10000, so 1% is specified as 100\n   * @param {String[]} amount Array of percentages used\n   * @param {String[]} nft Array of NFT addresses\n   * @param {String[]} chainId Array of chainIds\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async setBatchAllocation<G extends boolean = false>(\n    amount: string[],\n    nft: string[],\n    chainId: number[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.setBatchAllocation(\n      amount,\n      nft,\n      chainId\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas.add(20000),\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.setBatchAllocation,\n      amount,\n      nft,\n      chainId\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /** Get totalAllocation for address\n   * @param {String} userAddress user address\n   * @return {Promise<number>}\n   */\n  public async getTotalAllocation(userAddress: string): Promise<number> {\n    const allocation = await this.contract.getTotalAllocation(userAddress)\n    return allocation\n  }\n\n  /** Get getveAllocation for address, nft, chainId\n   * @param {String} userAddress user address\n   * @param {String} nft NFT address to allocate to\n   * @param {String} chainId chainId of NFT\n   * @return {Promise<number>}\n   */\n  public async getVeAllocation(\n    userAddress: string,\n    nft: string,\n    chainId: string\n  ): Promise<number> {\n    const allocation = await this.contract.getveAllocation(userAddress, nft, chainId)\n    return allocation\n  }\n}\n","import dfRewardsABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFRewards.sol/DFRewards.json'\nimport { sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { AbiItem, ReceiptOrEstimate } from '../../@types'\n\n/**\n * Provides an interface for DFRewards contract\n */\nexport class DfRewards extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return dfRewardsABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for a token\n   * @param {String} userAddress user address\n   * @param {String} tokenAddress token address\n   * @return {Promise<string>}\n   */\n  public async getAvailableRewards(\n    userAddress: string,\n    tokenAddress: string\n  ): Promise<string> {\n    const rewards = await this.contract.claimable(userAddress, tokenAddress)\n    const rewardsFormated = await this.unitsToAmount(tokenAddress, rewards)\n\n    return rewardsFormated\n  }\n\n  /**\n   * claim rewards for any address\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddress token address\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimRewards<G extends boolean = false>(\n    userAddress: string,\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.claimFor(userAddress, tokenAddress)\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.claimFor,\n      userAddress,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n\n  /**\n   * allocate rewards to address.  An approve must exist before calling this function.\n   * @param {String[]} userAddresses array of users that will receive rewards\n   * @param {String[]} amounts array of amounts\n   * @param {String} tokenAddress token address\n   * @param {Boolean} estimateGas if True, return gas estimate\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async allocateRewards<G extends boolean = false>(\n    userAddresses: string[],\n    amounts: string[],\n    tokenAddress: string,\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    for (let i = 0; i < amounts.length; i++) {\n      amounts[i] = await this.amountToUnits(tokenAddress, amounts[i])\n    }\n    const estGas = await this.contract.estimateGas.allocate(\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.allocate,\n      userAddresses,\n      amounts,\n      tokenAddress\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import dfStrategyV1ABI from '@oceanprotocol/contracts/artifacts/contracts/df/DFStrategyV1.sol/DFStrategyV1.json'\nimport { sendTx } from '../../utils'\nimport { SmartContractWithAddress } from '../SmartContractWithAddress'\nimport { ReceiptOrEstimate, AbiItem } from '../../@types'\n/**\n * Provides an interface for dfStrategyV1 contract\n */\nexport class DfStrategyV1 extends SmartContractWithAddress {\n  getDefaultAbi() {\n    return dfStrategyV1ABI.abi as AbiItem[]\n  }\n\n  /** Get available DF Rewards for multiple tokens\n   * @param {String} userAddress user address\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<string[]>}\n   */\n  public async getMultipleAvailableRewards(\n    userAddress: string,\n    tokenAddresses: string[]\n  ): Promise<string[]> {\n    const rewards = await this.contract.claimables(userAddress, tokenAddresses)\n    const rewardsFormated: string[] = []\n    for (let i = 0; i < rewards.length; i++) {\n      rewardsFormated.push(await this.unitsToAmount(tokenAddresses[i], rewards[i]))\n    }\n    return rewardsFormated\n  }\n\n  /**\n   * claim multiple token rewards for any address\n   * @param {String} userAddress user address to claim\n   * @param {String} tokenAddresses array of tokens\n   * @return {Promise<ReceiptOrEstimate>}\n   */\n  public async claimMultipleRewards<G extends boolean = false>(\n    userAddress: string,\n    tokenAddresses: string[],\n    estimateGas?: G\n  ): Promise<ReceiptOrEstimate<G>> {\n    const estGas = await this.contract.estimateGas.claimMultiple(\n      userAddress,\n      tokenAddresses\n    )\n    if (estimateGas) return <ReceiptOrEstimate<G>>estGas\n\n    // Invoke function of the contract\n    const trxReceipt = await sendTx(\n      estGas,\n      this.signer,\n      this.config?.gasFeeMultiplier,\n      this.contract.claimMultiple,\n      userAddress,\n      tokenAddresses\n    )\n    return <ReceiptOrEstimate<G>>trxReceipt\n  }\n}\n","import fetch from 'cross-fetch'\nimport { LoggerInstance, sleep } from '../utils'\nimport { Asset, DDO, ValidateMetadata } from '../@types'\n\nexport interface SearchQuery {\n  from?: number\n  size?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query: any\n  sort?: { [jsonPath: string]: string }\n  aggs?: any\n}\n\nexport class Aquarius {\n  public aquariusURL: string\n\n  /**\n   * Instantiate Aquarius\n   * @param {String} aquariusURL\n   */\n  constructor(aquariusURL: string) {\n    this.aquariusURL = aquariusURL\n  }\n\n  /** Resolves a DID\n   * @param {string} did DID of the asset.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} Asset\n   */\n  public async resolve(did: string, signal?: AbortSignal): Promise<Asset> {\n    const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n\n      if (response.ok) {\n        const raw = await response.json()\n        return raw as Asset\n      } else {\n        throw new Error('HTTP request failed with status ' + response.status)\n      }\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed')\n    }\n  }\n\n  /**\n   * Blocks until Aqua will cache the did (or the update for that did) or timeouts\n   * @param {string} did DID of the asset.\n   * @param {string} txid used when the did exists and we expect an update with that txid.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<Asset>} DDO of the asset.\n   */\n  public async waitForAqua(\n    did: string,\n    txid?: string,\n    signal?: AbortSignal\n  ): Promise<Asset> {\n    let tries = 0\n    do {\n      try {\n        const path = this.aquariusURL + '/api/aquarius/assets/ddo/' + did\n        const response = await fetch(path, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal\n        })\n        if (response.ok) {\n          const ddo = await response.json()\n          if (txid) {\n            // check tx\n            if (ddo.event && ddo.event.txid === txid) return ddo as Asset\n          } else return ddo as Asset\n        }\n      } catch (e) {\n        // do nothing\n      }\n      await sleep(1500)\n      tries++\n    } while (tries < 100)\n    return null\n  }\n\n  /**\n   * Validate DDO content\n   * @param {DDO} ddo DID Descriptor Object content.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ValidateMetadata>}.\n   */\n  public async validate(ddo: DDO, signal?: AbortSignal): Promise<ValidateMetadata> {\n    const status: ValidateMetadata = {\n      valid: false\n    }\n    let jsonResponse\n    try {\n      const path = this.aquariusURL + '/api/aquarius/assets/ddo/validate'\n\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(ddo),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n\n      jsonResponse = await response.json()\n      if (response.status === 200) {\n        status.valid = true\n        status.hash = jsonResponse.hash\n        status.proof = {\n          validatorAddress: jsonResponse.publicKey,\n          r: jsonResponse.r[0],\n          s: jsonResponse.s[0],\n          v: jsonResponse.v\n        }\n      } else {\n        status.errors = jsonResponse\n        LoggerInstance.error('validate Metadata failed:', response.status, status.errors)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error validating metadata: ', error)\n    }\n    return status\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param {string} did DID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async getAssetMetadata(did: string, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/metadata/' + did\n\n    try {\n      const response = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error(\n          'getAssetMetadata failed: ' + response.status + response.statusText\n        )\n      }\n    } catch (error) {\n      LoggerInstance.error('Error getting metadata: ', error)\n      throw new Error('Error getting metadata: ' + error)\n    }\n  }\n\n  /**\n   * Search over the DDOs using a query.\n   * @param  {SearchQuery} query Query to filter the DDOs.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<QueryResult>}\n   */\n  public async querySearch(query: SearchQuery, signal?: AbortSignal): Promise<any> {\n    const path = this.aquariusURL + '/api/aquarius/assets/query'\n\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(query),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal\n      })\n\n      if (response.ok) {\n        return response.json()\n      } else {\n        throw new Error('querySearch failed: ' + response.status + response.statusText)\n      }\n    } catch (error) {\n      LoggerInstance.error('Error querying metadata: ', error)\n      throw new Error('Error querying metadata: ' + error)\n    }\n  }\n}\n","import fetch from 'cross-fetch'\nimport { ethers, Signer, providers } from 'ethers'\nimport { LoggerInstance } from '../utils'\nimport {\n  Arweave,\n  FileInfo,\n  ComputeJob,\n  ComputeOutput,\n  ComputeAlgorithm,\n  ComputeAsset,\n  ComputeEnvironment,\n  ProviderInitialize,\n  ProviderComputeInitializeResults,\n  ServiceEndpoint,\n  UrlFile,\n  UserCustomParameters,\n  Ipfs,\n  Smartcontract,\n  GraphqlQuery\n} from '../@types'\n\nexport class Provider {\n  /**\n   * Returns the provider endpoints\n   * @param {string} providerUri - the provider url\n   * @return {Promise<any>}\n   */\n  async getEndpoints(providerUri: string): Promise<any> {\n    try {\n      const endpoints = await this.getData(providerUri)\n      return await endpoints.json()\n    } catch (e) {\n      LoggerInstance.error('Finding the service endpoints failed:', e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /**\n   * This function returns the endpoint URL for a given service name.\n   * @param {ServiceEndpoint[]} servicesEndpoints - The array of service endpoints\n   * @param {string} serviceName - The name of the service\n   * @returns {ServiceEndpoint} The endpoint URL for the given service name\n   */\n  getEndpointURL(\n    servicesEndpoints: ServiceEndpoint[],\n    serviceName: string\n  ): ServiceEndpoint {\n    if (!servicesEndpoints) return null\n    return servicesEndpoints.find((s) => s.serviceName === serviceName) as ServiceEndpoint\n  }\n\n  /**\n   * This function returns an array of service endpoints for a given provider endpoint.\n   * @param {string} providerEndpoint - The provider endpoint\n   * @param {any} endpoints - The endpoints object\n   * @returns {ServiceEndpoint[]} An array of service endpoints\n   */\n  public async getServiceEndpoints(providerEndpoint: string, endpoints: any) {\n    const serviceEndpoints: ServiceEndpoint[] = []\n    for (const i in endpoints.serviceEndpoints) {\n      const endpoint: ServiceEndpoint = {\n        serviceName: i,\n        method: endpoints.serviceEndpoints[i][0],\n        urlPath: providerEndpoint + endpoints.serviceEndpoints[i][1]\n      }\n      serviceEndpoints.push(endpoint)\n    }\n    return serviceEndpoints\n  }\n\n  /**\n   * Get current nonce from the provider.\n   * @param {string} providerUri provider uri address\n   * @param {string} consumerAddress Publisher address\n   * @param {AbortSignal} signal abort signal\n   * @param {string} providerEndpoints Identifier of the asset to be registered in ocean\n   * @param {string} serviceEndpoints document description object (DDO)=\n   * @return {Promise<string>} urlDetails\n   */\n  public async getNonce(\n    providerUri: string,\n    consumerAddress: string,\n    signal?: AbortSignal,\n    providerEndpoints?: any,\n    serviceEndpoints?: ServiceEndpoint[]\n  ): Promise<number> {\n    if (!providerEndpoints) {\n      providerEndpoints = await this.getEndpoints(providerUri)\n    }\n    if (!serviceEndpoints) {\n      serviceEndpoints = await this.getServiceEndpoints(providerUri, providerEndpoints)\n    }\n    const path = this.getEndpointURL(serviceEndpoints, 'nonce')\n      ? this.getEndpointURL(serviceEndpoints, 'nonce').urlPath\n      : null\n    if (!path) return null\n    try {\n      const response = await fetch(path + `?userAddress=${consumerAddress}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      const { nonce } = await response.json()\n      console.log(`[getNonce] Consumer: ${consumerAddress} nonce: ${nonce}`)\n      const sanitizedNonce = !nonce || nonce === null ? 0 : Number(nonce)\n      return sanitizedNonce\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error(e.message)\n    }\n  }\n\n  /**\n   * Sign a provider request with a signer.\n   * @param {Signer} signer - The signer to use.\n   * @param {string} message - The message to sign.\n   * @returns {Promise<string>} A promise that resolves with the signature.\n   */\n  public async signProviderRequest(signer: Signer, message: string): Promise<string> {\n    //  const isMetaMask = web3 && web3.currentProvider && (web3.currentProvider as any).isMetaMask\n    //  if (isMetaMask) return await web3.eth.personal.sign(consumerMessage, accountId, password)\n    //  await web3.eth.sign(consumerMessage, await signer.getAddress())\n    const consumerMessage = ethers.utils.solidityKeccak256(\n      ['bytes'],\n      [ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))]\n    )\n    const messageHashBytes = ethers.utils.arrayify(consumerMessage)\n    const chainId = await signer.getChainId()\n    try {\n      return await signer.signMessage(messageHashBytes)\n    } catch (error) {\n      LoggerInstance.error('Sign provider message error: ', error)\n      if (chainId === 8996) {\n        return await (signer as providers.JsonRpcSigner)._legacySignMessage(\n          messageHashBytes\n        )\n      }\n    }\n  }\n\n  /**\n   * Encrypt data using the Provider's own symmetric key\n   * @param {string} data data in json format that needs to be sent , it can either be a DDO or a File array\n   * @param {number} chainId network's id so provider can choose the corresponding Signer object\n   * @param {string} providerUri provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<string>} urlDetails\n   */\n  public async encrypt(\n    data: any,\n    chainId: number,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path =\n      (this.getEndpointURL(serviceEndpoints, 'encrypt')\n        ? this.getEndpointURL(serviceEndpoints, 'encrypt').urlPath\n        : null) + `?chainId=${chainId}`\n    if (!path) return null\n    try {\n      const response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/octet-stream' },\n        signal\n      })\n      return await response.text()\n    } catch (e) {\n      LoggerInstance.error(e)\n      throw new Error('HTTP request failed calling Provider')\n    }\n  }\n\n  /**\n   * Get file details for a given DID and service ID.\n   * @param {string} did - The DID to check.\n   * @param {string} serviceId - The service ID to check.\n   * @param {string} providerUri - The URI of the provider.\n   * @param {boolean} [withChecksum=false] - Whether or not to include a checksum.\n   * @param {AbortSignal} [signal] - An optional abort signal.\n   * @returns {Promise<FileInfo[]>} A promise that resolves with an array of file info objects.\n   */\n  public async checkDidFiles(\n    did: string,\n    serviceId: string,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { did, serviceId, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    let response\n    try {\n      response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('File info call failed: ')\n      LoggerInstance.error(e)\n      throw new Error(e)\n    }\n    if (response?.ok) {\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'File info call failed: ',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /**\n   * Get File details (if possible)\n   * @param {UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract} file one of the supported file structures\n   * @param {string} providerUri uri of the provider that will be used to check the file\n   * @param {boolean} [withChecksum=false] - Whether or not to include a checksum.\n   * @param {AbortSignal} [signal] - An optional abort signal.\n   * @returns {Promise<FileInfo[]>} A promise that resolves with an array of file info objects.\n   */\n  public async getFileInfo(\n    file: UrlFile | Arweave | Ipfs | GraphqlQuery | Smartcontract,\n    providerUri: string,\n    withChecksum: boolean = false,\n    signal?: AbortSignal\n  ): Promise<FileInfo[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const args = { ...file, checksum: withChecksum }\n    const files: FileInfo[] = []\n    const path = this.getEndpointURL(serviceEndpoints, 'fileinfo')\n      ? this.getEndpointURL(serviceEndpoints, 'fileinfo').urlPath\n      : null\n    if (!path) return null\n    let response\n    try {\n      response = await fetch(path, {\n        method: 'POST',\n        body: JSON.stringify(args),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('File info call failed: ')\n      LoggerInstance.error(e)\n      throw new Error(e)\n    }\n    if (response?.ok) {\n      const results: FileInfo[] = await response.json()\n      for (const result of results) {\n        files.push(result)\n      }\n      return files\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'File info call failed: ',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /**\n   * Returns compute environments from a provider.\n   * @param {string} providerUri - The URI of the provider.\n   * @param {AbortSignal} [signal] - An optional abort signal.\n   * @returns {Promise<{[chainId: number]: ComputeEnvironment[]}>} A promise that resolves with an object containing compute environments for each chain ID.\n   */\n  public async getComputeEnvironments(\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<{ [chainId: number]: ComputeEnvironment[] }> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const path = this.getEndpointURL(serviceEndpoints, 'computeEnvironments')?.urlPath\n    if (!path) return null\n    let response\n    try {\n      response = await fetch(path, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Fetch compute env failed: ')\n      LoggerInstance.error(e)\n      throw new Error(e)\n    }\n    if (response?.ok) {\n      const result = response.json()\n      if (Array.isArray(result)) {\n        const providerChain: number = providerEndpoints.chainId\n        return { [providerChain]: result }\n      }\n      return result\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'Fetch compute env failed: ',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /**\n   * Initializes the provider for a service request.\n   * @param {string} did - The asset DID .\n   * @param {string} serviceId - The asset service ID.\n   * @param {number} fileIndex - The file index.\n   * @param {string} consumerAddress - The consumer address.\n   * @param {string} providerUri - The URI of the provider.\n   * @param {AbortSignal} [signal] - The abort signal if any.\n   * @param {UserCustomParameters} [userCustomParameters] - The custom parameters if any.\n   * @param {string} [computeEnv] - The compute environment if any.\n   * @param {number} [validUntil] - The validity time if any.\n   * @returns {Promise<ProviderInitialize>} A promise that resolves with ProviderInitialize response.\n   */\n  public async initialize(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    consumerAddress: string,\n    providerUri: string,\n    signal?: AbortSignal,\n    userCustomParameters?: UserCustomParameters,\n    computeEnv?: string,\n    validUntil?: number\n  ): Promise<ProviderInitialize> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    let initializeUrl = this.getEndpointURL(serviceEndpoints, 'initialize')\n      ? this.getEndpointURL(serviceEndpoints, 'initialize').urlPath\n      : null\n\n    if (!initializeUrl) return null\n    initializeUrl += `?documentId=${did}`\n    initializeUrl += `&serviceId=${serviceId}`\n    initializeUrl += `&fileIndex=${fileIndex}`\n    initializeUrl += `&consumerAddress=${consumerAddress}`\n    if (userCustomParameters)\n      initializeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    if (computeEnv) initializeUrl += '&environment=' + encodeURI(computeEnv)\n    if (validUntil) initializeUrl += '&validUntil=' + validUntil\n    let response\n    try {\n      response = await fetch(initializeUrl, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Provider initialized failed: ')\n      LoggerInstance.error(e)\n      throw new Error(`Provider initialize failed url: ${initializeUrl} `)\n    }\n    if (response?.ok) {\n      const results: ProviderInitialize = await response.json()\n      return results\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'Provider initialized failed: ',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /** Initializes the provider for a compute request.\n   * @param {ComputeAsset[]} assets The datasets array to initialize compute request.\n   * @param {ComputeAlgorithmber} algorithm The algorithm to use.\n   * @param {string} computeEnv The compute environment.\n   * @param {number} validUntil  The job expiration date.\n   * @param {string} providerUri The provider URI.\n   * @param {string} accountId caller address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ProviderComputeInitialize>} ProviderComputeInitialize data\n   */\n  public async initializeCompute(\n    assets: ComputeAsset[],\n    algorithm: ComputeAlgorithm,\n    computeEnv: string,\n    validUntil: number,\n    providerUri: string,\n    accountId: string,\n    signal?: AbortSignal\n  ): Promise<ProviderComputeInitializeResults> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const providerData = {\n      datasets: assets,\n      algorithm,\n      compute: { env: computeEnv, validUntil },\n      consumerAddress: accountId\n    }\n    const initializeUrl = this.getEndpointURL(serviceEndpoints, 'initializeCompute')\n      ? this.getEndpointURL(serviceEndpoints, 'initializeCompute').urlPath\n      : null\n    if (!initializeUrl) return null\n    let response\n    try {\n      response = await fetch(initializeUrl, {\n        method: 'POST',\n        body: JSON.stringify(providerData),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Initialize compute failed: ')\n      LoggerInstance.error(e)\n      throw new Error('ComputeJob cannot be initialized')\n    }\n    if (response?.ok) {\n      const params = await response.json()\n      return params\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'Initialize compute failed: ',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    LoggerInstance.error('Payload was:', providerData)\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /**\n   * Gets the download URL.\n   * @param {string} did - The DID.\n   * @param {string} serviceId - The service ID.\n   * @param {number} fileIndex - The file index.\n   * @param {string} transferTxId - The transfer transaction ID.\n   * @param {string} providerUri - The provider URI.\n   * @param {Signer} signer - The signer.\n   * @param {UserCustomParameters} userCustomParameters - The user custom parameters.\n   * @returns {Promise<any>} The download URL.\n   */\n  public async getDownloadUrl(\n    did: string,\n    serviceId: string,\n    fileIndex: number,\n    transferTxId: string,\n    providerUri: string,\n    signer: Signer,\n    userCustomParameters?: UserCustomParameters\n  ): Promise<any> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const downloadUrl = this.getEndpointURL(serviceEndpoints, 'download')\n      ? this.getEndpointURL(serviceEndpoints, 'download').urlPath\n      : null\n    if (!downloadUrl) return null\n    const consumerAddress = await signer.getAddress()\n    const nonce = (\n      (await this.getNonce(\n        providerUri,\n        consumerAddress,\n        null,\n        providerEndpoints,\n        serviceEndpoints\n      )) + 1\n    ).toString()\n\n    const signature = await this.signProviderRequest(signer, did + nonce)\n    let consumeUrl = downloadUrl\n    consumeUrl += `?fileIndex=${fileIndex}`\n    consumeUrl += `&documentId=${did}`\n    consumeUrl += `&transferTxId=${transferTxId}`\n    consumeUrl += `&serviceId=${serviceId}`\n    consumeUrl += `&consumerAddress=${consumerAddress}`\n    consumeUrl += `&nonce=${nonce}`\n    consumeUrl += `&signature=${signature}`\n    if (userCustomParameters)\n      consumeUrl += '&userdata=' + encodeURI(JSON.stringify(userCustomParameters))\n    return consumeUrl\n  }\n\n  /** Instruct the provider to start a compute job\n   * @param {string} providerUri The provider URI.\n   * @param {Signer} signer The consumer signer object.\n   * @param {string} computeEnv The compute environment.\n   * @param {ComputeAsset} dataset The dataset to start compute on\n   * @param {ComputeAlgorithm} algorithm The algorithm to start compute with.\n   * @param {AbortSignal} signal abort signal\n   * @param {ComputeAsset[]} additionalDatasets The additional datasets if that is the case.\n   * @param {ComputeOutput} output The compute job output settings.\n   * @return {Promise<ComputeJob | ComputeJob[]>} The compute job or jobs.\n   */\n  public async computeStart(\n    providerUri: string,\n    consumer: Signer,\n    computeEnv: string,\n    dataset: ComputeAsset,\n    algorithm: ComputeAlgorithm,\n    signal?: AbortSignal,\n    additionalDatasets?: ComputeAsset[],\n    output?: ComputeOutput\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStartUrl = this.getEndpointURL(serviceEndpoints, 'computeStart')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStart').urlPath\n      : null\n\n    const consumerAddress = await consumer.getAddress()\n    const nonce = (\n      (await this.getNonce(\n        providerUri,\n        consumerAddress,\n        signal,\n        providerEndpoints,\n        serviceEndpoints\n      )) + 1\n    ).toString()\n\n    let signatureMessage = consumerAddress\n    signatureMessage += dataset.documentId\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(consumer, signatureMessage)\n    const payload = Object()\n    payload.consumerAddress = consumerAddress\n    payload.signature = signature\n    payload.nonce = nonce\n    payload.environment = computeEnv\n    payload.dataset = dataset\n    payload.algorithm = algorithm\n    if (additionalDatasets) payload.additionalDatasets = additionalDatasets\n    if (output) payload.output = output\n    if (!computeStartUrl) return null\n    let response\n    try {\n      response = await fetch(computeStartUrl, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Compute start failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n    if (response?.ok) {\n      const params = await response.json()\n      return params\n    }\n    LoggerInstance.error(\n      'Compute start failed: ',\n      response.status,\n      response.statusText,\n      await response.json()\n    )\n    LoggerInstance.error('Payload was:', payload)\n    return null\n  }\n\n  /** Instruct the provider to Stop the execution of a to stop a compute job.\n   * @param {string} did the asset did\n   * @param {string} consumerAddress The consumer address.\n   * @param {string} jobId the compute job id\n   * @param {string} providerUri The provider URI.\n   * @param {Signer} signer The consumer signer object.\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStop(\n    did: string,\n    consumerAddress: string,\n    jobId: string,\n    providerUri: string,\n    signer: Signer,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStopUrl = this.getEndpointURL(serviceEndpoints, 'computeStop')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStop').urlPath\n      : null\n\n    const nonce = (\n      (await this.getNonce(\n        providerUri,\n        consumerAddress,\n        signal,\n        providerEndpoints,\n        serviceEndpoints\n      )) + 1\n    ).toString()\n\n    let signatureMessage = consumerAddress\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(signer, signatureMessage)\n    const payload = Object()\n    payload.signature = signature\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = consumerAddress\n    payload.nonce = nonce\n    if (jobId) payload.jobId = jobId\n\n    if (!computeStopUrl) return null\n    let response\n    try {\n      response = await fetch(computeStopUrl, {\n        method: 'PUT',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Compute stop failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n\n    if (response?.ok) {\n      const params = await response.json()\n      return params\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'Compute stop failed: ',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    LoggerInstance.error('Payload was:', payload)\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /** Get compute status for a specific jobId/documentId/owner.\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {string} consumerAddress The consumer ethereum address\n   * @param {string} jobId The ID of a compute job.\n   * @param {string} did The ID of the asset\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeStatus(\n    providerUri: string,\n    consumerAddress: string,\n    jobId?: string,\n    did?: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeStatusUrl = this.getEndpointURL(serviceEndpoints, 'computeStatus')\n      ? this.getEndpointURL(serviceEndpoints, 'computeStatus').urlPath\n      : null\n\n    let url = `?consumerAddress=${consumerAddress}`\n    url += (did && `&documentId=${this.noZeroX(did)}`) || ''\n    url += (jobId && `&jobId=${jobId}`) || ''\n\n    if (!computeStatusUrl) return null\n    let response\n    try {\n      response = await fetch(computeStatusUrl + url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Get compute status failed')\n      LoggerInstance.error(e)\n      throw new Error(e)\n    }\n    if (response?.ok) {\n      const params = await response.json()\n      return params\n    }\n    LoggerInstance.error(\n      'Get compute status failed:',\n      response.status,\n      response.statusText\n    )\n    if (response?.ok) {\n      const params = await response.json()\n      return params\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'Get compute status failed:',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /** Get compute result url\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {Signer} consumer consumer Signer wallet object\n   * @param {string} jobId The ID of a compute job.\n   * @param {number} index Result index\n   * @return {Promise<string>}\n   */\n  public async getComputeResultUrl(\n    providerUri: string,\n    consumer: Signer,\n    jobId: string,\n    index: number\n  ): Promise<string> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeResultUrl = this.getEndpointURL(serviceEndpoints, 'computeResult')\n      ? this.getEndpointURL(serviceEndpoints, 'computeResult').urlPath\n      : null\n\n    const nonce = (\n      (await this.getNonce(\n        providerUri,\n        await consumer.getAddress(),\n        null,\n        providerEndpoints,\n        serviceEndpoints\n      )) + 1\n    ).toString()\n    let signatureMessage = await consumer.getAddress()\n    signatureMessage += jobId\n    signatureMessage += index.toString()\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(consumer, signatureMessage)\n    if (!computeResultUrl) return null\n    let resultUrl = computeResultUrl\n    resultUrl += `?consumerAddress=${await consumer.getAddress()}`\n    resultUrl += `&jobId=${jobId}`\n    resultUrl += `&index=${index.toString()}`\n    resultUrl += `&nonce=${nonce}`\n    resultUrl += (signature && `&signature=${signature}`) || ''\n    return resultUrl\n  }\n\n  /** Deletes a compute job.\n   * @param {string} did asset did\n   * @param {Signer} consumer consumer Signer wallet object\n   * @param {string} jobId the compute job ID\n   * @param {string} providerUri The URI of the provider we want to query\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<ComputeJob | ComputeJob[]>}\n   */\n  public async computeDelete(\n    did: string,\n    consumer: Signer,\n    jobId: string,\n    providerUri: string,\n    signal?: AbortSignal\n  ): Promise<ComputeJob | ComputeJob[]> {\n    const providerEndpoints = await this.getEndpoints(providerUri)\n    const serviceEndpoints = await this.getServiceEndpoints(\n      providerUri,\n      providerEndpoints\n    )\n    const computeDeleteUrl = this.getEndpointURL(serviceEndpoints, 'computeDelete')\n      ? this.getEndpointURL(serviceEndpoints, 'computeDelete').urlPath\n      : null\n\n    const nonce = (\n      (await this.getNonce(\n        providerUri,\n        await consumer.getAddress(),\n        signal,\n        providerEndpoints,\n        serviceEndpoints\n      )) + 1\n    ).toString()\n\n    let signatureMessage = await consumer.getAddress()\n    signatureMessage += jobId || ''\n    signatureMessage += (did && `${this.noZeroX(did)}`) || ''\n    signatureMessage += nonce\n    const signature = await this.signProviderRequest(consumer, signatureMessage)\n    const payload = Object()\n    payload.documentId = this.noZeroX(did)\n    payload.consumerAddress = await consumer.getAddress()\n    payload.jobId = jobId\n    if (signature) payload.signature = signature\n\n    if (!computeDeleteUrl) return null\n    let response\n    try {\n      response = await fetch(computeDeleteUrl, {\n        method: 'DELETE',\n        body: JSON.stringify(payload),\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n    } catch (e) {\n      LoggerInstance.error('Delete compute job failed:')\n      LoggerInstance.error(e)\n      LoggerInstance.error('Payload was:', payload)\n      throw new Error('HTTP request failed calling Provider')\n    }\n    if (response?.ok) {\n      const params = await response.json()\n      return params\n    }\n    const resolvedResponse = await response.json()\n    LoggerInstance.error(\n      'Delete compute job failed:',\n      response.status,\n      response.statusText,\n      resolvedResponse\n    )\n    LoggerInstance.error('Payload was:', payload)\n    throw new Error(JSON.stringify(resolvedResponse))\n  }\n\n  /** Check for a valid provider at URL\n   * @param {String} url provider uri address\n   * @param {AbortSignal} signal abort signal\n   * @return {Promise<boolean>} valid or not\n   */\n  public async isValidProvider(url: string, signal?: AbortSignal): Promise<boolean> {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal\n      })\n      if (response?.ok) {\n        const params = await response.json()\n        if (params && (params.providerAddress || params.providerAddresses)) return true\n      }\n      return false\n    } catch (error) {\n      LoggerInstance.error(`Error validating provider: ${error.message}`)\n      return false\n    }\n  }\n\n  /**\n   * Private method that removes the leading 0x from a string.\n   * @param {string} input - The input string.\n   * @returns The transformed string.\n   */\n  private noZeroX(input: string): string {\n    return this.zeroXTransformer(input, false)\n  }\n\n  /**\n   * Private method that removes the leading 0x from a string.\n   * @param {string} input - The input string.\n   * @param {boolean} zeroOutput - Whether to include 0x in the output if the input is valid and zeroOutput is true.\n   * @returns The transformed string.\n   */\n  private zeroXTransformer(input = '', zeroOutput: boolean): string {\n    const { valid, output } = this.inputMatch(\n      input,\n      /^(?:0x)*([a-f0-9]+)$/i,\n      'zeroXTransformer'\n    )\n    return (zeroOutput && valid ? '0x' : '') + output\n  }\n\n  /**\n   * Private method that matches an input string against a regular expression and returns the first capture group.\n   * @param {string} input - The input string to match.\n   * @param {RegExp} regexp - The regular expression to match against.\n   * @param {string} conversorName - The name of the method calling this function.\n   * @returns An object with two properties: `valid` (a boolean indicating whether the input matched the regular expression) and `output` (the first capture group of the match, or the original input if there was no match).\n   */\n  private inputMatch(\n    input: string,\n    regexp: RegExp,\n    conversorName: string\n  ): { valid: boolean; output: string } {\n    if (typeof input !== 'string') {\n      LoggerInstance.debug('Not input string:')\n      LoggerInstance.debug(input)\n      throw new Error(`[${conversorName}] Expected string, input type: ${typeof input}`)\n    }\n    const match = input.match(regexp)\n    if (!match) {\n      LoggerInstance.warn(`[${conversorName}] Input transformation failed.`)\n      return { valid: false, output: input }\n    }\n    return { valid: true, output: match[1] }\n  }\n\n  /**\n   * Private method that fetches data from a URL using the GET method.\n   * @param {string} url - The URL to fetch data from.\n   * @returns A Promise that resolves to a Response object.\n   */\n  private async getData(url: string): Promise<Response> {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    })\n  }\n}\n\nexport const ProviderInstance = new Provider()\n"],"names":["Config","nodeUri","providerAddress","metadataCacheUri","providerUri","web3Provider","oceanTokenAddress","nftFactoryAddress","datatokensABI","fixedRateExchangeAddress","fixedRateExchangeAddressABI","dispenserAddress","dispenserABI","opfCommunityFeeCollector","sideStakingAddress","startBlock","verbose","authMessage","authTokenExpiration","parityUri","threshold","chainId","network","subgraphUri","explorerUri","oceanTokenSymbol","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","gasFeeMultiplier","veAllocate","veOCEAN","veDelegation","veFeeDistributor","veDelegationProxy","DFRewards","DFStrategyV1","veFeeEstimate","ZERO_ADDRESS","GASLIMIT_DEFAULT","MAX_UINT_256","FEE_HISTORY_NOT_SUPPORTED","setContractDefaults","contract","config","getFairGasPrice","signer","price","provider","getFeeData","gasPrice","x","ethers","BigNumber","from","toString","mul","toBigInt","getTokenDecimals","token","Contract","minAbi","decimals","unitsToAmount","amount","tokenDecimals","utils","formatUnits","amountToUnits","parseUnits","getEventFromTx","txReceipt","eventName","events","_txReceipt$events","filter","log","event","sendTx","estGas","functionToSend","args","getNetwork","feeHistory","overrides","maxPriorityFeePerGas","aggressiveFeePriorityFeePerGas","aggressiveFeePerGas","maxFeePerGas","Math","round","toNumber","Number","gasLimit","add","e","LogLevel","generateDtName","wordList","list","wordListDefault","random1","floor","random","adjectives","length","random2","nouns","indexNumber","adjective","replace","c","toUpperCase","noun","name","symbol","substring","generateDid","nftAddress","getAddress","sha256","getHash","data","downloadFileBrowser","url","xhr","XMLHttpRequest","responseType","open","onload","contentDispositionHeader","getResponseHeader","fileNameMatch","match","fileName","blobURL","window","URL","createObjectURL","response","a","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","send","downloadFile","index","fetch","ok","Error","filename","headers","get","split","pop","arrayBuffer","sleep","ms","Promise","resolve","setTimeout","Logger","constructor","logLevel","this","setLevel","bypass","dispatch","Infinity","debug","Verbose","Log","warn","Warn","error","verb","level","console","LoggerInstance","constant","inputs","outputs","type","payable","stateMutability","anonymous","indexed","signHash","message","messageHashBytes","arrayify","signedMessage","_legacySignMessage","substr","r","slice","s","v","approve","account","tokenAddress","spender","force","estimateGas","tokenContract","currentAllowence","allowance","Decimal","greaterThanOrEqualTo","amountFormatted","approveWei","allowanceWei","gt","result","transfer","recipient","trxReceipt","balance","balanceOf","PREDEFINED_ERRORS","datasets","invalid","algorithm","serviceId","missing","not_found","service_not_access_compute","main_service_compute","compute_services_not_in_same_provider","container","checksum_prefix","mising_entrypoint_image_checksum","documentId","did_not_found","transferTxId","missing_meta_documentId","not_algo","in_use_or_not_on_chain","meta_oneof_url_rawcode_remote","file_unavailable","not_trusted_algo_publisher","not_trusted_algo","no_publisherTrustedAlgorithms","algorithm_file_checksum_mismatch","algorithm_container_checksum_mismatch","no_raw_algo_allowed","order","fees_not_paid","output","getErrorMessage","err","JSON","parse","key","Object","keys","errorObject","orderAsset","asset","consumerAccount","datatoken","providerUrl","consumerAddress","consumeMarketOrderFee","providerFees","consumeMarketFixedSwapFee","datatokenIndex","serviceIndex","fixedRateIndex","consumeMarketFeeAddress","consumeMarketFeeAmount","consumeMarketFeeToken","stats","datatokens","address","id","services","templateIndex","getId","fixedRates","getFixedRates","dispensers","getDispensers","publishMarketFees","getPublishingMarketFee","pricingType","fees","ProviderInstance","initialize","providerFee","providerFeeAddress","providerFeeAmount","parseInt","providerFeeToken","datatokenAddress","orderParams","consumer","_providerFee","_consumeMarketFee","dispenser","Dispenser","dispenserTx","dispense","wait","startOrder","buyFromDispenserAndOrder","fre","FixedRateExchange","getFeesInfo","exchange","getExchange","baseTokenAmount","calcBaseInGivenDatatokensOut","exchangeId","publishMarketFeeAmount","freParams","exchangeContract","maxBaseTokenAmount","baseTokenAddress","baseToken","baseTokenDecimals","btDecimals","swapMarketFee","marketFeeAddress","publishMarketFeeAddress","tx","freTx","buyDatatokens","buyFromFreAndOrder","configHelperNetworksBase","configHelperNetworks","ConfigHelper","getAddressesFromEnv","customAddresses","configAddresses","FixedPrice","ERC721Factory","OPFCommunityFeeCollector","Ocean","process","env","AQUARIUS_URL","PROVIDER_URL","DefaultContractsAddresses","getConfig","infuraProjectId","filterBy","addresses","find","ADDRESS_FILE","fs","readFileSync","SmartContract","abi","getDefaultAbi","async","_this$config","getContract","Interface","stringify","SmartContractWithAddress","super","DispenserAbi","dtAdress","status2","status","active","owner","isMinter","maxTokens","maxBalance","allowedSwapper","dtAddress","create","activate","_this$config2","deactivate","_this$config3","newAllowedSwapper","setAllowedSwapper","_this$config4","destination","_this$config5","ownerWithdraw","_this$config6","String","greaterThan","FixedRateExchangeAbi","generateExchangeId","datatokenAmount","consumeMarketAddress","consumeMarketFee","consumeMarketFeeFormatted","dtAmountFormatted","dtDecimals","maxBtFormatted","buyDT","minBaseTokenAmount","minBtFormatted","sellDT","getNumberOfExchanges","newRate","setRate","toggleExchangeState","weiRate","getRate","dtSupply","getDTSupply","btSupply","getBTSupply","getAllowedSwapper","fixedRateExchange","outDT","calcBaseInGivenOutDT","marketFeeAmount","oceanFeeAmount","calcBaseOutGivenInDT","withMint","exchangeOwner","dtBalance","btBalance","fixedRate","opcFee","marketFee","marketFeeCollector","marketFeeAvailable","oceanFeeAvailable","getExchanges","isActive","toggleMintState","_this$config7","_this$config8","fixedrate","amountWei","collectBT","_this$config9","collectDT","_this$config10","collectMarketFee","_this$config11","collectOceanFee","_this$config12","opcCollector","router","newMarketFee","updateMarketFee","_this$config13","newMarketFeeCollector","updateMarketFeeCollector","_this$config14","Router","FactoryRouter","operations","buyDTBatch","isApprovedToken","isFixedRateContract","routerOwner","factory","getOwner","addApprovedToken","removeApprovedToken","addFixedRateContract","removeFixedRateContract","addDispenserContract","removeDispenserContract","getOPCFee","swapOceanFee","newSwapOceanFee","newSwapNonOceanFee","newConsumeFee","newProviderFee","updateOPCFee","Nft","ERC721Template","minter","paymentCollector","mpFeeAddress","feeToken","feeAmount","cap","getNftPermissions","deployERC20","nftContract","createERC20","manager","getNftOwner","addManager","removeManager","datatokenDeployer","addToCreateERC20List","removeFromCreateERC20List","metadataUpdater","addToMetadataList","updateMetadata","removeFromMetadataList","storeUpdater","addTo725StoreList","store","removeFrom725StoreList","cleanPermissions","nftOwner","nftReceiver","tokenId","tokenIdentifier","transferFrom","safeTransferFrom","metadataState","metadataDecryptorUrl","metadataDecryptorAddress","flags","metadataHash","metadataProofs","setMetaData","metadataAndTokenURI","sanitizedMetadataAndTokenURI","setMetaDataAndTokenURI","setMetaDataState","_this$config15","setTokenURI","_this$config16","ownerOf","getPermissions","getMetaData","isERC20Deployer","value","keyHash","keccak256","valueHex","hexlify","toUtf8Bytes","setNewData","_this$config17","getData","toUtf8String","tokenURI","Datatoken","ERC20Template","abiEnterprise","nft","ERC20TemplateEnterprise","dtContract","fixedRateParams","isDatatokenDeployer","allowedConsumer","createFixedRate","fixedRateAddress","datatokenDecimals","dispenserParams","createDispenser","toAddress","capAvailble","getCap","gte","mint","addMinter","removeMinter","paymentManager","addPaymentManager","removePaymentManager","isPaymentManager","getNFTAddress","isNftOwner","nftPermissions","setPaymentCollector","getPaymentCollector","transferWei","orderTxId","reuseOrder","freContractParams","getFreOrderParams","dispenserContract","setData","permissions","getERC721Address","publishMarketFeeToken","setPublishingMarketFee","publishingMarketFee","NftFactory","nftData","getCurrentNFTTemplateCount","getNFTTemplate","deployERC721Contract","transferable","getCurrentNFTCount","getCurrentTokenCount","getCurrentTemplateCount","getTokenTemplate","erc20List","erc721List","templateAddress","add721TokenTemplate","disable721TokenTemplate","reactivate721TokenTemplate","addTokenTemplate","getCurrentTokenTemplateCount","disableTokenTemplate","reactivateTokenTemplate","orders","startMultipleTokenOrder","nftCreateData","dtParams","ercCreateData","getErcCreationParams","createNftWithErc20","fixedData","getFreCreationParams","createNftWithErc20WithFixedRate","createNftWithErc20WithDispenser","feeTokenDecimals","strings","uints","bytess","fixedPriceAddress","VeOcean","veOceanABI","unlockTime","getToken","create_lock","deposit_for","increase_amount","increase_unlock_time","withdraw","userAddress","locked","untilLock","locked__end","totalSupply","VeFeeDistributor","veFeeABI","claim","claim_many","VeFeeEstimate","estimateClaim","veOcean","voting_escrow","VeAllocate","veAllocateABI","setAllocation","setBatchAllocation","getTotalAllocation","getveAllocation","DfRewards","dfRewardsABI","rewards","claimable","claimFor","userAddresses","amounts","i","allocate","DfStrategyV1","dfStrategyV1ABI","tokenAddresses","claimables","rewardsFormated","push","claimMultiple","Aquarius","aquariusURL","did","signal","path","method","json","txid","tries","ddo","valid","jsonResponse","hash","proof","validatorAddress","publicKey","errors","statusText","query","Provider","endpoints","getEndpointURL","servicesEndpoints","serviceName","providerEndpoint","serviceEndpoints","urlPath","providerEndpoints","getEndpoints","getServiceEndpoints","nonce","consumerMessage","solidityKeccak256","getChainId","signMessage","text","withChecksum","checksum","files","_response","results","resolvedResponse","file","_response2","_this$getEndpointURL","_response3","Array","isArray","fileIndex","userCustomParameters","computeEnv","validUntil","initializeUrl","encodeURI","_response4","assets","accountId","providerData","compute","_response5","downloadUrl","getNonce","consumeUrl","signProviderRequest","dataset","additionalDatasets","computeStartUrl","signatureMessage","signature","payload","environment","_response6","jobId","computeStopUrl","noZeroX","_response7","computeStatusUrl","_response8","_response9","computeResultUrl","resultUrl","computeDeleteUrl","_response10","params","providerAddresses","input","zeroXTransformer","zeroOutput","inputMatch","regexp","conversorName"],"mappings":"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"}