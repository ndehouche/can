import t from"@oceanprotocol/contracts/addresses/address.json";import e from"fs";import{ethers as a}from"ethers";import i from"crypto-js/sha256";import r from"cross-fetch";import n from"decimal.js";import s from"@oceanprotocol/contracts/artifacts/contracts/pools/dispenser/Dispenser.sol/Dispenser.json";import o from"@oceanprotocol/contracts/artifacts/contracts/pools/fixedRate/FixedRateExchange.sol/FixedRateExchange.json";import c from"@oceanprotocol/contracts/artifacts/contracts/pools/FactoryRouter.sol/FactoryRouter.json";import l from"@oceanprotocol/contracts/artifacts/contracts/templates/ERC20Template.sol/ERC20Template.json";import u from"@oceanprotocol/contracts/artifacts/contracts/templates/ERC20TemplateEnterprise.sol/ERC20TemplateEnterprise.json";import d from"@oceanprotocol/contracts/artifacts/contracts/templates/ERC721Template.sol/ERC721Template.json";import h from"@oceanprotocol/contracts/artifacts/contracts/ERC721Factory.sol/ERC721Factory.json";import g from"@oceanprotocol/contracts/artifacts/contracts/ve/veOCEAN.vy/veOCEAN.json";import p from"@oceanprotocol/contracts/artifacts/contracts/ve/veFeeDistributor.vy/veFeeDistributor.json";import m from"@oceanprotocol/contracts/artifacts/contracts/ve/veFeeEstimate.vy/veFeeEstimate.json";import w from"@oceanprotocol/contracts/artifacts/contracts/ve/veAllocate.sol/veAllocate.json";import f from"@oceanprotocol/contracts/artifacts/contracts/df/DFRewards.sol/DFRewards.json";import v from"@oceanprotocol/contracts/artifacts/contracts/df/DFStrategyV1.sol/DFStrategyV1.json";class y{constructor(){this.nodeUri=void 0,this.providerAddress=void 0,this.metadataCacheUri=void 0,this.providerUri=void 0,this.web3Provider=void 0,this.oceanTokenAddress=void 0,this.nftFactoryAddress=void 0,this.datatokensABI=void 0,this.fixedRateExchangeAddress=void 0,this.fixedRateExchangeAddressABI=void 0,this.dispenserAddress=void 0,this.dispenserABI=void 0,this.opfCommunityFeeCollector=void 0,this.sideStakingAddress=void 0,this.startBlock=void 0,this.verbose=void 0,this.authMessage=void 0,this.authTokenExpiration=void 0,this.parityUri=void 0,this.threshold=void 0,this.chainId=void 0,this.network=void 0,this.subgraphUri=void 0,this.explorerUri=void 0,this.oceanTokenSymbol=void 0,this.transactionBlockTimeout=void 0,this.transactionConfirmationBlocks=void 0,this.transactionPollingTimeout=void 0,this.gasFeeMultiplier=void 0,this.veAllocate=void 0,this.veOCEAN=void 0,this.veDelegation=void 0,this.veFeeDistributor=void 0,this.veDelegationProxy=void 0,this.DFRewards=void 0,this.DFStrategyV1=void 0,this.veFeeEstimate=void 0}}function T(){return T=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(t[i]=a[i])}return t},T.apply(this,arguments)}const b="0x0000000000000000000000000000000000000000",F=1e6,k="115792089237316195423570985008687907853269984665640564039457584007913129639934",E="Returned error: Method eth_feeHistory not supported.";function C(t,e){return t}async function x(t,e){const i=await(await t.provider.getFeeData()).gasPrice,r=a.BigNumber.from(i.toString());return e?r.mul(e).toBigInt().toString(10):r.toString()}async function M(t,e){return new a.Contract(e,$,t).decimals()}async function D(t,e,i,r){let n=r||await M(t,e);return"0"===n&&(n=18),a.utils.formatUnits(i,n).toString()}async function A(t,e,i,r){let n=r||await M(t,e);return"0"===n&&(n=18),a.utils.parseUnits(i,n).toString()}function U(t,e){var a;return null==t||null==(a=t.events)?void 0:a.filter(t=>t.event===e)[0]}async function R(t,e,a,i,...r){const{chainId:n}=await e.provider.getNetwork(),s=await e.provider.getFeeData();let o;if(s.maxPriorityFeePerGas){let t=s.maxPriorityFeePerGas.toString(),e=s.maxFeePerGas.toString();a>1&&(t=Math.round(s.maxPriorityFeePerGas.toNumber()*a).toString(),e=Math.round(s.maxFeePerGas.toNumber()*a).toString()),o={maxPriorityFeePerGas:(80001===n||137===n)&&Number(t)<3e10?3e10:Number(t),maxFeePerGas:(80001===n||137===n)&&Number(e)<3e10?3e10:Number(e)}}else o={gasPrice:s.gasPrice};o.gasLimit=t.add(2e4);try{return await i(...r,o)}catch(t){return null}}var O,S={nouns:["Crab","Fish","Seal","Octopus","Shark","Seahorse","Walrus","Starfish","Whale","Orca","Penguin","Jellyfish","Squid","Lobster","Pelican","Shrimp","Oyster","Clam","Seagull","Dolphin","Shell","Cormorant","Otter","Anemone","Turtle","Coral","Ray","Barracuda","Krill","Anchovy","Angelfish","Barnacle","Clownfish","Cod","Cuttlefish","Eel","Fugu","Herring","Haddock","Ling","Mackerel","Manatee","Narwhal","Nautilus","Plankton","Porpoise","Prawn","Pufferfish","Swordfish","Tuna"],adjectives:["adamant","adroit","amatory","ambitious","amused","animistic","antic","arcadian","artistic","astonishing","astounding","baleful","bellicose","bilious","blissful","boorish","brave","breathtaking","brilliant","calamitous","caustic","cerulean","clever","charming","comely","competent","concomitant","confident","contumacious","corpulent","crapulous","creative","dazzling","dedicated","defamatory","delighted","delightful","determined","didactic","dilatory","dowdy","efficacious","effulgent","egregious","empowered","endemic","enthusiastic","equanimous","exceptional","execrable","fabulous","fantastic","fastidious","feckless","fecund","friable","fulsome","garrulous","generous","gentle","guileless","gustatory","heuristic","histrionic","hubristic","incendiary","incredible","insidious","insolent","inspired","intransigent","inveterate","invidious","invigorated","irksome","jejune","juicy","jocular","joyful","judicious","kind","lachrymose","limpid","loquacious","lovely","luminous","mannered","marvelous","mendacious","meretricious","minatory","mordant","motivated","munificent","nefarious","noxious","obtuse","optimistic","parsimonious","pendulous","pernicious","pervasive","petulant","passionate","phenomenal","platitudinous","pleasant","powerful","precipitate","propitious","puckish","querulous","quiescent","rebarbative","recalcitant","redolent","rhadamanthine","risible","ruminative","sagacious","salubrious","sartorial","sclerotic","serpentine","smart","spasmodic","strident","stunning","stupendous","taciturn","tactful","tasty","tenacious","tremendous","tremulous","trenchant","turbulent","turgid","ubiquitous","uxorious","verdant","vibrant","voluble","voracious","wheedling","withering","wonderful","zealous"]};function P(t){const e=t||S,a=Math.floor(Math.random()*e.adjectives.length),i=Math.floor(Math.random()*e.nouns.length),r=Math.floor(100*Math.random()),n=e.adjectives[a].replace(/^\w/,t=>t.toUpperCase()),s=e.nouns[i].replace(/^\w/,t=>t.toUpperCase());return{name:`${n} ${s} Token`,symbol:`${(n.substring(0,3)+s.substring(0,3)).toUpperCase()}-${r}`}}function I(t,e){return t=a.utils.getAddress(t),`did:op:${i(t+e.toString(10)).toString()}`}function N(t){return i(t).toString()}function G(t){const e=new XMLHttpRequest;e.responseType="blob",e.open("GET",t),e.onload=()=>{const t=e.getResponseHeader("content-disposition"),a=null==t?void 0:t.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/),i=a&&a[1]?a[1]:"file",r=window.URL.createObjectURL(e.response),n=document.createElement("a");n.href=r,n.setAttribute("download",i),document.body.appendChild(n),n.click(),n.remove(),window.URL.revokeObjectURL(r)},e.send()}async function _(t,e){const a=await r(t);if(!a.ok)throw new Error("Response error.");let i;try{i=a.headers.get("content-disposition").match(/attachment;filename=(.+)/)[1]}catch(a){try{i=t.split("/").pop()}catch(t){i=`file${e}`}}return{data:await a.arrayBuffer(),filename:i}}async function j(t){return new Promise(e=>{setTimeout(e,t)})}!function(t){t[t.None=-1]="None",t[t.Error=0]="Error",t[t.Warn=1]="Warn",t[t.Log=2]="Log",t[t.Verbose=3]="Verbose"}(O||(O={}));class L{constructor(t){this.logLevel=void 0,this.logLevel=t,this.logLevel=t||O.Error}setLevel(t){this.logLevel=t}bypass(...t){this.dispatch("log",-Infinity,...t)}debug(...t){this.dispatch("debug",O.Verbose,...t)}log(...t){this.dispatch("log",O.Log,...t)}warn(...t){this.dispatch("warn",O.Warn,...t)}error(...t){this.dispatch("error",O.Error,...t)}dispatch(t,e,...a){this.logLevel>=e&&console[t](...a)}}const B=new L,$=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{payable:!0,stateMutability:"payable",type:"fallback"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"}];async function q(t,e){const i=a.utils.arrayify(e);let r=await t._legacySignMessage(i);r=r.substr(2);const n="0x"+r.slice(0,64),s="0x"+r.slice(64,128);let o="0x"+r.slice(128,130);return"0x00"===o&&(o="0x1b"),"0x01"===o&&(o="0x1c"),{v:o,r:n,s}}async function W(t,e,i,r,s,o,c=!1,l,u){const d=new a.Contract(r,$,t);if(!c){const e=await V(t,r,i,s);if(new n(e).greaterThanOrEqualTo(new n(o)))return new n(e).toNumber()}const h=await A(t,r,o,l),g=await d.estimateGas.approve(s,h);return u?new n(g.toString()):await R(g,t,null==e?void 0:e.gasFeeMultiplier,d.approve,s,h)}async function J(t,e,i,r,n,s,o=!1,c){const l=new a.Contract(r,$,t);if(!o){const e=await H(t,r,i,n);if(a.BigNumber.from(e).gt(a.BigNumber.from(s)))return a.BigNumber.from(e)}let u=null;const d=await l.estimateGas.approve(n,s);if(c)return d;try{u=await R(d,t,null==e?void 0:e.gasFeeMultiplier,l.approve,n,s)}catch(t){B.error(`ERROR: Failed to approve spender to spend tokens : ${t.message}`)}return u}async function z(t,e,i,r,n,s){const o=new a.Contract(i,$,t),c=await A(t,i,n),l=await o.estimateGas.transfer(r,c);return s?l:await R(l,t,null==e?void 0:e.gasFeeMultiplier,o.transfer,r,c)}async function V(t,e,i,r,n){const s=new a.Contract(e,$,t),o=await s.allowance(i,r);return await D(t,e,o,n)}async function Z(t,e,i,r){const n=new a.Contract(e,$,t),s=await n.balanceOf(i);return await D(t,e,s,r)}async function H(t,e,i,r){const n=new a.Contract(e,$,t);return await n.allowance(i,r)}async function X(t,e){const i=new a.Contract(e,$,t);return await i.decimals()}const Q={datasets:{invalid:"Datasets is not a list, as expected"},algorithm:{serviceId:{missing:"The serviceId key is missing from the algorithm s DDO.",not_found:"The provided serviceId does not exist.",service_not_access_compute:"Service type is neither access, nor compute.",main_service_compute:"If the main service is not compute for this asset when calling initialize endpoint.",compute_services_not_in_same_provider:"Files attached to the compute service are not decrypted by the correct provider. This occurs when both asset and algorithm are requested by their compute service which cannot be decrypted by a single provider as how it is supposed to be."},container:{checksum_prefix:"Container checksum does not start with the prefix sha256:.",mising_entrypoint_image_checksum:"Either entrypoint, either image, or either checksum are missing from the container dictionary from the algorithm s DDO."},documentId:{did_not_found:"The algorithm s DID could not be retrieved from the metadata store, because the algorithm asset does not exist.",missing:"The documentId key is missing from the algorithm s DDO."},transferTxId:{missing:"The transferTxId key is missing from the algorithm s DDO."},missing_meta_documentId:"Either algorithm metadata, or algorithm DID are missing.",did_not_found:"Either algorithm metadata, or algorithm DID are missing.",not_algo:"Either algorithm metadata, or algorithm DID are missing.",in_use_or_not_on_chain:"Either algorithm metadata, or algorithm DID are missing.",meta_oneof_url_rawcode_remote:"Either algorithm metadata, or algorithm DID are missing.",file_unavailable:"One possibility is that the asset could not be retrieved from Aquariuss database. Otherwise, there are issues related to services"},error:{not_trusted_algo_publisher:"The owner of the algorithm's DDO is not a trusted algorithms publishers list.",not_trusted_algo:"The algorithm's DID is not in the asset's trusted algorithms dictionary. ",no_publisherTrustedAlgorithms:"The algorithm's key publisherTrustedAlgorithms does not exist in the algorithm's DDO.",algorithm_file_checksum_mismatch:"filesChecksum from the algorithm's DDO is invalid.",algorithm_container_checksum_mismatch:"The containerChecksum from the algorithm's DDO is invalid.",no_raw_algo_allowed:"The asset does not allow raw algorithms to be run on it.","Asset malformed":"The asset published on chain is malformed, missing some required keys or not compliant with our schemas.","Asset is not consumable.":"Assets metadata status is not in the range of valid status codes for assets. The recognized states for the metadata are defined on our docs.","DID is not a valid algorithm.":"Either the algorithm assets DID is incorrectly typed, either the algorithm timeout expired.","Compute environment does not exist.":"The compute environment provided by the user does not exist, it is not served by our compute-to-data feature. The user can use get_c2d_environments to check the list of available compute environments.","The validUntil value is not correct.":"validUntil value is most probably expired.","Cannot resolve DID":"The dataset DID does not exist in the Metadata store.","Invalid serviceId":"The serviceId of that dataset is not correct.","Unable to get dataset files":"The files of that dataset could not be decrypted or retrieved","cannot decrypt files for this service.":"The files of that dataset could not be decrypted due to the fact that file object, which contains the structure and the type of specific file, is missing from the validation part.","Unsupported type ":"The file object type is not supported by Provider.","malformed file object":"The file object structure is invalid and does not contain the wanted information for the specific file."},order:{fees_not_paid:" Provider fees are not paid."},output:{invalid:"The algorithms validation after the build stage has not been decoded properly as a dictionary."}};function K(t){try{const e=JSON.parse(t),a=Object.keys(e)[0];if("error"===a){const t=e[a];return Q[a][t]||`Provider request failed: ${t}`}{const t=e[a];return`${e[Object.keys(e)[1]]} : ${t}`}}catch(e){return B.error("[getErrorMessage] error: ",e),t}}async function Y(t,e,a,i,r,s,o,c,l="0",u=0,d=0,h=0){if(o||(o={consumeMarketFeeAddress:"0x0000000000000000000000000000000000000000",consumeMarketFeeAmount:"0",consumeMarketFeeToken:t.stats.price.tokenAddress||"0x0000000000000000000000000000000000000000"}),!t.datatokens[u].address)throw new Error(`The datatoken with index: ${u} does not exist for the asset with did: ${t.id}`);if(!t.services[d].id)throw new Error(`There is no service with index: ${d} defined for the asset with did: ${t.id}`);const g=await i.getId(t.datatokens[u].address),p=await i.getFixedRates(t.datatokens[u].address),m=await i.getDispensers(t.datatokens[u].address),w=await i.getPublishingMarketFee(t.datatokens[u].address),f=p.length>0?"fixed":m.length>0?"free":"NOT_ALLOWED",v=c||(await yt.initialize(t.id,t.services[d].id,0,await e.getAddress(),r||a.providerUri)).providerFee;if(v&&v.providerFeeAddress!==b&&v.providerFeeAmount&&parseInt(v.providerFeeAmount)>0)try{await J(e,a,await e.getAddress(),v.providerFeeToken,t.services[0].datatokenAddress,v.providerFeeAmount)}catch(t){throw new Error(`Failed to approve provider fee token ${v.providerFeeToken}`)}const y={consumer:s||await e.getAddress(),serviceIndex:d,_providerFee:v,_consumeMarketFee:o};switch(f){case"free":if(1===g){const r=new nt(a.dispenserAddress,e),n=await r.dispense(t.datatokens[u].address,"1",await e.getAddress());if(!n)throw new Error("Failed to dispense !");return await n.wait(),await i.startOrder(t.datatokens[u].address,y.consumer,y.serviceIndex,y._providerFee,y._consumeMarketFee)}if(2===g)return await i.buyFromDispenserAndOrder(t.services[d].datatokenAddress,y,a.dispenserAddress);break;case"fixed":{const r=new st(a.fixedRateExchangeAddress,e);if(!p[h].id)throw new Error(`There is no fixed rate exchange with index: ${d} for the asset with did: ${t.id}`);const s=await r.getFeesInfo(p[h].id),c=await r.getExchange(p[h].id),{baseTokenAmount:m}=await r.calcBaseInGivenDatatokensOut(s.exchangeId,"1",o.consumeMarketFeeAmount),f=new n(+m||0).add(new n(o.consumeMarketFeeAmount||0)).add(new n(+w.publishMarketFeeAmount||0)).toString(),v={exchangeContract:a.fixedRateExchangeAddress,exchangeId:s.exchangeId,maxBaseTokenAmount:f,baseTokenAddress:c.baseToken,baseTokenDecimals:parseInt(c.btDecimals)||18,swapMarketFee:l,marketFeeAddress:w.publishMarketFeeAddress};if(1===g){const n=await W(e,a,await e.getAddress(),c.baseToken,a.fixedRateExchangeAddress,f,!1);if(!("number"!=typeof n?await n.wait():n))throw new Error(`Failed to appove ${c.baseToken} !`);const s=await r.buyDatatokens(c.exchangeId,"1",f,w.publishMarketFeeAddress,l);if(!await s.wait())throw new Error("Failed to buy datatoken from fixed rate!");return await i.startOrder(t.datatokens[u].address,y.consumer,y.serviceIndex,y._providerFee,y._consumeMarketFee)}if(2===g){const r=await W(e,a,await e.getAddress(),c.baseToken,t.datatokens[u].address,f,!1);if(!("number"!=typeof r?await r.wait():r))return;return await i.buyFromFreAndOrder(t.datatokens[u].address,y,v)}break}default:throw new Error("Pricing schema not supported !")}}const tt={chainId:null,network:"unknown",metadataCacheUri:"https://v4.aquarius.oceanprotocol.com",nodeUri:"http://127.0.0.1:8545",providerUri:"https://v4.provider.oceanprotocol.com",subgraphUri:null,explorerUri:null,oceanTokenAddress:null,oceanTokenSymbol:"OCEAN",fixedRateExchangeAddress:null,dispenserAddress:null,startBlock:0,transactionBlockTimeout:50,transactionConfirmationBlocks:1,transactionPollingTimeout:750,gasFeeMultiplier:1},et=[T({},tt),T({},tt,{chainId:8996,network:"development",metadataCacheUri:"http://172.15.0.5:5000",providerUri:"http://172.15.0.4:8030",subgraphUri:"https://172.15.0.15:8000"}),T({},tt,{chainId:5,network:"goerli",nodeUri:"https://goerli.infura.io/v3",subgraphUri:"https://v4.subgraph.goerli.oceanprotocol.com",explorerUri:"https://goerli.etherscan.io",gasFeeMultiplier:1.1}),T({},tt,{chainId:11155111,network:"sepolia",nodeUri:"https://sepolia.infura.io/v3",subgraphUri:"https://v4.subgraph.sepolia.oceanprotocol.com",explorerUri:"https://sepolia.etherscan.io",gasFeeMultiplier:1.1}),T({},tt,{chainId:1,network:"mainnet",nodeUri:"https://mainnet.infura.io/v3",subgraphUri:"https://v4.subgraph.mainnet.oceanprotocol.com",explorerUri:"https://etherscan.io",startBlock:11105459,transactionBlockTimeout:150,transactionConfirmationBlocks:5,transactionPollingTimeout:1750,gasFeeMultiplier:1.05}),T({},tt,{chainId:137,network:"polygon",nodeUri:"https://polygon-mainnet.infura.io/v3",subgraphUri:"https://v4.subgraph.polygon.oceanprotocol.com",explorerUri:"https://polygonscan.com",oceanTokenSymbol:"mOCEAN",gasFeeMultiplier:1.6}),T({},tt,{chainId:2021e3,network:"gaiaxtestnet",nodeUri:"https://rpc.gaiaxtestnet.oceanprotocol.com",providerUri:"https://v4.provider.gaiaxtestnet.oceanprotocol.com",subgraphUri:"https://v4.subgraph.gaiaxtestnet.oceanprotocol.com",explorerUri:"https://blockscout.gaiaxtestnet.oceanprotocol.com"}),T({},tt,{chainId:80001,network:"mumbai",nodeUri:"https://polygon-mumbai.infura.io/v3",subgraphUri:"https://v4.subgraph.mumbai.oceanprotocol.com",explorerUri:"https://mumbai.polygonscan.com",gasFeeMultiplier:1.1}),T({},tt,{chainId:56,network:"bsc",nodeUri:"https://bsc-dataseed.binance.org",subgraphUri:"https://v4.subgraph.bsc.oceanprotocol.com",explorerUri:"https://bscscan.com/",gasFeeMultiplier:1.05}),T({},tt,{chainId:246,network:"energyweb",nodeUri:"https://rpc.energyweb.org",subgraphUri:"https://v4.subgraph.energyweb.oceanprotocol.com",explorerUri:"https://explorer.energyweb.org",gasFeeMultiplier:1.05}),T({},tt,{chainId:1285,network:"moonriver",nodeUri:"https://moonriver.api.onfinality.io/public",subgraphUri:"https://v4.subgraph.moonriver.oceanprotocol.com",explorerUri:"https://moonriver.moonscan.io/",gasFeeMultiplier:1.05}),T({},tt,{chainId:100,network:"gen-x-testnet",nodeUri:"https://rpc.genx.minimal-gaia-x.eu",metadataCacheUri:"https://aquarius.v4.delta-dao.com",providerUri:"https://provider.v4.genx.delta-dao.com",subgraphUri:"https://subgraph.v4.genx.minimal-gaia-x.eu",explorerUri:"https://explorer.genx.minimal-gaia-x.eu/",gasFeeMultiplier:1}),T({},tt,{chainId:10,network:"optimism",nodeUri:"https://mainnet.optimism.io",subgraphUri:"https://v4.subgraph.optimism.oceanprotocol.com",explorerUri:"https://optimistic.etherscan.io/",gasFeeMultiplier:1.1}),T({},tt,{chainId:11155420,network:"optimism_sepolia",nodeUri:"https://sepolia.optimism.io",subgraphUri:"https://v4.subgraph.optimism-sepolia.oceanprotocol.com",explorerUri:"https://sepolia-optimism.etherscan.io/",gasFeeMultiplier:1.1})];class at{getAddressesFromEnv(e,a){let i;if(a&&a[e]){const{FixedPrice:t,Dispenser:r,ERC721Factory:n,OPFCommunityFeeCollector:s,Ocean:o,chainId:c,startBlock:l,veAllocate:u,veOCEAN:d,veDelegation:h,veFeeDistributor:g,veDelegationProxy:p,DFRewards:m,DFStrategyV1:w,veFeeEstimate:f}=a[e];i=T({nftFactoryAddress:n,opfCommunityFeeCollector:s,fixedRateExchangeAddress:t,dispenserAddress:r,oceanTokenAddress:o,chainId:c,startBlock:l,veAllocate:u,veOCEAN:d,veDelegation:h,veFeeDistributor:g,veDelegationProxy:p,DFRewards:m,DFStrategyV1:w,veFeeEstimate:f},process.env.AQUARIUS_URL&&{metadataCacheUri:process.env.AQUARIUS_URL},process.env.PROVIDER_URL&&{providerUri:process.env.PROVIDER_URL})}else if(t[e]){const{FixedPrice:a,Dispenser:r,OPFCommunityFeeCollector:n,ERC721Factory:s,Ocean:o,chainId:c,startBlock:l,veAllocate:u,veOCEAN:d,veDelegation:h,veFeeDistributor:g,veDelegationProxy:p,DFRewards:m,DFStrategyV1:w,veFeeEstimate:f}=t[e];i=T({nftFactoryAddress:s,opfCommunityFeeCollector:n,fixedRateExchangeAddress:a,dispenserAddress:r,oceanTokenAddress:o,chainId:c,startBlock:l,veAllocate:u,veOCEAN:d,veDelegation:h,veFeeDistributor:g,veDelegationProxy:p,DFRewards:m,DFStrategyV1:w,veFeeEstimate:f},process.env.AQUARIUS_URL&&{metadataCacheUri:process.env.AQUARIUS_URL},process.env.PROVIDER_URL&&{providerUri:process.env.PROVIDER_URL})}return i}getConfig(t,a){const i="string"==typeof t?"network":"chainId";let r,n=et.find(e=>e[i]===t);if(!n)return B.error(`No config found for given network '${t}'`),null;try{r=process.env.ADDRESS_FILE?JSON.parse(e.readFileSync(process.env.ADDRESS_FILE,"utf8")):null}catch(t){console.log(t),r=null}return n=T({},n,this.getAddressesFromEnv(n.network,r)),T({},n,{nodeUri:a?`${n.nodeUri}/${a}`:n.nodeUri})}}class it{constructor(t,e,a,i){this.signer=void 0,this.config=void 0,this.abi=void 0,this.signer=t,this.config=a||(new at).getConfig(e||"unknown"),this.abi=i||this.getDefaultAbi()}async amountToUnits(t,e,a){return A(this.signer,t,e,a)}async unitsToAmount(t,e,a){return D(this.signer,t,e,a)}async getFairGasPrice(){var t;return x(this.signer,null==(t=this.config)?void 0:t.gasFeeMultiplier)}getContract(t,e){return C(new a.Contract(t,new a.utils.Interface(JSON.stringify(e||this.abi)),this.signer))}}class rt extends it{constructor(t,e,a,i,r){super(e,a,i,r),this.address=void 0,this.contract=void 0,this.address=t,this.contract=this.getContract(this.address)}}class nt extends rt{getDefaultAbi(){return s.abi}async status(t){const e=await this.contract.status(t);if(!e)throw new Error("Np dispenser found for the given datatoken address");return{active:e[0],owner:e[1],isMinter:e[2],maxTokens:await this.unitsToAmount(null,e[3],18),maxBalance:await this.unitsToAmount(null,e[4],18),balance:await this.unitsToAmount(null,e[5],18),allowedSwapper:e[6]}}async create(t,e,a,i,r,n){var s;const o=await this.contract.estimateGas.create(t,this.amountToUnits(null,a,18),this.amountToUnits(null,i,18),e,r);return n?o:await R(o,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,this.contract.create,t,this.amountToUnits(null,a,18),this.amountToUnits(null,i,18),e,r)}async activate(t,e,a,i){var r;const n=await this.contract.estimateGas.activate(t,this.amountToUnits(null,e,18),this.amountToUnits(null,a,18));return i?n:await R(n,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.activate,t,this.amountToUnits(null,e,18),this.amountToUnits(null,a,18))}async deactivate(t,e){var a;const i=await this.contract.estimateGas.deactivate(t);return e?i:await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.deactivate,t)}async setAllowedSwapper(t,e,a){var i;const r=await this.contract.estimateGas.setAllowedSwapper(t,e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.setAllowedSwapper,t,e)}async dispense(t,e="1",a,i){var r;const n=await this.contract.estimateGas.dispense(t,this.amountToUnits(null,e,18),a);return i?n:await R(n,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.dispense,t,this.amountToUnits(null,e,18),a)}async ownerWithdraw(t,e){var a;const i=await this.contract.estimateGas.ownerWithdraw(t);return e?i:await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.ownerWithdraw,t)}async isDispensable(t,e,a,i="1"){const r=await this.status(t);return!(!r||!1===r.active||new n(await e.balance(t,a)).greaterThanOrEqualTo(r.maxBalance)||new n(String(i)).greaterThan(r.maxTokens)||!new n(r.balance).greaterThanOrEqualTo(i)&&!0!==r.isMinter)}}class st extends rt{getDefaultAbi(){return o.abi}async generateExchangeId(t,e){return await this.contract.generateExchangeId(t,e)}async buyDatatokens(t,e,a,i=b,r="0",n){var s;const o=await this.getExchange(t),c=await this.amountToUnits(null,r,18),l=await this.amountToUnits(o.datatoken,e,+o.dtDecimals),u=await this.amountToUnits(o.baseToken,a,+o.btDecimals),d=await this.contract.estimateGas.buyDT(t,l,u,i,c);return n?d:await R(d,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,this.contract.buyDT,t,l,u,i,c)}async sellDatatokens(t,e,a,i=b,r="0",n){var s;const o=await this.getExchange(t),c=await this.amountToUnits(null,r,18),l=await this.amountToUnits(o.datatoken,e,+o.dtDecimals),u=await this.amountToUnits(o.baseToken,a,+o.btDecimals),d=await this.contract.estimateGas.sellDT(t,l,u,i,c);return n?d:await R(d,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,this.contract.sellDT,t,l,u,i,c)}async getNumberOfExchanges(){return await this.contract.getNumberOfExchanges()}async setRate(t,e,a){var i;const r=await this.contract.estimateGas.setRate(t,await this.amountToUnits(null,e,18));return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.setRate,t,await this.amountToUnits(null,e,18))}async setAllowedSwapper(t,e,a){var i;const r=await this.contract.estimateGas.setAllowedSwapper(t,e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.setAllowedSwapper,t,e)}async activate(t,e){var a;const i=await this.getExchange(t);if(!i)return null;if(!0===i.active)return null;const r=await this.contract.estimateGas.toggleExchangeState(t);return e?r:await R(r,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.toggleExchangeState,t)}async deactivate(t,e){var a;const i=await this.getExchange(t);if(!i)return null;if(!1===i.active)return null;const r=await this.contract.estimateGas.toggleExchangeState(t);return e?r:await R(r,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.toggleExchangeState,t)}async getRate(t){const e=await this.contract.getRate(t);return await this.unitsToAmount(null,e,18)}async getDatatokenSupply(t){const e=await this.contract.getDTSupply(t),a=await this.getExchange(t);return await this.unitsToAmount(a.datatoken,e,+a.dtDecimals)}async getBasetokenSupply(t){const e=await this.contract.getBTSupply(t),a=await this.getExchange(t);return await this.unitsToAmount(a.baseToken,e,+a.btDecimals)}async getAllowedSwapper(t){return await this.contract.getAllowedSwapper(t)}async calcBaseInGivenDatatokensOut(t,e,a="0"){const i=await this.getExchange(t),r=await this.contract.calcBaseInGivenOutDT(t,await this.amountToUnits(i.datatoken,e,+i.dtDecimals),await this.amountToUnits(null,a,18));return{baseTokenAmount:await this.unitsToAmount(i.baseToken,r.baseTokenAmount,+i.btDecimals),marketFeeAmount:await this.unitsToAmount(i.baseToken,r.publishMarketFeeAmount,+i.btDecimals),oceanFeeAmount:await this.unitsToAmount(i.baseToken,r.oceanFeeAmount,+i.btDecimals),consumeMarketFeeAmount:await this.unitsToAmount(i.baseToken,r.consumeMarketFeeAmount,+i.btDecimals)}}async getAmountBasetokensOut(t,e,a="0"){const i=await this.getExchange(t),r=await this.contract.calcBaseOutGivenInDT(t,await this.amountToUnits(i.datatoken,e,+i.dtDecimals),await this.amountToUnits(null,a,18));return await this.unitsToAmount(i.baseToken,r[0],+i.btDecimals)}async getExchange(t){const e=await this.contract.getExchange(t);return{active:e.active,datatoken:e.datatoken,baseToken:e.baseToken,withMint:e.withMint,exchangeOwner:e.exchangeOwner,allowedSwapper:e.allowedSwapper,dtDecimals:e.dtDecimals.toString(),btDecimals:e.btDecimals.toString(),dtBalance:await this.unitsToAmount(e.datatoken,e.dtBalance,+e.dtDecimals),btBalance:await this.unitsToAmount(e.baseToken,e.btBalance,+e.btDecimals),dtSupply:await this.unitsToAmount(e.datatoken,e.dtSupply,+e.dtDecimals),btSupply:await this.unitsToAmount(e.baseToken,e.btSupply,+e.btDecimals),fixedRate:await this.unitsToAmount(null,e.fixedRate,18),exchangeId:t}}async getFeesInfo(t){const e=await this.contract.getFeesInfo(t),a=await this.getExchange(t);return{opcFee:await this.unitsToAmount(null,e.opcFee.toString(),18),marketFee:await this.unitsToAmount(null,e.marketFee.toString(),18),marketFeeCollector:e.marketFeeCollector,marketFeeAvailable:await this.unitsToAmount(a.baseToken,e.marketFeeAvailable,+a.btDecimals),oceanFeeAvailable:await this.unitsToAmount(a.baseToken,e.oceanFeeAvailable,+a.btDecimals),exchangeId:t}}async getExchanges(){return await this.contract.getExchanges()}async isActive(t){return await this.contract.isActive(t)}async activateMint(t,e){var a;const i=await this.getExchange(t);if(!i)return null;if(!0===i.withMint)return null;const r=await this.contract.estimateGas.toggleMintState(t,!0);return e?r:await R(r,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.toggleMintState,t,!0)}async deactivateMint(t,e){var a;const i=await this.getExchange(t);if(!i)return null;if(!1===i.withMint)return null;const r=await this.contract.estimateGas.toggleMintState(t,!1);return e?r:await R(r,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.toggleMintState,t,!1)}async collectBasetokens(t,e,a){var i;if(!await this.getExchange(t))return null;const r=await this.contract.getExchange(t),n=await this.amountToUnits(r.baseToken,e,+r.btDecimals),s=await this.contract.estimateGas.collectBT(t,n);return a?s:await R(s,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.collectBT,t,n)}async collectDatatokens(t,e,a){var i;if(!await this.getExchange(t))return null;const r=await this.contract.getExchange(t),n=await this.amountToUnits(r.datatoken,e,+r.dtDecimals),s=await this.contract.estimateGas.collectDT(t,n);return a?s:await R(s,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.collectDT,t,n)}async collectMarketFee(t,e){var a;if(!await this.getExchange(t))return null;const i=await this.contract.estimateGas.collectMarketFee(t);return e?i:await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.collectMarketFee,t)}async collectOceanFee(t,e){var a;if(!await this.getExchange(t))return null;const i=await this.contract.estimateGas.collectOceanFee(t);return e?i:await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.collectOceanFee,t)}async getOPCCollector(){return await this.contract.opcCollector()}async getRouter(){return await this.contract.router()}async getExchangeOwner(t){return await(await this.getExchange(t)).exchangeOwner}async updateMarketFee(t,e,a){var i;const r=await this.contract.estimateGas.updateMarketFee(t,await this.amountToUnits(null,e,18));return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.updateMarketFee,t,await this.amountToUnits(null,e,18))}async updateMarketFeeCollector(t,e,a){var i;const r=await this.contract.estimateGas.updateMarketFeeCollector(t,e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.updateMarketFeeCollector,t,e)}}class ot extends rt{getDefaultAbi(){return c.abi}async buyDatatokenBatch(t,e){var a;const i=await this.contract.estimateGas.buyDTBatch(t);return e?i:await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.buyDTBatch,t)}async isApprovedToken(t){return await this.contract.isApprovedToken(t)}async isFixedPrice(t){return await this.contract.isFixedRateContract(t)}async getOwner(){return await this.contract.routerOwner()}async getNFTFactory(){return await this.contract.factory()}async addApprovedToken(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const r=await this.contract.estimateGas.addApprovedToken(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.addApprovedToken,e)}async removeApprovedToken(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const r=await this.contract.estimateGas.removeApprovedToken(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.removeApprovedToken,e)}async addFixedRateContract(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const r=await this.contract.estimateGas.addFixedRateContract(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.addFixedRateContract,e)}async removeFixedRateContract(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const r=await this.contract.estimateGas.removeFixedRateContract(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.removeFixedRateContract,e)}async addDispenserContract(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const r=await this.contract.estimateGas.addDispenserContract(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.addDispenserContract,e)}async removeDispenserContract(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const r=await this.contract.estimateGas.removeDispenserContract(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.removeDispenserContract,e)}async getOPCFee(t){return await this.contract.getOPCFee(t)}async getCurrentOPCFee(){return await this.contract.swapOceanFee()}async updateOPCFee(t,e,a,i,r,n){var s;if(await this.getOwner()!==t)throw new Error("Caller is not Router Owner");const o=await this.contract.estimateGas.updateOPCFee(e,a,i,r);return n?o:await R(o,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,this.contract.updateOPCFee,e,a,i,r)}}class ct extends it{getDefaultAbi(){return d.abi}async createDatatoken(t,e,a,i,r,n,s,o,c,l,u,d){var h;if(!0!==(await this.getNftPermissions(t,e)).deployERC20)throw new Error("Caller is not DatatokenDeployer");u||(u=1),c&&l||({name:c,symbol:l}=P());const g=this.getContract(t),p=await g.estimateGas.createERC20(u,[c,l],[a,i,r,n],[await this.amountToUnits(null,o,18),await this.amountToUnits(null,s,18)],[]);if(d)return p;const m=await R(p,this.signer,null==(h=this.config)?void 0:h.gasFeeMultiplier,g.createERC20,u,[c,l],[a,i,r,n],[await this.amountToUnits(null,o,18),await this.amountToUnits(null,s,18)],[]),w=U(await m.wait(),"TokenCreated");return null==w?void 0:w.args[0]}async addManager(t,e,a,i){var r;const n=this.getContract(t);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const s=await n.estimateGas.addManager(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.addManager,a)}async removeManager(t,e,a,i){var r;const n=this.getContract(t);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const s=await n.estimateGas.removeManager(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.removeManager,a)}async addDatatokenDeployer(t,e,a,i){var r;const n=this.getContract(t);if(!0!==(await this.getNftPermissions(t,e)).manager)throw new Error("Caller is not Manager");const s=await n.estimateGas.addToCreateERC20List(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.addToCreateERC20List,a)}async removeDatatokenDeployer(t,e,a,i){var r;const n=this.getContract(t);if(!0!==(await this.getNftPermissions(t,e)).manager||e===a&&!0!==(await this.getNftPermissions(t,e)).deployERC20)throw new Error("Caller is not Manager nor DatatokenDeployer");const s=await n.estimateGas.removeFromCreateERC20List(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.removeFromCreateERC20List,a)}async addMetadataUpdater(t,e,a,i){var r;const n=this.getContract(t);if(!0!==(await this.getNftPermissions(t,e)).manager)throw new Error("Caller is not Manager");const s=await n.estimateGas.addToMetadataList(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.addToMetadataList,a)}async removeMetadataUpdater(t,e,a,i){var r;const n=this.getContract(t);if(!0!==(await this.getNftPermissions(t,e)).manager||e!==a&&!0!==(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Manager nor Metadata Updater");const s=await n.estimateGas.removeFromMetadataList(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.removeFromMetadataList,a)}async addStoreUpdater(t,e,a,i){var r;const n=this.getContract(t);if(!0!==(await this.getNftPermissions(t,e)).manager)throw new Error("Caller is not Manager");const s=await n.estimateGas.addTo725StoreList(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.addTo725StoreList,a)}async removeStoreUpdater(t,e,a,i){var r;const n=this.getContract(t);if(!0!==(await this.getNftPermissions(t,e)).manager||e!==a&&!0!==(await this.getNftPermissions(t,e)).store)throw new Error("Caller is not Manager nor storeUpdater");const s=await n.estimateGas.removeFrom725StoreList(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.removeFrom725StoreList,a)}async cleanPermissions(t,e,a){var i;const r=this.getContract(t);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const n=await r.estimateGas.cleanPermissions();return a?n:await R(n,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,r.cleanPermissions)}async transferNft(t,e,a,i,r){var n;const s=this.getContract(t);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const o=i||1,c=await s.estimateGas.transferFrom(e,a,o);return r?c:await R(c,this.signer,null==(n=this.config)?void 0:n.gasFeeMultiplier,s.transferFrom,e,a,o)}async safeTransferNft(t,e,a,i,r){var n;const s=this.getContract(t);if(await this.getNftOwner(t)!==e)throw new Error("Caller is not NFT Owner");const o=i||1,c=await s.estimateGas.safeTransferFrom(e,a,o);return r?c:await R(c,this.signer,null==(n=this.config)?void 0:n.gasFeeMultiplier,s.safeTransferFrom,e,a,o)}async setMetadata(t,e,a,i,r,n,s,o,c,l){var u;const d=this.getContract(t);if(c||(c=[]),!(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Metadata updater");const h=await d.estimateGas.setMetaData(a,i,r,n,s,o,c);return l?h:await R(h,this.signer,null==(u=this.config)?void 0:u.gasFeeMultiplier,d.setMetaData,a,i,r,n,s,o,c)}async setMetadataAndTokenURI(t,e,a,i){var r;const n=this.getContract(t);if(!(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Metadata updater");const s=T({},a,{metadataProofs:a.metadataProofs||[]}),o=await n.estimateGas.setMetaDataAndTokenURI(s);return i?o:await R(o,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.setMetaDataAndTokenURI,s)}async setMetadataState(t,e,a,i){var r;const n=this.getContract(t);if(!(await this.getNftPermissions(t,e)).updateMetadata)throw new Error("Caller is not Metadata updater");const s=await n.estimateGas.setMetaDataState(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.setMetaDataState,a)}async setTokenURI(t,e,a){var i;const r=this.getContract(t),n=await r.estimateGas.setTokenURI("1",e);return a?n:await R(n,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,r.setTokenURI,"1",e)}async getNftOwner(t){const e=this.getContract(t);return await e.ownerOf(1)}async getNftPermissions(t,e){const a=this.getContract(t);return await a.getPermissions(e)}async getMetadata(t){const e=this.getContract(t);return await e.getMetaData()}async isDatatokenDeployer(t,e){const a=this.getContract(t);return await a.isERC20Deployer(e)}async setData(t,e,i,r,n){var s;if(!0!==(await this.getNftPermissions(t,e)).store)throw new Error("User is not ERC20 store updater");const o=this.getContract(t),c=a.utils.keccak256(i),l=a.utils.hexlify(a.utils.toUtf8Bytes(r)),u=await o.estimateGas.setNewData(c,l);return n?u:await R(u,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,o.setNewData,c,l)}async getData(t,e){const i=this.getContract(t),r=a.utils.keccak256(e),n=await i.getData(r);return n?a.utils.toUtf8String(n):null}async getTokenURI(t,e){const a=this.getContract(t);return await a.tokenURI(e)}}class lt extends it{getDefaultAbi(){return l.abi}constructor(t,e,a,i,r){super(t,e,a,i),this.abiEnterprise=void 0,this.nft=void 0,this.abiEnterprise=r||u.abi,this.nft=new ct(this.signer)}async approve(t,e,a,i){var r;const n=this.getContract(t),s=await n.estimateGas.approve(e,A(null,null,a,18));return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.approve,e,A(null,null,a,18))}async createFixedRate(t,e,a,i){var r;const n=this.getContract(t);if(!await this.isDatatokenDeployer(t,e))throw new Error("User is not Datatoken Deployer");a.allowedConsumer||(a.allowedConsumer=b);const s=!1===a.withMint?0:1,o=await n.estimateGas.createFixedRate(a.fixedRateAddress,[a.baseTokenAddress,a.owner,a.marketFeeCollector,a.allowedConsumer],[a.baseTokenDecimals,a.datatokenDecimals,a.fixedRate,a.marketFee,s]);return i?o:await R(o,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.createFixedRate,a.fixedRateAddress,[a.baseTokenAddress,a.owner,a.marketFeeCollector,a.allowedConsumer],[a.baseTokenDecimals,a.datatokenDecimals,a.fixedRate,a.marketFee,s])}async createDispenser(t,e,a,i,r){var n;if(!await this.isDatatokenDeployer(t,e))throw new Error("User is not Datatoken Deployer");const s=this.getContract(t);i.allowedSwapper||(i.allowedSwapper=b),i.withMint=!1!==i.withMint;const o=await s.estimateGas.createDispenser(a,i.maxTokens,i.maxBalance,i.withMint,i.allowedSwapper);return r?o:await R(o,this.signer,null==(n=this.config)?void 0:n.gasFeeMultiplier,s.createDispenser,a,i.maxTokens,i.maxBalance,i.withMint,i.allowedSwapper)}async mint(t,e,a,i,r){const s=this.getContract(t);if(!0!==(await this.getPermissions(t,e)).minter)throw new Error("Caller is not Minter");const o=await this.getCap(t);if(new n(o).gte(a)){var c;const t=await s.estimateGas.mint(i||e,A(null,null,a,18));return r?t:await R(t,this.signer,null==(c=this.config)?void 0:c.gasFeeMultiplier,s.mint,i||e,A(null,null,a,18))}throw new Error("Mint amount exceeds cap available")}async addMinter(t,e,a,i){var r;const n=this.getContract(t);if(!0!==await this.isDatatokenDeployer(t,e))throw new Error("Caller is not DatatokenDeployer");const s=await n.estimateGas.addMinter(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.addMinter,a)}async removeMinter(t,e,a,i){var r;const n=this.getContract(t);if(!0!==await this.isDatatokenDeployer(t,e))throw new Error("Caller is not DatatokenDeployer");const s=await n.estimateGas.removeMinter(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.removeMinter,a)}async addPaymentManager(t,e,a,i){var r;const n=this.getContract(t);if(!0!==await this.isDatatokenDeployer(t,e))throw new Error("Caller is not DatatokenDeployer");const s=await n.estimateGas.addPaymentManager(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.addPaymentManager,a)}async removePaymentManager(t,e,a,i){var r;const n=this.getContract(t);if(!0!==await this.isDatatokenDeployer(t,e))throw new Error("Caller is not DatatokenDeployer");const s=await n.estimateGas.removePaymentManager(a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.removePaymentManager,a)}async setPaymentCollector(t,e,a,i){var r;const n=this.getContract(t),s=(await this.getPermissions(t,e)).paymentManager,o=!s&&await this.getNFTAddress(t),c=o&&await this.nft.getNftOwner(o)===e,l=o&&!c&&await this.nft.getNftPermissions(o,e);if(!s&&!c&&!(null==l?void 0:l.deployERC20))throw new Error("Caller is not Fee Manager, owner or Datatoken Deployer");const u=await n.estimateGas.setPaymentCollector(a);return i?u:await R(u,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.setPaymentCollector,a)}async getPaymentCollector(t){const e=this.getContract(t);return await e.getPaymentCollector()}async transfer(t,e,a,i){return this.transferWei(t,e,await A(null,null,a,18),i)}async transferWei(t,e,a,i){var r;const n=this.getContract(t),s=await n.estimateGas.transfer(e,a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.transfer,e,a)}async startOrder(t,e,a,i,r,n){var s;const o=this.getContract(t);r||(r={consumeMarketFeeAddress:b,consumeMarketFeeToken:b,consumeMarketFeeAmount:"0"});const c=await o.estimateGas.startOrder(e,a,i,r);return n?c:await R(c,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,o.startOrder,e,a,i,r)}async reuseOrder(t,e,a,i){var r;const n=this.getContract(t),s=await n.estimateGas.reuseOrder(e,a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.reuseOrder,e,a)}async buyFromFreAndOrder(t,e,a,i){var r;const n=this.getContract(t,this.abiEnterprise),s=await this.getFreOrderParams(a),o=await n.estimateGas.buyFromFreAndOrder(e,s);return i?o:await R(o,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.buyFromFreAndOrder,e,s)}async buyFromDispenserAndOrder(t,e,a,i){var r;const n=this.getContract(t,this.abiEnterprise),s=await n.estimateGas.buyFromDispenserAndOrder(e,a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,n.buyFromDispenserAndOrder,e,a)}async setData(t,e,i,r){var n;if(!await this.isDatatokenDeployer(t,e))throw new Error("User is not Datatoken Deployer");const s=this.getContract(t),o=a.utils.hexlify(a.utils.toUtf8Bytes(i)),c=await s.estimateGas.setData(o);return r?c:await R(c,this.signer,null==(n=this.config)?void 0:n.gasFeeMultiplier,s.setData,o)}async cleanPermissions(t,e,a){var i;if(await this.nft.getNftOwner(await this.getNFTAddress(t))!==e)throw new Error("Caller is NOT Nft Owner");const r=this.getContract(t),n=await r.estimateGas.cleanPermissions();return a?n:await R(n,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,r.cleanPermissions)}async getPermissions(t,e){const a=this.getContract(t);return await a.permissions(e)}async getCap(t){const e=this.getContract(t),a=await e.cap();return await this.unitsToAmount(null,a,18)}async getDecimals(t){const e=this.getContract(t);return await e.decimals()}async getId(t){const e=this.getContract(t);return await e.getId()}async getSymbol(t){const e=this.getContract(t);return await e.symbol()}async getName(t){const e=this.getContract(t);return await e.name()}async getNFTAddress(t){const e=this.getContract(t);return await e.getERC721Address()}async getFixedRates(t){const e=this.getContract(t);return await e.getFixedRates()}async getDispensers(t){const e=this.getContract(t);return await e.getDispensers()}async isDatatokenDeployer(t,e){const a=this.getContract(t);return await a.isERC20Deployer(e)}async balance(t,e){const a=this.getContract(t),i=await a.balanceOf(e);return await this.unitsToAmount(null,i,18)}async setPublishingMarketFee(t,e,a,i,r,n){var s;const o=this.getContract(t);if((await o.getPublishingMarketFee())[0]!==r)throw new Error("Caller is not the Publishing Market Fee Address");const c=await o.estimateGas.setPublishingMarketFee(e,a,i);return n?c:await R(c,this.signer,null==(s=this.config)?void 0:s.gasFeeMultiplier,o.setPublishingMarketFee,e,a,i)}async getPublishingMarketFee(t){const e=this.getContract(t),a=await e.getPublishingMarketFee();return{publishMarketFeeAddress:a[0],publishMarketFeeToken:a[1],publishMarketFeeAmount:a[2].toString()}}async getFreOrderParams(t){return{exchangeContract:t.exchangeContract,exchangeId:t.exchangeId,maxBaseTokenAmount:await A(this.signer,t.baseTokenAddress,t.maxBaseTokenAmount,t.baseTokenDecimals),swapMarketFee:await A(this.signer,t.baseTokenAddress,t.swapMarketFee,t.baseTokenDecimals),marketFeeAddress:t.marketFeeAddress}}}class ut extends rt{getDefaultAbi(){return h.abi}async createNFT(t,e){var a;if(t.templateIndex||(t.templateIndex=1),!t.name||!t.symbol){const{name:e,symbol:a}=P();t.name=e,t.symbol=a}if(t.templateIndex>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===t.templateIndex)throw new Error("Template index cannot be ZERO");if(!1===(await this.getNFTTemplate(t.templateIndex)).isActive)throw new Error("Template is not active");const i=await this.contract.estimateGas.deployERC721Contract(t.name,t.symbol,t.templateIndex,b,b,t.tokenURI,t.transferable,t.owner);if(e)return i;const r=await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.deployERC721Contract,t.name,t.symbol,t.templateIndex,b,b,t.tokenURI,t.transferable,t.owner);return U(await r.wait(),"NFTCreated").args[0]}async getCurrentNFTCount(){return await this.contract.getCurrentNFTCount()}async getCurrentTokenCount(){return await this.contract.getCurrentTokenCount()}async getOwner(){return await this.contract.owner()}async getCurrentNFTTemplateCount(){return await this.contract.getCurrentNFTTemplateCount()}async getCurrentTokenTemplateCount(){return await this.contract.getCurrentTemplateCount()}async getNFTTemplate(t){if(t>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===t)throw new Error("Template index cannot be ZERO");return await this.contract.getNFTTemplate(t)}async getTokenTemplate(t){return await this.contract.getTokenTemplate(t)}async checkDatatoken(t){return await this.contract.erc20List(t)}async checkNFT(t){return await this.contract.erc721List(t)}async addNFTTemplate(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e===b)throw new Error("Template cannot be ZERO address");const r=await this.contract.estimateGas.add721TokenTemplate(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.add721TokenTemplate,e)}async disableNFTTemplate(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");const r=await this.contract.estimateGas.disable721TokenTemplate(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.disable721TokenTemplate,e)}async reactivateNFTTemplate(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentNFTTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");const r=await this.contract.estimateGas.reactivate721TokenTemplate(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.reactivate721TokenTemplate,e)}async addTokenTemplate(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e===b)throw new Error("Template cannot be address ZERO");const r=await this.contract.estimateGas.addTokenTemplate(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.addTokenTemplate,e)}async disableTokenTemplate(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentTokenTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");if(!1===(await this.getTokenTemplate(e)).isActive)throw new Error("Template is already disabled");const r=await this.contract.estimateGas.disableTokenTemplate(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.disableTokenTemplate,e)}async reactivateTokenTemplate(t,e,a){var i;if(await this.getOwner()!==t)throw new Error("Caller is not Factory Owner");if(e>await this.getCurrentTokenTemplateCount())throw new Error("Template index doesnt exist");if(0===e)throw new Error("Template index cannot be ZERO");if(!0===(await this.getTokenTemplate(e)).isActive)throw new Error("Template is already active");const r=await this.contract.estimateGas.reactivateTokenTemplate(e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.reactivateTokenTemplate,e)}async startMultipleTokenOrder(t,e){var a;if(t.length>50)throw new Error("Too many orders");const i=await this.contract.estimateGas.startMultipleTokenOrder(t);return e?i:await R(i,this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.startMultipleTokenOrder,t)}async createNftWithDatatoken(t,e,a){var i;const r=await this.getErcCreationParams(e),n=await this.contract.estimateGas.createNftWithErc20(t,r);return a?n:await R(n,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.createNftWithErc20,t,r)}async createNftWithDatatokenWithFixedRate(t,e,a,i){var r;const n=await this.getErcCreationParams(e),s=await this.getFreCreationParams(a),o=await this.contract.estimateGas.createNftWithErc20WithFixedRate(t,n,s);return i?o:await R(o,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.createNftWithErc20WithFixedRate,t,n,s)}async createNftWithDatatokenWithDispenser(t,e,a,i){var r;const n=await this.getErcCreationParams(e);a.maxBalance=await this.amountToUnits(null,a.maxBalance,18),a.maxTokens=await this.amountToUnits(null,a.maxTokens,18);const s=await this.contract.estimateGas.createNftWithErc20WithDispenser(t,n,a);return i?s:await R(s,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.createNftWithErc20WithDispenser,t,n,a)}async getErcCreationParams(t){let e,a;t.name&&t.symbol||({name:e,symbol:a}=P());let i=18;if(t.feeToken!==b)try{i=await M(this.signer,t.feeToken)}catch(t){B.error("getTokenDecimals error",t)}return{templateIndex:t.templateIndex,strings:[t.name||e,t.symbol||a],addresses:[t.minter,t.paymentCollector,t.mpFeeAddress,t.feeToken],uints:[await this.amountToUnits(null,t.cap,18),await this.amountToUnits(null,t.feeAmount,i)],bytess:[]}}async getFreCreationParams(t){t.allowedConsumer||(t.allowedConsumer=b);const e=!1===t.withMint?0:1;return{fixedPriceAddress:t.fixedRateAddress,addresses:[t.baseTokenAddress,t.owner,t.marketFeeCollector,t.allowedConsumer],uints:[t.baseTokenDecimals,t.datatokenDecimals,await this.amountToUnits(null,t.fixedRate,18),await this.amountToUnits(null,t.marketFee,18),e]}}}class dt extends rt{getDefaultAbi(){return g.abi}async lockTokens(t,e,a){var i;const r=await this.amountToUnits(await this.getToken(),t),n=await this.contract.estimateGas.create_lock(r,e);return a?n:await R(n.add(2e4),this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.create_lock,r,e)}async depositFor(t,e,a){var i;const r=await this.amountToUnits(await this.getToken(),e),n=await this.contract.estimateGas.deposit_for(t,r);return a?n:await R(n.add(2e4),this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.deposit_for,t,r)}async increaseAmount(t,e){var a;const i=await this.amountToUnits(await this.getToken(),t),r=await this.contract.estimateGas.increase_amount(i);return e?r:await R(r.add(2e4),this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.increase_amount,i)}async increaseUnlockTime(t,e){var a;const i=await this.contract.estimateGas.increase_unlock_time(t);return e?i:await R(i.add(2e4),this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.increase_unlock_time,t)}async withdraw(t){var e;const a=await this.contract.estimateGas.withdraw();return t?a:await R(a.add(2e4),this.signer,null==(e=this.config)?void 0:e.gasFeeMultiplier,this.contract.withdraw)}async getVotingPower(t){return await this.contract.balanceOf(t)}async getLockedAmount(t){const e=await this.contract.locked(t);return await this.unitsToAmount(await this.getToken(),e.amount.toString())}async lockEnd(t){const e=await this.contract.locked__end(t);return parseInt(e.toString())}async totalSupply(){return await this.unitsToAmount(await this.getToken(),await this.contract.totalSupply())}async getToken(){return await this.contract.token()}}class ht extends rt{getDefaultAbi(){return p.abi}async claim(t){var e;const a=await this.contract.estimateGas.claim();return t?a:await R(a.add(2e4),this.signer,null==(e=this.config)?void 0:e.gasFeeMultiplier,this.contract.claim)}async claimMany(t,e){var a;const i=await this.contract.estimateGas.claim_many(t);return e?i:await R(i.add(2e4),this.signer,null==(a=this.config)?void 0:a.gasFeeMultiplier,this.contract.claim_many,t)}}class gt extends rt{getDefaultAbi(){return m.abi}async estimateClaim(t){const e=await this.contract.estimateClaim(t),a=new dt(await this.contract.voting_escrow(),this.signer);return await this.unitsToAmount(await a.getToken(),e)}}class pt extends rt{getDefaultAbi(){return w.abi}async setAllocation(t,e,a,i){var r;const n=await this.contract.estimateGas.setAllocation(t,e,a);return i?n:await R(n.add(2e4),this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.setAllocation,t,e,a)}async setBatchAllocation(t,e,a,i){var r;const n=await this.contract.estimateGas.setBatchAllocation(t,e,a);return i?n:await R(n.add(2e4),this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.setBatchAllocation,t,e,a)}async getTotalAllocation(t){return await this.contract.getTotalAllocation(t)}async getVeAllocation(t,e,a){return await this.contract.getveAllocation(t,e,a)}}class mt extends rt{getDefaultAbi(){return f.abi}async getAvailableRewards(t,e){const a=await this.contract.claimable(t,e);return await this.unitsToAmount(e,a)}async claimRewards(t,e,a){var i;const r=await this.contract.estimateGas.claimFor(t,e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.claimFor,t,e)}async allocateRewards(t,e,a,i){var r;for(let t=0;t<e.length;t++)e[t]=await this.amountToUnits(a,e[t]);const n=await this.contract.estimateGas.allocate(t,e,a);return i?n:await R(n,this.signer,null==(r=this.config)?void 0:r.gasFeeMultiplier,this.contract.allocate,t,e,a)}}class wt extends rt{getDefaultAbi(){return v.abi}async getMultipleAvailableRewards(t,e){const a=await this.contract.claimables(t,e),i=[];for(let t=0;t<a.length;t++)i.push(await this.unitsToAmount(e[t],a[t]));return i}async claimMultipleRewards(t,e,a){var i;const r=await this.contract.estimateGas.claimMultiple(t,e);return a?r:await R(r,this.signer,null==(i=this.config)?void 0:i.gasFeeMultiplier,this.contract.claimMultiple,t,e)}}class ft{constructor(t){this.aquariusURL=void 0,this.aquariusURL=t}async resolve(t,e){const a=this.aquariusURL+"/api/aquarius/assets/ddo/"+t;try{const t=await r(a,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});if(t.ok)return await t.json();throw new Error("HTTP request failed with status "+t.status)}catch(t){throw B.error(t),new Error("HTTP request failed")}}async waitForAqua(t,e,a){let i=0;do{try{const i=this.aquariusURL+"/api/aquarius/assets/ddo/"+t,n=await r(i,{method:"GET",headers:{"Content-Type":"application/json"},signal:a});if(n.ok){const t=await n.json();if(!e)return t;if(t.event&&t.event.txid===e)return t}}catch(t){}await j(1500),i++}while(i<100);return null}async validate(t,e){const a={valid:!1};let i;try{const n=this.aquariusURL+"/api/aquarius/assets/ddo/validate",s=await r(n,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/octet-stream"},signal:e});i=await s.json(),200===s.status?(a.valid=!0,a.hash=i.hash,a.proof={validatorAddress:i.publicKey,r:i.r[0],s:i.s[0],v:i.v}):(a.errors=i,B.error("validate Metadata failed:",s.status,a.errors))}catch(t){B.error("Error validating metadata: ",t)}return a}async getAssetMetadata(t,e){const a=this.aquariusURL+"/api/aquarius/assets/metadata/"+t;try{const t=await r(a,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});if(t.ok)return t.json();throw new Error("getAssetMetadata failed: "+t.status+t.statusText)}catch(t){throw B.error("Error getting metadata: ",t),new Error("Error getting metadata: "+t)}}async querySearch(t,e){const a=this.aquariusURL+"/api/aquarius/assets/query";try{const i=await r(a,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"},signal:e});if(i.ok)return i.json();throw new Error("querySearch failed: "+i.status+i.statusText)}catch(t){throw B.error("Error querying metadata: ",t),new Error("Error querying metadata: "+t)}}}class vt{async getEndpoints(t){try{const e=await this.getData(t);return await e.json()}catch(t){throw B.error("Finding the service endpoints failed:",t),new Error("HTTP request failed calling Provider")}}getEndpointURL(t,e){return t?t.find(t=>t.serviceName===e):null}async getServiceEndpoints(t,e){const a=[];for(const i in e.serviceEndpoints)a.push({serviceName:i,method:e.serviceEndpoints[i][0],urlPath:t+e.serviceEndpoints[i][1]});return a}async getNonce(t,e,a,i,n){i||(i=await this.getEndpoints(t)),n||(n=await this.getServiceEndpoints(t,i));const s=this.getEndpointURL(n,"nonce")?this.getEndpointURL(n,"nonce").urlPath:null;if(!s)return null;try{const t=await r(s+`?userAddress=${e}`,{method:"GET",headers:{"Content-Type":"application/json"},signal:a}),{nonce:i}=await t.json();return console.log(`[getNonce] Consumer: ${e} nonce: ${i}`),i&&null!==i?Number(i):0}catch(t){throw B.error(t),new Error(t.message)}}async signProviderRequest(t,e){const i=a.utils.solidityKeccak256(["bytes"],[a.utils.hexlify(a.utils.toUtf8Bytes(e))]),r=a.utils.arrayify(i),n=await t.getChainId();try{return await t.signMessage(r)}catch(e){if(B.error("Sign provider message error: ",e),8996===n)return await t._legacySignMessage(r)}}async encrypt(t,e,a,i){const n=await this.getEndpoints(a),s=await this.getServiceEndpoints(a,n),o=(this.getEndpointURL(s,"encrypt")?this.getEndpointURL(s,"encrypt").urlPath:null)+`?chainId=${e}`;if(!o)return null;try{const e=await r(o,{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/octet-stream"},signal:i});return await e.text()}catch(t){throw B.error(t),new Error("HTTP request failed calling Provider")}}async checkDidFiles(t,e,a,i=!1,n){var s;const o=await this.getEndpoints(a),c=await this.getServiceEndpoints(a,o),l={did:t,serviceId:e,checksum:i},u=[],d=this.getEndpointURL(c,"fileinfo")?this.getEndpointURL(c,"fileinfo").urlPath:null;if(!d)return null;let h;try{h=await r(d,{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json"},signal:n})}catch(t){throw B.error("File info call failed: "),B.error(t),new Error(t)}if(null!=(s=h)&&s.ok){const t=await h.json();for(const e of t)u.push(e);return u}const g=await h.json();throw B.error("File info call failed: ",h.status,h.statusText,g),new Error(JSON.stringify(g))}async getFileInfo(t,e,a=!1,i){var n;const s=await this.getEndpoints(e),o=await this.getServiceEndpoints(e,s),c=T({},t,{checksum:a}),l=[],u=this.getEndpointURL(o,"fileinfo")?this.getEndpointURL(o,"fileinfo").urlPath:null;if(!u)return null;let d;try{d=await r(u,{method:"POST",body:JSON.stringify(c),headers:{"Content-Type":"application/json"},signal:i})}catch(t){throw B.error("File info call failed: "),B.error(t),new Error(t)}if(null!=(n=d)&&n.ok){const t=await d.json();for(const e of t)l.push(e);return l}const h=await d.json();throw B.error("File info call failed: ",d.status,d.statusText,h),new Error(JSON.stringify(h))}async getComputeEnvironments(t,e){var a,i;const n=await this.getEndpoints(t),s=await this.getServiceEndpoints(t,n),o=null==(a=this.getEndpointURL(s,"computeEnvironments"))?void 0:a.urlPath;if(!o)return null;let c;try{c=await r(o,{method:"GET",headers:{"Content-Type":"application/json"},signal:e})}catch(t){throw B.error("Fetch compute env failed: "),B.error(t),new Error(t)}if(null!=(i=c)&&i.ok){const t=c.json();return Array.isArray(t)?{[n.chainId]:t}:t}const l=await c.json();throw B.error("Fetch compute env failed: ",c.status,c.statusText,l),new Error(JSON.stringify(l))}async initialize(t,e,a,i,n,s,o,c,l){var u;const d=await this.getEndpoints(n),h=await this.getServiceEndpoints(n,d);let g,p=this.getEndpointURL(h,"initialize")?this.getEndpointURL(h,"initialize").urlPath:null;if(!p)return null;p+=`?documentId=${t}`,p+=`&serviceId=${e}`,p+=`&fileIndex=${a}`,p+=`&consumerAddress=${i}`,o&&(p+="&userdata="+encodeURI(JSON.stringify(o))),c&&(p+="&environment="+encodeURI(c)),l&&(p+="&validUntil="+l);try{g=await r(p,{method:"GET",headers:{"Content-Type":"application/json"},signal:s})}catch(t){throw B.error("Provider initialized failed: "),B.error(t),new Error(`Provider initialize failed url: ${p} `)}if(null!=(u=g)&&u.ok)return await g.json();const m=await g.json();throw B.error("Provider initialized failed: ",g.status,g.statusText,m),new Error(JSON.stringify(m))}async initializeCompute(t,e,a,i,n,s,o){var c;const l=await this.getEndpoints(n),u=await this.getServiceEndpoints(n,l),d={datasets:t,algorithm:e,compute:{env:a,validUntil:i},consumerAddress:s},h=this.getEndpointURL(u,"initializeCompute")?this.getEndpointURL(u,"initializeCompute").urlPath:null;if(!h)return null;let g;try{g=await r(h,{method:"POST",body:JSON.stringify(d),headers:{"Content-Type":"application/json"},signal:o})}catch(t){throw B.error("Initialize compute failed: "),B.error(t),new Error("ComputeJob cannot be initialized")}if(null!=(c=g)&&c.ok)return await g.json();const p=await g.json();throw B.error("Initialize compute failed: ",g.status,g.statusText,p),B.error("Payload was:",d),new Error(JSON.stringify(p))}async getDownloadUrl(t,e,a,i,r,n,s){const o=await this.getEndpoints(r),c=await this.getServiceEndpoints(r,o),l=this.getEndpointURL(c,"download")?this.getEndpointURL(c,"download").urlPath:null;if(!l)return null;const u=await n.getAddress(),d=(await this.getNonce(r,u,null,o,c)+1).toString();let h=l;return h+=`?fileIndex=${a}`,h+=`&documentId=${t}`,h+=`&transferTxId=${i}`,h+=`&serviceId=${e}`,h+=`&consumerAddress=${u}`,h+=`&nonce=${d}`,h+=`&signature=${await this.signProviderRequest(n,t+d)}`,s&&(h+="&userdata="+encodeURI(JSON.stringify(s))),h}async computeStart(t,e,a,i,n,s,o,c){var l;const u=await this.getEndpoints(t),d=await this.getServiceEndpoints(t,u),h=this.getEndpointURL(d,"computeStart")?this.getEndpointURL(d,"computeStart").urlPath:null,g=await e.getAddress(),p=(await this.getNonce(t,g,s,u,d)+1).toString();let m=g;m+=i.documentId,m+=p;const w=await this.signProviderRequest(e,m),f=Object();if(f.consumerAddress=g,f.signature=w,f.nonce=p,f.environment=a,f.dataset=i,f.algorithm=n,o&&(f.additionalDatasets=o),c&&(f.output=c),!h)return null;let v;try{v=await r(h,{method:"POST",body:JSON.stringify(f),headers:{"Content-Type":"application/json"},signal:s})}catch(t){throw B.error("Compute start failed:"),B.error(t),B.error("Payload was:",f),new Error("HTTP request failed calling Provider")}return null!=(l=v)&&l.ok?await v.json():(B.error("Compute start failed: ",v.status,v.statusText,await v.json()),B.error("Payload was:",f),null)}async computeStop(t,e,a,i,n,s){var o;const c=await this.getEndpoints(i),l=await this.getServiceEndpoints(i,c),u=this.getEndpointURL(l,"computeStop")?this.getEndpointURL(l,"computeStop").urlPath:null,d=(await this.getNonce(i,e,s,c,l)+1).toString();let h=e;h+=a||"",h+=t&&`${this.noZeroX(t)}`||"",h+=d;const g=await this.signProviderRequest(n,h),p=Object();if(p.signature=g,p.documentId=this.noZeroX(t),p.consumerAddress=e,p.nonce=d,a&&(p.jobId=a),!u)return null;let m;try{m=await r(u,{method:"PUT",body:JSON.stringify(p),headers:{"Content-Type":"application/json"},signal:s})}catch(t){throw B.error("Compute stop failed:"),B.error(t),B.error("Payload was:",p),new Error("HTTP request failed calling Provider")}if(null!=(o=m)&&o.ok)return await m.json();const w=await m.json();throw B.error("Compute stop failed: ",m.status,m.statusText,w),B.error("Payload was:",p),new Error(JSON.stringify(w))}async computeStatus(t,e,a,i,n){var s,o;const c=await this.getEndpoints(t),l=await this.getServiceEndpoints(t,c),u=this.getEndpointURL(l,"computeStatus")?this.getEndpointURL(l,"computeStatus").urlPath:null;let d,h=`?consumerAddress=${e}`;if(h+=i&&`&documentId=${this.noZeroX(i)}`||"",h+=a&&`&jobId=${a}`||"",!u)return null;try{d=await r(u+h,{method:"GET",headers:{"Content-Type":"application/json"},signal:n})}catch(t){throw B.error("Get compute status failed"),B.error(t),new Error(t)}if(null!=(s=d)&&s.ok)return await d.json();if(B.error("Get compute status failed:",d.status,d.statusText),null!=(o=d)&&o.ok)return await d.json();const g=await d.json();throw B.error("Get compute status failed:",d.status,d.statusText,g),new Error(JSON.stringify(g))}async getComputeResultUrl(t,e,a,i){const r=await this.getEndpoints(t),n=await this.getServiceEndpoints(t,r),s=this.getEndpointURL(n,"computeResult")?this.getEndpointURL(n,"computeResult").urlPath:null,o=(await this.getNonce(t,await e.getAddress(),null,r,n)+1).toString();let c=await e.getAddress();c+=a,c+=i.toString(),c+=o;const l=await this.signProviderRequest(e,c);if(!s)return null;let u=s;return u+=`?consumerAddress=${await e.getAddress()}`,u+=`&jobId=${a}`,u+=`&index=${i.toString()}`,u+=`&nonce=${o}`,u+=l&&`&signature=${l}`||"",u}async computeDelete(t,e,a,i,n){var s;const o=await this.getEndpoints(i),c=await this.getServiceEndpoints(i,o),l=this.getEndpointURL(c,"computeDelete")?this.getEndpointURL(c,"computeDelete").urlPath:null,u=(await this.getNonce(i,await e.getAddress(),n,o,c)+1).toString();let d=await e.getAddress();d+=a||"",d+=t&&`${this.noZeroX(t)}`||"",d+=u;const h=await this.signProviderRequest(e,d),g=Object();if(g.documentId=this.noZeroX(t),g.consumerAddress=await e.getAddress(),g.jobId=a,h&&(g.signature=h),!l)return null;let p;try{p=await r(l,{method:"DELETE",body:JSON.stringify(g),headers:{"Content-Type":"application/json"},signal:n})}catch(t){throw B.error("Delete compute job failed:"),B.error(t),B.error("Payload was:",g),new Error("HTTP request failed calling Provider")}if(null!=(s=p)&&s.ok)return await p.json();const m=await p.json();throw B.error("Delete compute job failed:",p.status,p.statusText,m),B.error("Payload was:",g),new Error(JSON.stringify(m))}async isValidProvider(t,e){try{const a=await r(t,{method:"GET",headers:{"Content-Type":"application/json"},signal:e});if(null!=a&&a.ok){const t=await a.json();if(t&&(t.providerAddress||t.providerAddresses))return!0}return!1}catch(t){return B.error(`Error validating provider: ${t.message}`),!1}}noZeroX(t){return this.zeroXTransformer(t,!1)}zeroXTransformer(t="",e){const{valid:a,output:i}=this.inputMatch(t,/^(?:0x)*([a-f0-9]+)$/i,"zeroXTransformer");return(e&&a?"0x":"")+i}inputMatch(t,e,a){if("string"!=typeof t)throw B.debug("Not input string:"),B.debug(t),new Error(`[${a}] Expected string, input type: ${typeof t}`);const i=t.match(e);return i?{valid:!0,output:i[1]}:(B.warn(`[${a}] Input transformation failed.`),{valid:!1,output:t})}async getData(t){return r(t,{method:"GET",headers:{"Content-type":"application/json"}})}}const yt=new vt;export{ft as Aquarius,y as Config,at as ConfigHelper,lt as Datatoken,mt as DfRewards,wt as DfStrategyV1,nt as Dispenser,E as FEE_HISTORY_NOT_SUPPORTED,st as FixedRateExchange,F as GASLIMIT_DEFAULT,O as LogLevel,L as Logger,B as LoggerInstance,k as MAX_UINT_256,ct as Nft,ut as NftFactory,vt as Provider,yt as ProviderInstance,ot as Router,it as SmartContract,rt as SmartContractWithAddress,pt as VeAllocate,ht as VeFeeDistributor,gt as VeFeeEstimate,dt as VeOcean,b as ZERO_ADDRESS,V as allowance,H as allowanceWei,A as amountToUnits,W as approve,J as approveWei,Z as balance,et as configHelperNetworks,X as decimals,_ as downloadFile,G as downloadFileBrowser,I as generateDid,P as generateDtName,K as getErrorMessage,U as getEventFromTx,x as getFairGasPrice,N as getHash,M as getTokenDecimals,$ as minAbi,Y as orderAsset,R as sendTx,C as setContractDefaults,q as signHash,j as sleep,z as transfer,D as unitsToAmount};
//# sourceMappingURL=lib.modern.js.map
